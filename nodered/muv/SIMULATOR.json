{
    "id": "3604848f36682059",
    "label": "657981a347cb8bb5e47cc126",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "t2bwjifnpz4vbzzv",
            "type": "inject",
            "z": "3604848f36682059",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 80,
            "wires": [
                [
                    "4i6oiyoq4hae2cs8"
                ]
            ]
        },
        {
            "id": "4i6oiyoq4hae2cs8",
            "type": "getflows",
            "z": "3604848f36682059",
            "name": "",
            "x": 300,
            "y": 80,
            "wires": [
                [
                    "uo0kd1e4i5i3h700"
                ]
            ]
        },
        {
            "id": "uo0kd1e4i5i3h700",
            "type": "function",
            "z": "3604848f36682059",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 80,
            "wires": [
                [
                    "8snurzzrc8e14fyn"
                ]
            ]
        },
        {
            "id": "8snurzzrc8e14fyn",
            "type": "switch",
            "z": "3604848f36682059",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 580,
            "y": 80,
            "wires": [
                [
                    "z94l1wourdktpn4p"
                ]
            ]
        },
        {
            "id": "z94l1wourdktpn4p",
            "type": "function",
            "z": "3604848f36682059",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "ja3l4aq9yk8qtxkz"
                ]
            ]
        },
        {
            "id": "ja3l4aq9yk8qtxkz",
            "type": "change",
            "z": "3604848f36682059",
            "name": "simulationData initial values",
            "rules": [
                {
                    "t": "set",
                    "p": "simulationData",
                    "pt": "flow",
                    "to": "{\"SYSTEM-0\":0,\"SIM-0\":0,\"SIM-1\":false,\"SIM-2\":99,\"ERROR-0\":false,\"RESET-0\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 200,
            "y": 140,
            "wires": [
                [
                    "o6xi6c9ipzq2vxab",
                    "s7786k2j7p9t58a9"
                ]
            ]
        },
        {
            "id": "xxbey1jo4fq2tvr6",
            "type": "link in",
            "z": "3604848f36682059",
            "name": "Update Metrics",
            "links": [
                "1ypi0mey3buvl189",
                "2e9ox9hiehxpjubc",
                "3wcumolrc7abwjpz",
                "clq34ql3cfcpsa46",
                "euwtxowe0swpmaic",
                "lrenkwr398kz3jwx",
                "px3ywqtgcaqwnesx",
                "q4c6dtk9f5p2u1iu",
                "uqococ1bn6nvhehy",
                "xlam54c5gw4j32l9",
                "s7786k2j7p9t58a9"
            ],
            "x": 65,
            "y": 640,
            "wires": [
                [
                    "svt9s31xlrbskkbg"
                ]
            ]
        },
        {
            "id": "5zmp2dwi03zudsnt",
            "type": "function",
            "z": "3604848f36682059",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 480,
            "y": 640,
            "wires": [
                [
                    "d1w906hx1drwpy5q",
                    "6d4mslmfdj9gmu3n"
                ]
            ]
        },
        {
            "id": "d1w906hx1drwpy5q",
            "type": "mqtt out",
            "z": "3604848f36682059",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1100,
            "y": 640,
            "wires": []
        },
        {
            "id": "6d4mslmfdj9gmu3n",
            "type": "mqtt out",
            "z": "3604848f36682059",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1100,
            "y": 680,
            "wires": []
        },
        {
            "id": "ggrbd7orjcv3hpve",
            "type": "comment",
            "z": "3604848f36682059",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 580,
            "wires": []
        },
        {
            "id": "u9w3cyjtcsr6vcaz",
            "type": "flogger",
            "z": "3604848f36682059",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 610,
            "y": 1300,
            "wires": [
                []
            ]
        },
        {
            "id": "z5yqc33wk9ojqcqq",
            "type": "function",
            "z": "3604848f36682059",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 280,
            "y": 1300,
            "wires": [
                [
                    "sm21a1kcsd8mh1r5"
                ]
            ]
        },
        {
            "id": "sm21a1kcsd8mh1r5",
            "type": "function",
            "z": "3604848f36682059",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 1300,
            "wires": [
                [
                    "u9w3cyjtcsr6vcaz"
                ]
            ]
        },
        {
            "id": "1z4vpgi69b5v6e73",
            "type": "catch",
            "z": "3604848f36682059",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1300,
            "wires": [
                [
                    "z5yqc33wk9ojqcqq"
                ]
            ]
        },
        {
            "id": "kn6x8mgo84icdzbm",
            "type": "change",
            "z": "3604848f36682059",
            "name": "Step 1",
            "rules": [
                {
                    "t": "set",
                    "p": "simulationData.SIM-0",
                    "pt": "flow",
                    "to": "10",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "simulationData.SIM-1",
                    "pt": "flow",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 230,
            "y": 260,
            "wires": [
                [
                    "fv1rrtzpkacr0uow",
                    "s7786k2j7p9t58a9"
                ]
            ]
        },
        {
            "id": "s7786k2j7p9t58a9",
            "type": "link out",
            "z": "3604848f36682059",
            "name": "link out 19",
            "mode": "link",
            "links": [
                "xxbey1jo4fq2tvr6"
            ],
            "x": 1025,
            "y": 280
        },
        {
            "id": "swl4324phubtrgvs",
            "type": "delay",
            "z": "3604848f36682059",
            "name": "",
            "pauseType": "delay",
            "timeout": "30",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 240,
            "y": 220,
            "wires": [
                [
                    "kn6x8mgo84icdzbm"
                ]
            ]
        },
        {
            "id": "akgb9fnyw9phxlvd",
            "type": "delay",
            "z": "3604848f36682059",
            "name": "",
            "pauseType": "delay",
            "timeout": "30",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 240,
            "y": 360,
            "wires": [
                [
                    "67d31ki1ahql5bzm"
                ]
            ]
        },
        {
            "id": "67d31ki1ahql5bzm",
            "type": "change",
            "z": "3604848f36682059",
            "name": "Step 2",
            "rules": [
                {
                    "t": "set",
                    "p": "simulationData.SIM-0",
                    "pt": "flow",
                    "to": "30",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "simulationData.SIM-1",
                    "pt": "flow",
                    "to": "false",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 230,
            "y": 400,
            "wires": [
                [
                    "s7786k2j7p9t58a9",
                    "6d73b3zmb8ziqp96"
                ]
            ]
        },
        {
            "id": "far0sw4eg96qoxqp",
            "type": "link in",
            "z": "3604848f36682059",
            "name": "Step 1",
            "links": [
                "o6xi6c9ipzq2vxab",
                "6d73b3zmb8ziqp96"
            ],
            "x": 95,
            "y": 220,
            "wires": [
                [
                    "swl4324phubtrgvs"
                ]
            ]
        },
        {
            "id": "xgmlr601ry1w9gvq",
            "type": "link in",
            "z": "3604848f36682059",
            "name": "Step 2",
            "links": [
                "fv1rrtzpkacr0uow"
            ],
            "x": 95,
            "y": 360,
            "wires": [
                [
                    "akgb9fnyw9phxlvd"
                ]
            ]
        },
        {
            "id": "o6xi6c9ipzq2vxab",
            "type": "link out",
            "z": "3604848f36682059",
            "name": "link out 20",
            "mode": "link",
            "links": [
                "far0sw4eg96qoxqp"
            ],
            "x": 1025,
            "y": 160
        },
        {
            "id": "fv1rrtzpkacr0uow",
            "type": "link out",
            "z": "3604848f36682059",
            "name": "link out 21",
            "mode": "link",
            "links": [
                "xgmlr601ry1w9gvq"
            ],
            "x": 1025,
            "y": 200
        },
        {
            "id": "6d73b3zmb8ziqp96",
            "type": "link out",
            "z": "3604848f36682059",
            "name": "link out 22",
            "mode": "link",
            "links": [
                "far0sw4eg96qoxqp"
            ],
            "x": 1025,
            "y": 240
        },
        {
            "id": "svt9s31xlrbskkbg",
            "type": "change",
            "z": "3604848f36682059",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "simulationData",
                    "tot": "flow"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 220,
            "y": 640,
            "wires": [
                [
                    "5zmp2dwi03zudsnt"
                ]
            ]
        },
        {
            "id": "wmdyiuyo993ueius",
            "type": "inject",
            "z": "3604848f36682059",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 180,
            "wires": [
                [
                    "ja3l4aq9yk8qtxkz"
                ]
            ]
        },
        {
            "id": "1g5hvk6ds4o63eyi",
            "type": "mqtt in",
            "z": "3604848f36682059",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 120,
            "y": 1020,
            "wires": [
                [
                    "f6huto9adwc066bc"
                ]
            ]
        },
        {
            "id": "0gl0c2aqif8r0w39",
            "type": "inject",
            "z": "3604848f36682059",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 900,
            "wires": [
                [
                    "cltmlindntudkl5b"
                ]
            ]
        },
        {
            "id": "zryh0tvpnxrt8t4x",
            "type": "function",
            "z": "3604848f36682059",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 210,
            "y": 980,
            "wires": [
                [
                    "1g5hvk6ds4o63eyi"
                ]
            ]
        },
        {
            "id": "cltmlindntudkl5b",
            "type": "switch",
            "z": "3604848f36682059",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 940,
            "wires": [
                [
                    "it8vfscm7ojm227u"
                ],
                [
                    "zryh0tvpnxrt8t4x"
                ]
            ]
        },
        {
            "id": "it8vfscm7ojm227u",
            "type": "function",
            "z": "3604848f36682059",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 940,
            "wires": []
        },
        {
            "id": "f6huto9adwc066bc",
            "type": "function",
            "z": "3604848f36682059",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.id,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.id,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.id,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.id,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 1020,
            "wires": [
                [
                    "47k5z419yueeuu1z"
                ],
                [
                    "s7dx64m08u43nvnf"
                ]
            ]
        },
        {
            "id": "s7dx64m08u43nvnf",
            "type": "mqtt out",
            "z": "3604848f36682059",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1090,
            "y": 1020,
            "wires": []
        },
        {
            "id": "47k5z419yueeuu1z",
            "type": "function",
            "z": "3604848f36682059",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 570,
            "y": 1000,
            "wires": [
                [
                    "nuh00ye1rvetm7ok"
                ],
                [
                    "s7dx64m08u43nvnf",
                    "e6ilgvk2d5rrgmjv"
                ]
            ]
        },
        {
            "id": "e6ilgvk2d5rrgmjv",
            "type": "debug",
            "z": "3604848f36682059",
            "name": "Response",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 560,
            "y": 1060,
            "wires": []
        },
        {
            "id": "pta06qr86rh7ddcx",
            "type": "debug",
            "z": "3604848f36682059",
            "name": "Command",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1050,
            "y": 900,
            "wires": []
        },
        {
            "id": "a9n7kbc6qs07y9la",
            "type": "comment",
            "z": "3604848f36682059",
            "name": "---- Handle commands",
            "info": "",
            "x": 100,
            "y": 840,
            "wires": []
        },
        {
            "id": "nuh00ye1rvetm7ok",
            "type": "switch",
            "z": "3604848f36682059",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 830,
            "y": 960,
            "wires": [
                [
                    "pta06qr86rh7ddcx",
                    "49da8a757ceb5dba"
                ],
                [
                    "z9x10zml9zijsqmh"
                ]
            ]
        },
        {
            "id": "z9x10zml9zijsqmh",
            "type": "debug",
            "z": "3604848f36682059",
            "name": "Not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1080,
            "y": 980,
            "wires": []
        },
        {
            "id": "wgt7qizcf3hr2vdh",
            "type": "comment",
            "z": "3604848f36682059",
            "name": "---- Handle errors",
            "info": "",
            "x": 80,
            "y": 1240,
            "wires": []
        },
        {
            "id": "49da8a757ceb5dba",
            "type": "function",
            "z": "3604848f36682059",
            "name": "Set Value",
            "func": "if(msg.payload.address === \"RESET-0\"){\n    flow.set(\"bridge.image.metrics\")[\"ERROR-0\"] = false;\n}else if(msg.payload.address === \"ERROR-0\"){\n    flow.set(\"bridge.image.metrics\")[\"ERROR-0\"] = true;\n}else {\n    flow.set(\"bridge.image.metrics\")[msg.payload.address], msg.payload.value;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1040,
            "y": 860,
            "wires": [
                []
            ]
        }
    ],
    "configs": [
        {
            "id": "u1yaeql5lkw91535",
            "type": "modbus-client",
            "z": "3604848f36682059",
            "name": "Flexible Channel",
            "clienttype": "serial",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "127.0.0.1",
            "tcpPort": "10502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyAMA2",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "19200",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "1",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": false,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}