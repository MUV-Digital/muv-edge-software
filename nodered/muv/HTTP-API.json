{
    "id": "0f4318aea9e606af",
    "label": "Flow 1",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "df963246b9b4d687",
            "type": "http request",
            "z": "0f4318aea9e606af",
            "name": "",
            "method": "GET",
            "ret": "obj",
            "paytoqs": "ignore",
            "url": "https://api.smart-me.com/DeviceBySerial?serial=71856826",
            "tls": "",
            "persist": true,
            "proxy": "",
            "insecureHTTPParser": false,
            "authType": "basic",
            "senderr": false,
            "headers": [],
            "x": 590,
            "y": 380,
            "wires": [
                [
                    "db7ff966a6594736"
                ]
            ]
        },
        {
            "id": "5cfe02b591bc6a0b",
            "type": "inject",
            "z": "0f4318aea9e606af",
            "name": "Read Interval",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 380,
            "y": 380,
            "wires": [
                []
            ]
        },
        {
            "id": "a6f6c207a9993bf8",
            "type": "mqtt out",
            "z": "0f4318aea9e606af",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1660,
            "y": 440,
            "wires": []
        },
        {
            "id": "e212d7ff332aa3bb",
            "type": "switch",
            "z": "0f4318aea9e606af",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1340,
            "y": 420,
            "wires": [
                [
                    "a6f6c207a9993bf8"
                ]
            ]
        },
        {
            "id": "6809547c8c9cf27b",
            "type": "switch",
            "z": "0f4318aea9e606af",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1340,
            "y": 380,
            "wires": [
                [
                    "8ac7780a7b7d5f8a"
                ]
            ]
        },
        {
            "id": "8ac7780a7b7d5f8a",
            "type": "mqtt out",
            "z": "0f4318aea9e606af",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1660,
            "y": 380,
            "wires": []
        },
        {
            "id": "56ab9b81069073af",
            "type": "function",
            "z": "0f4318aea9e606af",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1020,
            "y": 380,
            "wires": [
                [
                    "e212d7ff332aa3bb",
                    "6809547c8c9cf27b"
                ]
            ]
        },
        {
            "id": "db7ff966a6594736",
            "type": "function",
            "z": "0f4318aea9e606af",
            "name": "filter",
            "func": "var filtered = {\n    \"ANALOG-0\": msg.payload.ActivePower,\n    \"ANALOG-1\": msg.payload.CounterReading,\n}\nmsg.payload = filtered;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 730,
            "y": 380,
            "wires": [
                [
                    "56ab9b81069073af"
                ]
            ]
        }
    ]
}