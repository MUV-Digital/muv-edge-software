{
    "id": "e95e599795b0200b",
    "label": "65561956115175c1ec001afa",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "jr4k6diics8epatg",
            "type": "mqtt in",
            "z": "e95e599795b0200b",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 120,
            "y": 1340,
            "wires": [
                [
                    "u51xbn1mklqice48"
                ]
            ]
        },
        {
            "id": "68a82vfcskpjhbct",
            "type": "mqtt out",
            "z": "e95e599795b0200b",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1120,
            "y": 980,
            "wires": []
        },
        {
            "id": "in1ru7jcztlfhh4k",
            "type": "inject",
            "z": "e95e599795b0200b",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 1220,
            "wires": [
                [
                    "nbv7i3zmo0dc3e52"
                ]
            ]
        },
        {
            "id": "yicyx0xqvbmtidtu",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 210,
            "y": 1300,
            "wires": [
                [
                    "jr4k6diics8epatg"
                ]
            ]
        },
        {
            "id": "0v829zuo4nc292ut",
            "type": "inject",
            "z": "e95e599795b0200b",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "m9kbpkuum46l4nfr"
                ]
            ]
        },
        {
            "id": "m9kbpkuum46l4nfr",
            "type": "getflows",
            "z": "e95e599795b0200b",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "d0ovfkgxjqpwqrak"
                ]
            ]
        },
        {
            "id": "d0ovfkgxjqpwqrak",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "3nv4mgqrpvjd03v9"
                ]
            ]
        },
        {
            "id": "nbv7i3zmo0dc3e52",
            "type": "switch",
            "z": "e95e599795b0200b",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 1260,
            "wires": [
                [
                    "nwgk6t4iddavios4"
                ],
                [
                    "yicyx0xqvbmtidtu"
                ]
            ]
        },
        {
            "id": "nwgk6t4iddavios4",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 1260,
            "wires": []
        },
        {
            "id": "p6z41bcmnwbj98td",
            "type": "comment",
            "z": "e95e599795b0200b",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1160,
            "wires": []
        },
        {
            "id": "omjwa7w2tdu2yjld",
            "type": "comment",
            "z": "e95e599795b0200b",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "3nv4mgqrpvjd03v9",
            "type": "switch",
            "z": "e95e599795b0200b",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "rmdphyw9ljabjtxv"
                ]
            ]
        },
        {
            "id": "voqzgcker601hpmq",
            "type": "comment",
            "z": "e95e599795b0200b",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 360,
            "wires": []
        },
        {
            "id": "4qkzdw1ltjtobrrt",
            "type": "inject",
            "z": "e95e599795b0200b",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "zk73fn3qh3muy9xc"
                ]
            ]
        },
        {
            "id": "vi663e30t2zsc80i",
            "type": "delay",
            "z": "e95e599795b0200b",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 960,
            "y": 1340,
            "wires": [
                [
                    "68a82vfcskpjhbct"
                ]
            ]
        },
        {
            "id": "8ys0v5q5uewvdulj",
            "type": "switch",
            "z": "e95e599795b0200b",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 960,
            "wires": [
                [
                    "68a82vfcskpjhbct"
                ]
            ]
        },
        {
            "id": "u51xbn1mklqice48",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "send write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(command => command.id === command.id)\nconst matchingProtocol = flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId)\n\nif (matchingProtocol && matchingCommand) {\n    msg.protocolId = matchingCommand.protocolId;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = parseInt(command.value) * -1 * (1 / matchingProtocol.scale);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n\n    return [msg, null]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: command.response } };\n    responseMessage.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/setpoint/write\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"Command configuration wrong!\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 320,
            "y": 1340,
            "wires": [
                [
                    "a3dbd1f5d175c9ae",
                    "c9514bf732aa1082"
                ],
                [
                    "0b1c2ba3d1a633a7"
                ]
            ]
        },
        {
            "id": "rmdphyw9ljabjtxv",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "c4dc1913c7773c6d"
                ]
            ]
        },
        {
            "id": "f24aoaivxyug18fc",
            "type": "switch",
            "z": "e95e599795b0200b",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 920,
            "wires": [
                [
                    "r54e2wkfunr3ag7j"
                ]
            ]
        },
        {
            "id": "r54e2wkfunr3ag7j",
            "type": "mqtt out",
            "z": "e95e599795b0200b",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1120,
            "y": 920,
            "wires": []
        },
        {
            "id": "ifpivj7d7wtmwqjh",
            "type": "comment",
            "z": "e95e599795b0200b",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "zk73fn3qh3muy9xc",
            "type": "link out",
            "z": "e95e599795b0200b",
            "name": "link out 14",
            "mode": "link",
            "links": [
                "8432wmlkzzt9soau",
                "4b4uben23e8ibtq3"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "4b4uben23e8ibtq3",
            "type": "link in",
            "z": "e95e599795b0200b",
            "name": "Virtual Read",
            "links": [
                "jak7xse55acrj144",
                "zk73fn3qh3muy9xc"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "h0xpzebxej5vz2s0"
                ]
            ]
        },
        {
            "id": "h0xpzebxej5vz2s0",
            "type": "switch",
            "z": "e95e599795b0200b",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "cfsfy6r027czizig"
                ]
            ]
        },
        {
            "id": "gxcdv5xatj4mv1kc",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"kwh\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = flow.get(\"bridge.image.metrics\")[metricId];\n        }\n        msg.payload[metricId] = msg.payload[metricId] + (flow.get(\"bridge.image.metrics\")[parameterIds[0]] / 3600);\n    },\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        functions[calc.func](sequence.dataPoint.id, calc.ids)\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "pcppnppkyq0pazhb"
                ]
            ]
        },
        {
            "id": "cwxdx5oa6wj92ku5",
            "type": "comment",
            "z": "e95e599795b0200b",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 820,
            "wires": []
        },
        {
            "id": "1rqe7jg33rrrbw89",
            "type": "link in",
            "z": "e95e599795b0200b",
            "name": "Update Metrics",
            "links": [
                "pcppnppkyq0pazhb",
                "kcgzi9p01m7bwfqi",
                "1a69c0e4315c5e20",
                "34e9257c8b3fb010"
            ],
            "x": 75,
            "y": 920,
            "wires": [
                [
                    "8n7th2gm5eo44uzc"
                ]
            ]
        },
        {
            "id": "8n7th2gm5eo44uzc",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 320,
            "y": 920,
            "wires": [
                [
                    "8ys0v5q5uewvdulj",
                    "f24aoaivxyug18fc"
                ]
            ]
        },
        {
            "id": "cfm13gdwzjgeetxa",
            "type": "flogger",
            "z": "e95e599795b0200b",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 1560,
            "wires": [
                []
            ]
        },
        {
            "id": "a27iajgv05xhlb6x",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 1560,
            "wires": [
                [
                    "73m6q6v2gxkwotpp"
                ]
            ]
        },
        {
            "id": "4hupsd9749a2lbuj",
            "type": "catch",
            "z": "e95e599795b0200b",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1560,
            "wires": [
                [
                    "a27iajgv05xhlb6x"
                ]
            ]
        },
        {
            "id": "73m6q6v2gxkwotpp",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1560,
            "wires": [
                [
                    "cfm13gdwzjgeetxa"
                ]
            ]
        },
        {
            "id": "pcppnppkyq0pazhb",
            "type": "link out",
            "z": "e95e599795b0200b",
            "name": "link out 16",
            "mode": "link",
            "links": [
                "1rqe7jg33rrrbw89"
            ],
            "x": 1215,
            "y": 260
        },
        {
            "id": "51ookcnt85gjrw99",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "gxcdv5xatj4mv1kc"
                ]
            ]
        },
        {
            "id": "cfsfy6r027czizig",
            "type": "switch",
            "z": "e95e599795b0200b",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "51ookcnt85gjrw99"
                ]
            ]
        },
        {
            "id": "nn4mrno7wu6cqwbx",
            "type": "exec",
            "z": "e95e599795b0200b",
            "command": "fbset -g 1280 720 1280 720 4",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Fullscreen",
            "x": 480,
            "y": 420,
            "wires": [
                [],
                [],
                [
                    "kokh75ktssjmnknz"
                ]
            ]
        },
        {
            "id": "kokh75ktssjmnknz",
            "type": "exec",
            "z": "e95e599795b0200b",
            "command": "fbi -a -d /dev/fb0 --noverbose -T 1 -1 images/clear.png",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Clear Screen",
            "x": 670,
            "y": 440,
            "wires": [
                [],
                [],
                [
                    "zx5kktewi4x9kcdu"
                ]
            ]
        },
        {
            "id": "zx5kktewi4x9kcdu",
            "type": "exec",
            "z": "e95e599795b0200b",
            "command": "pgrep fbi | xargs kill",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Kill FBI",
            "x": 920,
            "y": 460,
            "wires": [
                [],
                [],
                []
            ]
        },
        {
            "id": "ymz098zw8q1pk4d0",
            "type": "exec",
            "z": "e95e599795b0200b",
            "command": "fbi -a -d /dev/fb0 --noverbose -T 1 -1",
            "addpay": "payload",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Image",
            "x": 930,
            "y": 580,
            "wires": [
                [],
                [],
                []
            ]
        },
        {
            "id": "it5uxx0nedahqo5u",
            "type": "delay",
            "z": "e95e599795b0200b",
            "name": "",
            "pauseType": "delay",
            "timeout": "500",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 470,
            "y": 540,
            "wires": [
                [
                    "5h5m6ny26q0o786b",
                    "4rg5zyn8rrn2f4ej"
                ]
            ]
        },
        {
            "id": "5h5m6ny26q0o786b",
            "type": "exec",
            "z": "e95e599795b0200b",
            "command": "fbset -g 96 96 96 96 4",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Image Screen",
            "x": 690,
            "y": 500,
            "wires": [
                [],
                [],
                []
            ]
        },
        {
            "id": "4rg5zyn8rrn2f4ej",
            "type": "delay",
            "z": "e95e599795b0200b",
            "name": "",
            "pauseType": "delay",
            "timeout": "500",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 670,
            "y": 560,
            "wires": [
                [
                    "ymz098zw8q1pk4d0"
                ]
            ]
        },
        {
            "id": "0b1c2ba3d1a633a7",
            "type": "mqtt out",
            "z": "e95e599795b0200b",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1010,
            "y": 1380,
            "wires": []
        },
        {
            "id": "a3dbd1f5d175c9ae",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Write data",
            "func": "let writeMessage = { payload: { } };\nwriteMessage.payload[msg.protocolId] = msg.payload.value;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/setpoint/write\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 630,
            "y": 1320,
            "wires": [
                [
                    "vi663e30t2zsc80i",
                    "1a69c0e4315c5e20",
                    "0d5b988ca09f4b12"
                ],
                [
                    "0b1c2ba3d1a633a7",
                    "55bdf4b9477d0927"
                ]
            ]
        },
        {
            "id": "1a69c0e4315c5e20",
            "type": "link out",
            "z": "e95e599795b0200b",
            "name": "link out 19",
            "mode": "link",
            "links": [
                "1rqe7jg33rrrbw89"
            ],
            "x": 915,
            "y": 1300
        },
        {
            "id": "c4dc1913c7773c6d",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Set init image",
            "func": "msg.payload = {};\n\nflow.get(\"bridge.image.protocols\").forEach(protocol => {\n    msg.payload[protocol.id] = \"\";\n})\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 80,
            "wires": [
                [
                    "34e9257c8b3fb010"
                ]
            ]
        },
        {
            "id": "34e9257c8b3fb010",
            "type": "link out",
            "z": "e95e599795b0200b",
            "name": "link out 20",
            "mode": "link",
            "links": [
                "1rqe7jg33rrrbw89",
                "5c0a82abd67d493f"
            ],
            "x": 1215,
            "y": 80
        },
        {
            "id": "5c0a82abd67d493f",
            "type": "link in",
            "z": "e95e599795b0200b",
            "name": "Clear Screen",
            "links": [
                "34e9257c8b3fb010"
            ],
            "x": 95,
            "y": 420,
            "wires": [
                [
                    "nn4mrno7wu6cqwbx"
                ]
            ]
        },
        {
            "id": "3c2d7dc823d38e97",
            "type": "link in",
            "z": "e95e599795b0200b",
            "name": "Set image",
            "links": [
                "f3c29575389b3a95"
            ],
            "x": 95,
            "y": 540,
            "wires": [
                [
                    "01155caca981619f"
                ]
            ]
        },
        {
            "id": "c9514bf732aa1082",
            "type": "function",
            "z": "e95e599795b0200b",
            "name": "Update image",
            "func": "msg.payload = \"images/\" + msg.payload.value;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 640,
            "y": 1260,
            "wires": [
                [
                    "f3c29575389b3a95",
                    "e2e11387d4b3201e"
                ]
            ]
        },
        {
            "id": "f3c29575389b3a95",
            "type": "link out",
            "z": "e95e599795b0200b",
            "name": "link out 21",
            "mode": "link",
            "links": [
                "3c2d7dc823d38e97"
            ],
            "x": 915,
            "y": 1260
        },
        {
            "id": "01155caca981619f",
            "type": "switch",
            "z": "e95e599795b0200b",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 190,
            "y": 540,
            "wires": [
                [
                    "nn4mrno7wu6cqwbx"
                ],
                [
                    "nn4mrno7wu6cqwbx",
                    "it5uxx0nedahqo5u"
                ]
            ]
        },
        {
            "id": "55bdf4b9477d0927",
            "type": "debug",
            "z": "e95e599795b0200b",
            "name": "debug 1",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1000,
            "y": 1460,
            "wires": []
        },
        {
            "id": "e2e11387d4b3201e",
            "type": "debug",
            "z": "e95e599795b0200b",
            "name": "debug 2",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 940,
            "y": 1200,
            "wires": []
        },
        {
            "id": "0d5b988ca09f4b12",
            "type": "debug",
            "z": "e95e599795b0200b",
            "name": "debug 3",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1180,
            "y": 1300,
            "wires": []
        }
    ]
}