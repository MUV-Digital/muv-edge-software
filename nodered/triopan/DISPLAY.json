{
    "id": "0d41bb9886a9ece2",
    "label": "65e822d9bbf65abc8cdf4438",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "t3byizw448fo31hf",
            "type": "mqtt out",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1060,
            "y": 880,
            "wires": []
        },
        {
            "id": "lfmg2cp80z4prn5o",
            "type": "inject",
            "z": "0d41bb9886a9ece2",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "bc3kl6xst7e17an7"
                ]
            ]
        },
        {
            "id": "bc3kl6xst7e17an7",
            "type": "getflows",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "uwo7vxosboc7b2c8"
                ]
            ]
        },
        {
            "id": "uwo7vxosboc7b2c8",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "wnq5ykr02ahsqx7g"
                ]
            ]
        },
        {
            "id": "n416s85xt8dgohar",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1160,
            "wires": []
        },
        {
            "id": "qhqew0w5hxdkxkwh",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "wnq5ykr02ahsqx7g",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "eiv9gvrcjr24jbx9"
                ]
            ]
        },
        {
            "id": "1uxtzmrrnyq53qig",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 360,
            "wires": []
        },
        {
            "id": "r6tpjntfk0wqq69a",
            "type": "inject",
            "z": "0d41bb9886a9ece2",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "40bmgg2yjuwulisw"
                ]
            ]
        },
        {
            "id": "eiv9gvrcjr24jbx9",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "lopsnr49szzfxsk6"
                ]
            ]
        },
        {
            "id": "p770nzywzxlggi3h",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "40bmgg2yjuwulisw",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 14",
            "mode": "link",
            "links": [
                "8432wmlkzzt9soau",
                "pusvlsjcdjbltils"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "pusvlsjcdjbltils",
            "type": "link in",
            "z": "0d41bb9886a9ece2",
            "name": "Virtual Read",
            "links": [
                "jak7xse55acrj144",
                "40bmgg2yjuwulisw"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "sa8f2d75zrsov7ts"
                ]
            ]
        },
        {
            "id": "sa8f2d75zrsov7ts",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "h81u5zabuerb3ign"
                ]
            ]
        },
        {
            "id": "oru4it16qn1iofel",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"kwh\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = flow.get(\"bridge.image.metrics\")[metricId];\n        }\n        msg.payload[metricId] = msg.payload[metricId] + (flow.get(\"bridge.image.metrics\")[parameterIds[0]] / 3600);\n    },\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        functions[calc.func](sequence.dataPoint.id, calc.ids)\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "75ctbqeeqsqu7vzv"
                ]
            ]
        },
        {
            "id": "rmtx2kxayx1trp1r",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 820,
            "wires": []
        },
        {
            "id": "4bk4jzh6bc415fdn",
            "type": "link in",
            "z": "0d41bb9886a9ece2",
            "name": "Update Metrics",
            "links": [
                "75ctbqeeqsqu7vzv",
                "kcgzi9p01m7bwfqi",
                "mrao1o6jtg3skhkx",
                "4c8ot9i9gag3b8xf",
                "3janl8qfjqhcvxzg",
                "a6171a9eb480a006"
            ],
            "x": 95,
            "y": 880,
            "wires": [
                [
                    "d6ea8e0cu954i131"
                ]
            ]
        },
        {
            "id": "d6ea8e0cu954i131",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 340,
            "y": 880,
            "wires": [
                [
                    "t3byizw448fo31hf"
                ]
            ]
        },
        {
            "id": "nwn1v8pupppdjbgr",
            "type": "flogger",
            "z": "0d41bb9886a9ece2",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 1720,
            "wires": [
                []
            ]
        },
        {
            "id": "6o4ilujmcrs6rpfu",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 1720,
            "wires": [
                [
                    "dmu5pckn2bb9wmd7"
                ]
            ]
        },
        {
            "id": "dmu5pckn2bb9wmd7",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1720,
            "wires": [
                [
                    "nwn1v8pupppdjbgr"
                ]
            ]
        },
        {
            "id": "75ctbqeeqsqu7vzv",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 16",
            "mode": "link",
            "links": [
                "4bk4jzh6bc415fdn"
            ],
            "x": 1215,
            "y": 260
        },
        {
            "id": "2vf4ctomj3bvs690",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "oru4it16qn1iofel"
                ]
            ]
        },
        {
            "id": "h81u5zabuerb3ign",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "2vf4ctomj3bvs690"
                ]
            ]
        },
        {
            "id": "cs6dh9ln96u49hrr",
            "type": "exec",
            "z": "0d41bb9886a9ece2",
            "command": "fbset -g 1280 720 1280 720 4",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Fullscreen",
            "x": 580,
            "y": 420,
            "wires": [
                [],
                [
                    "zybze7nrw10ai60c"
                ],
                [
                    "cj9y87ret2st53s7"
                ]
            ]
        },
        {
            "id": "cj9y87ret2st53s7",
            "type": "exec",
            "z": "0d41bb9886a9ece2",
            "command": "fbi -a -d /dev/fb0 --noverbose -T 1 -1 data/lib/ui-media/lib/images/clear.png",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Clear Screen",
            "x": 770,
            "y": 500,
            "wires": [
                [],
                [
                    "zybze7nrw10ai60c"
                ],
                [
                    "ldw12fond9ua507c"
                ]
            ]
        },
        {
            "id": "ldw12fond9ua507c",
            "type": "exec",
            "z": "0d41bb9886a9ece2",
            "command": "pgrep fbi | xargs kill",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Kill FBI",
            "x": 1020,
            "y": 520,
            "wires": [
                [],
                [
                    "zybze7nrw10ai60c"
                ],
                []
            ]
        },
        {
            "id": "gy4x94lh9hti4mri",
            "type": "exec",
            "z": "0d41bb9886a9ece2",
            "command": "fbi -a -d /dev/fb0 --noverbose -T 1 -1",
            "addpay": "payload",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Image",
            "x": 1030,
            "y": 640,
            "wires": [
                [],
                [
                    "zybze7nrw10ai60c"
                ],
                []
            ]
        },
        {
            "id": "rfbwkfv2yhc0gbj5",
            "type": "delay",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "pauseType": "delay",
            "timeout": "500",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 570,
            "y": 600,
            "wires": [
                [
                    "jfrqpu4ub9490795",
                    "t1216lub16xrlmop"
                ]
            ]
        },
        {
            "id": "jfrqpu4ub9490795",
            "type": "exec",
            "z": "0d41bb9886a9ece2",
            "command": "fbset -g 96 96 96 96 4",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Image Screen",
            "x": 790,
            "y": 560,
            "wires": [
                [],
                [
                    "zybze7nrw10ai60c"
                ],
                []
            ]
        },
        {
            "id": "t1216lub16xrlmop",
            "type": "delay",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "pauseType": "delay",
            "timeout": "500",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 770,
            "y": 620,
            "wires": [
                [
                    "gy4x94lh9hti4mri"
                ]
            ]
        },
        {
            "id": "lopsnr49szzfxsk6",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set init image",
            "func": "msg.payload = {};\n\nflow.get(\"bridge.image.protocols\").forEach(protocol => {\n    msg.payload[protocol.id] = \"\";\n})\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 80,
            "wires": [
                [
                    "4c8ot9i9gag3b8xf"
                ]
            ]
        },
        {
            "id": "4c8ot9i9gag3b8xf",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 20",
            "mode": "link",
            "links": [
                "4bk4jzh6bc415fdn",
                "7cxgls698jjjwsnv",
                "evhlbtjcb2l346tf"
            ],
            "x": 1215,
            "y": 80
        },
        {
            "id": "7cxgls698jjjwsnv",
            "type": "link in",
            "z": "0d41bb9886a9ece2",
            "name": "Clear Screen",
            "links": [
                "4c8ot9i9gag3b8xf"
            ],
            "x": 95,
            "y": 420,
            "wires": [
                [
                    "cs6dh9ln96u49hrr"
                ]
            ]
        },
        {
            "id": "3wq2gsosigq176os",
            "type": "link in",
            "z": "0d41bb9886a9ece2",
            "name": "Set image",
            "links": [
                "9470o1e7mxuh87zh",
                "d28yt3brk5yfajgz",
                "5b039hssl0xff9m8"
            ],
            "x": 95,
            "y": 600,
            "wires": [
                [
                    "xbmt27htmjgifyq4"
                ]
            ]
        },
        {
            "id": "xbmt27htmjgifyq4",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 390,
            "y": 600,
            "wires": [
                [
                    "cs6dh9ln96u49hrr"
                ],
                [
                    "cs6dh9ln96u49hrr",
                    "rfbwkfv2yhc0gbj5"
                ]
            ]
        },
        {
            "id": "z0faq5bq9kpjafoh",
            "type": "mqtt in",
            "z": "0d41bb9886a9ece2",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 130,
            "y": 1480,
            "wires": [
                [
                    "st19sxc3a7sus2mf"
                ]
            ]
        },
        {
            "id": "h8wka465m3xnzact",
            "type": "inject",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 1300,
            "wires": [
                [
                    "u0phcj410iryei3y"
                ]
            ]
        },
        {
            "id": "muos22w4boo774sf",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 310,
            "y": 1420,
            "wires": [
                [
                    "z0faq5bq9kpjafoh"
                ]
            ]
        },
        {
            "id": "u0phcj410iryei3y",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 160,
            "y": 1360,
            "wires": [
                [
                    "f0i5ovo5edlqzicu"
                ],
                [
                    "muos22w4boo774sf"
                ]
            ]
        },
        {
            "id": "f0i5ovo5edlqzicu",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 1360,
            "wires": []
        },
        {
            "id": "st19sxc3a7sus2mf",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 370,
            "y": 1480,
            "wires": [
                [
                    "z8x0hojcg2b4cq09"
                ],
                [
                    "vz39nmxzbeel4237"
                ]
            ]
        },
        {
            "id": "s20yzvbfn3acebcp",
            "type": "mqtt out",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1390,
            "y": 1540,
            "wires": []
        },
        {
            "id": "z8x0hojcg2b4cq09",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 590,
            "y": 1460,
            "wires": [
                [
                    "uv6pqcks6cb154ac"
                ],
                [
                    "kw7fr11itb874yp2"
                ]
            ]
        },
        {
            "id": "9pb0jqx8b1l5sq73",
            "type": "debug",
            "z": "0d41bb9886a9ece2",
            "name": "Execute Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1020,
            "y": 1280,
            "wires": []
        },
        {
            "id": "uv6pqcks6cb154ac",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1380,
            "wires": [
                [
                    "m9j6f5310gyxwdul"
                ],
                [
                    "9pb0jqx8b1l5sq73",
                    "sg72o984nqilv9ze",
                    "38d0bjxt623uteqr"
                ]
            ]
        },
        {
            "id": "m9j6f5310gyxwdul",
            "type": "debug",
            "z": "0d41bb9886a9ece2",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1070,
            "y": 1240,
            "wires": []
        },
        {
            "id": "ttdlz61wxv28x1t0",
            "type": "catch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "scope": [
                "v0ybzti4w6s318gl"
            ],
            "uncaught": false,
            "x": 610,
            "y": 1580,
            "wires": [
                [
                    "ssah3wzku4vcsz35"
                ]
            ]
        },
        {
            "id": "vz39nmxzbeel4237",
            "type": "delay",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1000,
            "y": 1540,
            "wires": [
                [
                    "s20yzvbfn3acebcp"
                ]
            ]
        },
        {
            "id": "pza5dgs0epx558fc",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1020,
            "y": 1460,
            "wires": [
                [
                    "vz39nmxzbeel4237"
                ]
            ]
        },
        {
            "id": "kw7fr11itb874yp2",
            "type": "delay",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1000,
            "y": 1640,
            "wires": [
                [
                    "s20yzvbfn3acebcp"
                ]
            ]
        },
        {
            "id": "ssah3wzku4vcsz35",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1020,
            "y": 1600,
            "wires": [
                [
                    "kw7fr11itb874yp2"
                ]
            ]
        },
        {
            "id": "sg72o984nqilv9ze",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Update image",
            "func": "const message = { \"payload\": \"data/lib/ui-media/lib/images/\" + msg.payload.value }\nflow.set(\"LT_IMAGE\", message.payload);\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1020,
            "y": 1420,
            "wires": [
                [
                    "pza5dgs0epx558fc",
                    "d28yt3brk5yfajgz",
                    "c96fa53c9bbbbe5c",
                    "286016b07446186d"
                ]
            ]
        },
        {
            "id": "d28yt3brk5yfajgz",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 21",
            "mode": "link",
            "links": [
                "3wq2gsosigq176os"
            ],
            "x": 1485,
            "y": 1420
        },
        {
            "id": "38d0bjxt623uteqr",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Update Metric",
            "func": "const message ={ \"payload\": {} };\nif(msg.payload.value.includes(\"clear\")){\n    message.payload[msg.protocolCommand.protocolId] = \"\";\n} else {\n    message.payload[msg.protocolCommand.protocolId] = msg.payload.value;\n}\n\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1020,
            "y": 1380,
            "wires": [
                [
                    "3janl8qfjqhcvxzg"
                ]
            ]
        },
        {
            "id": "3janl8qfjqhcvxzg",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 22",
            "mode": "link",
            "links": [
                "4bk4jzh6bc415fdn"
            ],
            "x": 1485,
            "y": 1380
        },
        {
            "id": "zybze7nrw10ai60c",
            "type": "debug",
            "z": "0d41bb9886a9ece2",
            "name": "Error",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1270,
            "y": 420,
            "wires": []
        },
        {
            "id": "kyk5hh8jo00lxelz",
            "type": "ui_text_input",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "label": "Text",
            "tooltip": "",
            "group": "0hsk0qox3qehdv59",
            "order": 10,
            "width": "6",
            "height": "1",
            "passthru": true,
            "mode": "text",
            "delay": "0",
            "topic": "topic",
            "sendOnBlur": true,
            "className": "textInput",
            "topicType": "msg",
            "x": 450,
            "y": 2400,
            "wires": [
                [
                    "k33yv2y4cxba70z9"
                ]
            ]
        },
        {
            "id": "5711x0ckp5ldr1zu",
            "type": "ui_template",
            "z": "0d41bb9886a9ece2",
            "group": "",
            "name": "Styles",
            "order": 1,
            "width": 0,
            "height": 0,
            "format": "<script id=\"logo-script\" type=\"text/javascript\">\n    $(function () {\n        const logoId = 'logo-div';\n        var toolbar = $('.md-toolbar-tools');\n        if(!toolbar.length) return;\n        if($(\"#\" + logoId).length > 0) return;\n\n        var div = $('<div/>');\n        div[0].style.margin = '10px 10px 10px auto';\n        div.attr('id', logoId);\n\n        var logo = new Image();\n        logo.src = 'https://triopan.ch/images/logo.png'\n        logo.height = 32;\n        \n        div.append(logo);\n        toolbar.append(div);\n    });\n    $('link[rel=\"shortcut icon\"]').attr('href', 'https://triopan.ch/images/logo.png');\n    $('link[rel=\"icon\"]').attr('href', 'https://triopan.ch/images/logo.png');\n</script>\n<style>\n    md-list-item .md-avatar {\n        border-radius: 0% !important;\n    }\n<\\style>",
            "storeOutMessages": true,
            "fwdInMessages": true,
            "resendOnRefresh": true,
            "templateScope": "global",
            "className": "",
            "x": 150,
            "y": 1900,
            "wires": [
                []
            ]
        },
        {
            "id": "l0u8ecppjb8ua3if",
            "type": "ui_list",
            "z": "0d41bb9886a9ece2",
            "group": "0hsk0qox3qehdv59",
            "name": "Image list",
            "order": 2,
            "width": "3",
            "height": "3",
            "lineType": "three",
            "actionType": "click",
            "allowHTML": false,
            "outputs": 1,
            "topic": "",
            "x": 460,
            "y": 2300,
            "wires": [
                [
                    "3j85thngeykt5nc7"
                ]
            ]
        },
        {
            "id": "fze5pr6sg9dc5yqc",
            "type": "exec",
            "z": "0d41bb9886a9ece2",
            "command": "ls data/lib/ui-media/lib/images",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "",
            "winHide": false,
            "oldrc": false,
            "name": "",
            "x": 290,
            "y": 2060,
            "wires": [
                [
                    "7v3du02pazshntxu"
                ],
                [],
                []
            ]
        },
        {
            "id": "evhlbtjcb2l346tf",
            "type": "link in",
            "z": "0d41bb9886a9ece2",
            "name": "Scan for images",
            "links": [
                "4c8ot9i9gag3b8xf"
            ],
            "x": 95,
            "y": 1980,
            "wires": [
                [
                    "vspwc8u8natcuy68"
                ]
            ]
        },
        {
            "id": "7v3du02pazshntxu",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Get available images",
            "func": "var message = {\"payload\":[]};\n\nmsg.payload.split(\"\\n\").forEach(element => {\n    if(element.includes(\".png\")){\n        message.payload.push({\"title\": element.split(\".\")[0],\"icon\":\"/uimedia/images/\" + element})\n    }\n});\n\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 2120,
            "wires": [
                [
                    "l0u8ecppjb8ua3if",
                    "m7rdvr71f44m6u3k"
                ]
            ]
        },
        {
            "id": "8tdyqwsmx7a53xo8",
            "type": "ui_text",
            "z": "0d41bb9886a9ece2",
            "group": "bfdo8xf7hqh8jiq0",
            "order": 1,
            "width": 0,
            "height": 0,
            "name": "",
            "label": "Screen Oben",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1910,
            "y": 2500,
            "wires": []
        },
        {
            "id": "wlvh0z417ihhqkjq",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "Top",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_TOP",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1290,
            "y": 2540,
            "wires": [
                [
                    "tnu8qn422bh3b9w0"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "t0734lhrsw1nd45a",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set text",
            "func": "if (flow.get(\"LT_IMAGE\")) {\n    msg.payload = {\n        \"image\": flow.get(\"LT_IMAGE\"),\n        \"text\": msg.payload\n    }\n} else {\n    msg.payload = {\n        \"image\": \"data/lib/ui-media/lib/images/clear.png\",\n        \"text\": msg.payload\n    }\n}\n\nif(!flow.get(\"LT_ALIGN\")){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1060,
            "y": 2540,
            "wires": [
                [
                    "w4xj5p405j2l5tli"
                ]
            ]
        },
        {
            "id": "3j85thngeykt5nc7",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set selected image",
            "func": "var image = msg.payload.icon.split(\"/\")[msg.payload.icon.split(\"/\").length -1]\nflow.set(\"LT_IMAGE\",  \"data/lib/ui-media/lib/images/\" + image);\n\nmsg.payload = flow.get(\"LT_IMAGE\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 670,
            "y": 2300,
            "wires": [
                [
                    "rxgx8ddwn6zzmoih"
                ]
            ]
        },
        {
            "id": "rxgx8ddwn6zzmoih",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "property": "LT_TEXT",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "null"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 3,
            "x": 830,
            "y": 2300,
            "wires": [
                [
                    "tnu8qn422bh3b9w0"
                ],
                [
                    "tnu8qn422bh3b9w0"
                ],
                [
                    "gv0y2jvovbrj7q7f"
                ]
            ]
        },
        {
            "id": "tnu8qn422bh3b9w0",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1410,
            "y": 2540,
            "wires": [
                [
                    "50036d4b4af9a114"
                ]
            ]
        },
        {
            "id": "gv0y2jvovbrj7q7f",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "LT_TEXT",
                    "tot": "flow"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 900,
            "y": 2540,
            "wires": [
                [
                    "t0734lhrsw1nd45a"
                ]
            ]
        },
        {
            "id": "k33yv2y4cxba70z9",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LT_TEXT",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 630,
            "y": 2400,
            "wires": [
                [
                    "gv0y2jvovbrj7q7f"
                ]
            ]
        },
        {
            "id": "36hf2b4wvpu5q8sx",
            "type": "ui_media",
            "z": "0d41bb9886a9ece2",
            "group": "bfdo8xf7hqh8jiq0",
            "name": "LT",
            "width": "2",
            "height": "2",
            "order": 2,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1890,
            "y": 2540,
            "wires": [
                []
            ]
        },
        {
            "id": "y2ygc6jpa817noac",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set preview image",
            "func": "msg.payload = 'screen/LT_PREVIEW.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1730,
            "y": 2540,
            "wires": [
                [
                    "36hf2b4wvpu5q8sx"
                ]
            ]
        },
        {
            "id": "m7rdvr71f44m6u3k",
            "type": "ui_list",
            "z": "0d41bb9886a9ece2",
            "group": "r5hz8d3gk9ctrbxg",
            "name": "Image list",
            "order": 2,
            "width": "3",
            "height": "3",
            "lineType": "three",
            "actionType": "click",
            "allowHTML": false,
            "outputs": 1,
            "topic": "",
            "x": 460,
            "y": 2800,
            "wires": [
                [
                    "pbdm0qd9745ui0gr"
                ]
            ]
        },
        {
            "id": "rqwakn7ppd7wdjt3",
            "type": "ui_text_input",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "label": "Text",
            "tooltip": "",
            "group": "r5hz8d3gk9ctrbxg",
            "order": 10,
            "width": "6",
            "height": "1",
            "passthru": true,
            "mode": "text",
            "delay": "0",
            "topic": "topic",
            "sendOnBlur": true,
            "className": "text-input",
            "topicType": "msg",
            "x": 450,
            "y": 2900,
            "wires": [
                [
                    "szeolbaqcb063to9"
                ]
            ]
        },
        {
            "id": "cz7lgj94c6q8w5xi",
            "type": "ui_text",
            "z": "0d41bb9886a9ece2",
            "group": "bfdo8xf7hqh8jiq0",
            "order": 4,
            "width": 0,
            "height": 0,
            "name": "",
            "label": "Screen Unten",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1920,
            "y": 3000,
            "wires": []
        },
        {
            "id": "fx20wedab9ut29ap",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set text",
            "func": "if (flow.get(\"LB_IMAGE\")) {\n    msg.payload = {\n        \"image\": flow.get(\"LB_IMAGE\"),\n        \"text\": msg.payload\n    }\n} else {\n    msg.payload = {\n        \"image\": \"data/lib/ui-media/lib/images/clear.png\",\n        \"text\": msg.payload\n    }\n}\n\nif(!flow.get(\"LB_ALIGN\")){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1040,
            "y": 3040,
            "wires": [
                [
                    "gu5j5v5kkq34vigm"
                ]
            ]
        },
        {
            "id": "pbdm0qd9745ui0gr",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set selected image",
            "func": "var image = msg.payload.icon.split(\"/\")[msg.payload.icon.split(\"/\").length -1]\nflow.set(\"LB_IMAGE\",  \"data/lib/ui-media/lib/images/\" + image);\n\nmsg.payload = flow.get(\"LB_IMAGE\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 690,
            "y": 2800,
            "wires": [
                [
                    "nftyab4bjcd9p6q6"
                ]
            ]
        },
        {
            "id": "nftyab4bjcd9p6q6",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "property": "LB_TEXT",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "null"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 3,
            "x": 850,
            "y": 2800,
            "wires": [
                [
                    "f2eimfcmvygg08mz"
                ],
                [
                    "f2eimfcmvygg08mz"
                ],
                [
                    "58y4apw6ofttegri"
                ]
            ]
        },
        {
            "id": "f2eimfcmvygg08mz",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1410,
            "y": 3040,
            "wires": [
                [
                    "54c31fe65817ac96"
                ]
            ]
        },
        {
            "id": "x74xa52hy0wh106z",
            "type": "ui_media",
            "z": "0d41bb9886a9ece2",
            "group": "bfdo8xf7hqh8jiq0",
            "name": "LB",
            "width": "2",
            "height": "2",
            "order": 5,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1890,
            "y": 3040,
            "wires": [
                []
            ]
        },
        {
            "id": "bz13i6smbb049hm7",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set preview image",
            "func": "msg.payload = 'screen/LB_PREVIEW.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1730,
            "y": 3040,
            "wires": [
                [
                    "x74xa52hy0wh106z"
                ]
            ]
        },
        {
            "id": "yox7psczw7iu1wfa",
            "type": "ui_text",
            "z": "0d41bb9886a9ece2",
            "group": "5eiuybosqqk5s26q",
            "order": 1,
            "width": 0,
            "height": 0,
            "name": "",
            "label": "Screen Oben",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1810,
            "y": 3740,
            "wires": []
        },
        {
            "id": "pfxv309azs17duoj",
            "type": "ui_media",
            "z": "0d41bb9886a9ece2",
            "group": "5eiuybosqqk5s26q",
            "name": "LT",
            "width": "2",
            "height": "2",
            "order": 2,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1790,
            "y": 3780,
            "wires": [
                []
            ]
        },
        {
            "id": "a4dehlopchzokg5l",
            "type": "ui_text",
            "z": "0d41bb9886a9ece2",
            "group": "5eiuybosqqk5s26q",
            "order": 4,
            "width": 0,
            "height": 0,
            "name": "",
            "label": "Screen Unten",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1800,
            "y": 3960,
            "wires": []
        },
        {
            "id": "375ndn506jkmkf49",
            "type": "ui_media",
            "z": "0d41bb9886a9ece2",
            "group": "5eiuybosqqk5s26q",
            "name": "LB",
            "width": "2",
            "height": "2",
            "order": 5,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1770,
            "y": 4000,
            "wires": [
                []
            ]
        },
        {
            "id": "y8z5r4mgdqjns1hj",
            "type": "ui_button",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "group": "bfdo8xf7hqh8jiq0",
            "order": 7,
            "width": "4",
            "height": "1",
            "passthru": false,
            "label": "Live setzen",
            "tooltip": "",
            "color": "",
            "bgcolor": "",
            "className": "",
            "icon": "",
            "payload": "",
            "payloadType": "str",
            "topic": "topic",
            "topicType": "msg",
            "x": 490,
            "y": 3580,
            "wires": [
                [
                    "uouvldfxq9gb7yxh",
                    "z6yzhihaxlacwfr3",
                    "7ifsceaoh36aqt76"
                ]
            ]
        },
        {
            "id": "8k3fx6k0yyjrvw4s",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set live image",
            "func": "msg.payload = 'screen/LT_LIVE.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1580,
            "y": 3780,
            "wires": [
                [
                    "pfxv309azs17duoj"
                ]
            ]
        },
        {
            "id": "l5hputsq5z0nqg94",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set live image",
            "func": "msg.payload = 'screen/LB_LIVE.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1580,
            "y": 4000,
            "wires": [
                [
                    "375ndn506jkmkf49"
                ]
            ]
        },
        {
            "id": "uouvldfxq9gb7yxh",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "data": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1430,
            "y": 4000,
            "wires": [
                [
                    "l5hputsq5z0nqg94"
                ]
            ]
        },
        {
            "id": "z6yzhihaxlacwfr3",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "data": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1430,
            "y": 3780,
            "wires": [
                [
                    "8k3fx6k0yyjrvw4s"
                ]
            ]
        },
        {
            "id": "derqfmiyw3c3odr0",
            "type": "ui_dropdown",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "label": "Text Position",
            "tooltip": "",
            "place": "Position wählen",
            "group": "0hsk0qox3qehdv59",
            "order": 6,
            "width": "6",
            "height": "1",
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Oben",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mitte",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Unten",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 2500,
            "wires": [
                [
                    "8ayx18730dzyauhz"
                ]
            ]
        },
        {
            "id": "8ayx18730dzyauhz",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set position",
            "func": "if(msg.payload === 0){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_TOP\");\n} else if(msg.payload === 1){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n} else if(msg.payload === 2){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_BOTTOM\");\n} else {\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 610,
            "y": 2500,
            "wires": [
                [
                    "gv0y2jvovbrj7q7f"
                ]
            ]
        },
        {
            "id": "szeolbaqcb063to9",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LB_TEXT",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 630,
            "y": 2900,
            "wires": [
                [
                    "58y4apw6ofttegri"
                ]
            ]
        },
        {
            "id": "y23hwvyronk8g5yb",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "Top",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_TOP",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1290,
            "y": 3040,
            "wires": [
                [
                    "f2eimfcmvygg08mz"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "de4z8665zu3907nm",
            "type": "ui_dropdown",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "label": "Text Position",
            "tooltip": "",
            "place": "Position wählen",
            "group": "r5hz8d3gk9ctrbxg",
            "order": 6,
            "width": "6",
            "height": "1",
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Oben",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mitte",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Unten",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 3000,
            "wires": [
                [
                    "nb8511ia8uufk07l"
                ]
            ]
        },
        {
            "id": "nb8511ia8uufk07l",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set position",
            "func": "if(msg.payload === 0){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_TOP\");\n} else if(msg.payload === 1){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n} else if(msg.payload === 2){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_BOTTOM\");\n} else {\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 610,
            "y": 3000,
            "wires": [
                [
                    "58y4apw6ofttegri"
                ]
            ]
        },
        {
            "id": "7ifsceaoh36aqt76",
            "type": "delay",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1440,
            "y": 3580,
            "wires": [
                [
                    "rb94lv68e4qmqdes",
                    "9376aa97c0fde3d3"
                ]
            ]
        },
        {
            "id": "emsw9u2zydsjr8sr",
            "type": "catch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1720,
            "wires": [
                [
                    "6o4ilujmcrs6rpfu"
                ]
            ]
        },
        {
            "id": "vspwc8u8natcuy68",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LB_ALIGN",
                    "pt": "flow",
                    "to": "VERTICAL_ALIGN_BOTTOM",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_BRIGHTNESS",
                    "pt": "flow",
                    "to": "1.0",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "LB_IMAGE",
                    "pt": "flow",
                    "to": "data/lib/ui-media/lib/images/clear.png",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_TEXT",
                    "pt": "flow",
                    "to": "",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_TEXT_SIZE",
                    "pt": "flow",
                    "to": "FONT_SANS_8_WHITE",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_ALIGN",
                    "pt": "flow",
                    "to": "VERTICAL_ALIGN_BOTTOM",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_BRIGHTNESS",
                    "pt": "flow",
                    "to": "1.0",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "LT_IMAGE",
                    "pt": "flow",
                    "to": "data/lib/ui-media/lib/images/clear.png",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_TEXT",
                    "pt": "flow",
                    "to": "",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_TEXT_SIZE",
                    "pt": "flow",
                    "to": "FONT_SANS_8_WHITE",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"image\":\"data/lib/ui-media/lib/images/clear.png\",\"text\":\"\"}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 240,
            "y": 1980,
            "wires": [
                [
                    "083c99b5f0373e9e",
                    "6152fa2f0c37e5a0"
                ]
            ]
        },
        {
            "id": "qswga47mkj5fradc",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "----- UI",
            "info": "",
            "x": 50,
            "y": 1820,
            "wires": []
        },
        {
            "id": "fxx1py1930l9jynq",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "----- Styles",
            "info": "",
            "x": 120,
            "y": 1860,
            "wires": []
        },
        {
            "id": "ckmocady5b4y9br5",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "----- Init",
            "info": "",
            "x": 110,
            "y": 1940,
            "wires": []
        },
        {
            "id": "t0b6kh338qkwt5qn",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "----- Preview",
            "info": "",
            "x": 130,
            "y": 2200,
            "wires": []
        },
        {
            "id": "0woj6px1f4z0fw3t",
            "type": "comment",
            "z": "0d41bb9886a9ece2",
            "name": "----- Live",
            "info": "",
            "x": 140,
            "y": 3480,
            "wires": []
        },
        {
            "id": "s8wzci0ilvbwe0fe",
            "type": "ui_dropdown",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "label": "Text Grösse",
            "tooltip": "",
            "place": "Grösse wählen",
            "group": "0hsk0qox3qehdv59",
            "order": 8,
            "width": "6",
            "height": "1",
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Gross",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mittel",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Klein",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 2600,
            "wires": [
                [
                    "bhfi2yefzy3mb35a"
                ]
            ]
        },
        {
            "id": "bhfi2yefzy3mb35a",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set size",
            "func": "if(msg.payload === 0){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_32_WHITE\");\n} else if(msg.payload === 1){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_16_WHITE\");\n} else if(msg.payload === 2){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n} else {\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 600,
            "y": 2600,
            "wires": [
                [
                    "gv0y2jvovbrj7q7f"
                ]
            ]
        },
        {
            "id": "f4n3emgzxnxv2qb3",
            "type": "ui_dropdown",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "label": "Text Grösse",
            "tooltip": "",
            "place": "Grösse wählen",
            "group": "r5hz8d3gk9ctrbxg",
            "order": 8,
            "width": "6",
            "height": "1",
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Gross",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mittel",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Klein",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 3100,
            "wires": [
                [
                    "23sf8i9ctj9gsaau"
                ]
            ]
        },
        {
            "id": "23sf8i9ctj9gsaau",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set size",
            "func": "if(msg.payload === 0){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_32_WHITE\");\n} else if(msg.payload === 1){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_16_WHITE\");\n} else if(msg.payload === 2){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n} else {\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n}\n\nreturn msg",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 600,
            "y": 3100,
            "wires": [
                [
                    "58y4apw6ofttegri"
                ]
            ]
        },
        {
            "id": "58y4apw6ofttegri",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "LB_TEXT",
                    "tot": "flow"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 850,
            "y": 3040,
            "wires": [
                [
                    "fx20wedab9ut29ap"
                ]
            ]
        },
        {
            "id": "w4xj5p405j2l5tli",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "property": "LT_ALIGN",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_TOP",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_MIDDLE",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_BOTTOM",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 4,
            "x": 1050,
            "y": 2600,
            "wires": [
                [
                    "76n4wdf9htfde4aa"
                ],
                [
                    "wlvh0z417ihhqkjq"
                ],
                [
                    "76tz4gc51yv86sf5"
                ],
                [
                    "76n4wdf9htfde4aa"
                ]
            ]
        },
        {
            "id": "76tz4gc51yv86sf5",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "Middle",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_MIDDLE",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1290,
            "y": 2580,
            "wires": [
                [
                    "tnu8qn422bh3b9w0"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "76n4wdf9htfde4aa",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "Bottom",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1300,
            "y": 2620,
            "wires": [
                [
                    "tnu8qn422bh3b9w0"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "gu5j5v5kkq34vigm",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "property": "LB_ALIGN",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_TOP",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_MIDDLE",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_BOTTOM",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 4,
            "x": 1030,
            "y": 3100,
            "wires": [
                [
                    "sknzdk54cmpqegp4"
                ],
                [
                    "y23hwvyronk8g5yb"
                ],
                [
                    "jidtx80rt2iku542"
                ],
                [
                    "sknzdk54cmpqegp4"
                ]
            ]
        },
        {
            "id": "jidtx80rt2iku542",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "Middle",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_MIDDLE",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1290,
            "y": 3080,
            "wires": [
                [
                    "f2eimfcmvygg08mz"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "sknzdk54cmpqegp4",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "Bottom",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1300,
            "y": 3120,
            "wires": [
                [
                    "f2eimfcmvygg08mz"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "rb94lv68e4qmqdes",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set Image",
            "func": "return { \"payload\": \"data/lib/ui-media/lib/screen/LT_LIVE.png\" };",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1650,
            "y": 3580,
            "wires": [
                [
                    "5b039hssl0xff9m8"
                ]
            ]
        },
        {
            "id": "5b039hssl0xff9m8",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 23",
            "mode": "link",
            "links": [
                "3wq2gsosigq176os"
            ],
            "x": 1595,
            "y": 3620
        },
        {
            "id": "083c99b5f0373e9e",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "Bottom",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 420,
            "y": 1960,
            "wires": [
                [
                    "7626c0266ec17a96"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "7626c0266ec17a96",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 550,
            "y": 1960,
            "wires": [
                []
            ]
        },
        {
            "id": "6152fa2f0c37e5a0",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "Bottom",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 420,
            "y": 2000,
            "wires": [
                [
                    "952c91d7d343483e"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "952c91d7d343483e",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 550,
            "y": 2000,
            "wires": [
                [
                    "fze5pr6sg9dc5yqc"
                ]
            ]
        },
        {
            "id": "50036d4b4af9a114",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "brightness",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_BRIGHTNESS",
            "parameter1Type": "flow",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "brightness",
            "selectedJimpFunction": {
                "name": "brightness",
                "fn": "brightness",
                "description": "adjust the brightness",
                "parameters": [
                    {
                        "name": "val",
                        "type": "num",
                        "required": true,
                        "hint": "adjust the brightness by a value -1.0 to 1.0"
                    }
                ]
            },
            "x": 1550,
            "y": 2540,
            "wires": [
                [
                    "y2ygc6jpa817noac"
                ]
            ]
        },
        {
            "id": "54c31fe65817ac96",
            "type": "jimp-image",
            "z": "0d41bb9886a9ece2",
            "name": "brightness",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_BRIGHTNESS",
            "parameter1Type": "flow",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "brightness",
            "selectedJimpFunction": {
                "name": "brightness",
                "fn": "brightness",
                "description": "adjust the brightness",
                "parameters": [
                    {
                        "name": "val",
                        "type": "num",
                        "required": true,
                        "hint": "adjust the brightness by a value -1.0 to 1.0"
                    }
                ]
            },
            "x": 1550,
            "y": 3040,
            "wires": [
                [
                    "bz13i6smbb049hm7"
                ]
            ]
        },
        {
            "id": "9376aa97c0fde3d3",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Update Metric",
            "func": "const LT_IMAGE = flow.get(\"LT_IMAGE\").split(\"/\")[flow.get(\"LT_IMAGE\").split(\"/\").length -1];\n\nconst message ={ \"payload\": {} };\nif(LT_IMAGE.includes(\"clear\")){\n    message.payload[\"IMAGE-0\"] = \"\";\n} else {\n    message.payload[\"IMAGE-0\"] = LT_IMAGE;\n}\n\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1660,
            "y": 3660,
            "wires": [
                [
                    "a6171a9eb480a006"
                ]
            ]
        },
        {
            "id": "a6171a9eb480a006",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 24",
            "mode": "link",
            "links": [
                "4bk4jzh6bc415fdn"
            ],
            "x": 1595,
            "y": 3700
        },
        {
            "id": "38dcbrngw1l2kcic",
            "type": "mqtt out",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1060,
            "y": 840,
            "wires": []
        },
        {
            "id": "1e859df495c04e10",
            "type": "link in",
            "z": "0d41bb9886a9ece2",
            "name": "Reset dashboard",
            "links": [
                "78f83247d8d74f28"
            ],
            "x": 535,
            "y": 3780,
            "wires": [
                [
                    "z6yzhihaxlacwfr3",
                    "uouvldfxq9gb7yxh"
                ]
            ]
        },
        {
            "id": "2a4b050aa67fb254",
            "type": "link in",
            "z": "0d41bb9886a9ece2",
            "name": "Reset LT",
            "links": [
                "c96fa53c9bbbbe5c",
                "d19eaf2cf33d2dfc"
            ],
            "x": 645,
            "y": 2640,
            "wires": [
                [
                    "gv0y2jvovbrj7q7f"
                ]
            ]
        },
        {
            "id": "68df704a45e2d7f3",
            "type": "link in",
            "z": "0d41bb9886a9ece2",
            "name": "Reset LB",
            "links": [
                "c96fa53c9bbbbe5c",
                "d19eaf2cf33d2dfc"
            ],
            "x": 645,
            "y": 3140,
            "wires": [
                [
                    "58y4apw6ofttegri"
                ]
            ]
        },
        {
            "id": "c96fa53c9bbbbe5c",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 25",
            "mode": "link",
            "links": [
                "2a4b050aa67fb254",
                "68df704a45e2d7f3"
            ],
            "x": 1485,
            "y": 1460
        },
        {
            "id": "78f83247d8d74f28",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 26",
            "mode": "link",
            "links": [
                "1e859df495c04e10"
            ],
            "x": 1485,
            "y": 1500
        },
        {
            "id": "286016b07446186d",
            "type": "delay",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1380,
            "y": 1500,
            "wires": [
                [
                    "78f83247d8d74f28"
                ]
            ]
        },
        {
            "id": "9kvuo6jdslcugxsf",
            "type": "ui_slider",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "label": "",
            "tooltip": "",
            "group": "e2bd4249b8d43ea4",
            "order": 4,
            "width": "12",
            "height": "1",
            "passthru": true,
            "outs": "end",
            "topic": "topic",
            "topicType": "msg",
            "min": 0,
            "max": "100",
            "step": 1,
            "className": "brightness-slider",
            "x": 450,
            "y": 3380,
            "wires": [
                [
                    "288jfd7zc55n2y8f"
                ]
            ]
        },
        {
            "id": "k3ll3oy617bfvjnx",
            "type": "ui_text",
            "z": "0d41bb9886a9ece2",
            "group": "e2bd4249b8d43ea4",
            "order": 1,
            "width": "12",
            "height": "1",
            "name": "",
            "label": "Automatik wählen..",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 490,
            "y": 3260,
            "wires": []
        },
        {
            "id": "288jfd7zc55n2y8f",
            "type": "function",
            "z": "0d41bb9886a9ece2",
            "name": "Set brightness",
            "func": "function factor(percentage) {\n  // Convert percentage value to decimal\n  const decimalPercentage = percentage / 100;\n\n  // Calculate range between numbers\n  const range = 2;\n\n  // Calculate result by adding first number in array to the product of the percentage value and the range\n  const result = -1 + (decimalPercentage * range);\n\n  // Return result rounded to the nearest hundredth\n  return Math.round(result * 100) / 100;\n}\n\nflow.set(\"LT_BRIGHTNESS\", factor(msg.payload));\nflow.set(\"LB_BRIGHTNESS\", factor(msg.payload));\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 600,
            "y": 3380,
            "wires": [
                [
                    "d19eaf2cf33d2dfc"
                ]
            ]
        },
        {
            "id": "d19eaf2cf33d2dfc",
            "type": "link out",
            "z": "0d41bb9886a9ece2",
            "name": "link out 27",
            "mode": "link",
            "links": [
                "2a4b050aa67fb254",
                "68df704a45e2d7f3"
            ],
            "x": 735,
            "y": 3380
        },
        {
            "id": "7eaca8cdecc0579e",
            "type": "ui_switch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "label": "Automatisch",
            "tooltip": "",
            "group": "e2bd4249b8d43ea4",
            "order": 2,
            "width": "4",
            "height": "1",
            "passthru": true,
            "decouple": "false",
            "topic": "topic",
            "topicType": "msg",
            "style": "",
            "onvalue": "true",
            "onvalueType": "bool",
            "onicon": "",
            "oncolor": "",
            "offvalue": "false",
            "offvalueType": "bool",
            "officon": "",
            "offcolor": "",
            "animate": false,
            "className": "",
            "x": 470,
            "y": 3300,
            "wires": [
                [
                    "1aa3b9fdb4b00ead"
                ]
            ]
        },
        {
            "id": "1aa3b9fdb4b00ead",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LT_BRIGHTNESS_AUTO",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "LB_BRIGHTNESS_AUTO",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 640,
            "y": 3300,
            "wires": [
                [
                    "584799ae1380fb16"
                ]
            ]
        },
        {
            "id": "75b10471210ea476",
            "type": "ui_text",
            "z": "0d41bb9886a9ece2",
            "group": "e2bd4249b8d43ea4",
            "order": 3,
            "width": "12",
            "height": "1",
            "name": "",
            "label": "Helligkeit wählen..",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "brightness-slider",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 490,
            "y": 3340,
            "wires": []
        },
        {
            "id": "584799ae1380fb16",
            "type": "switch",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                },
                {
                    "t": "false"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 790,
            "y": 3300,
            "wires": [
                [
                    "5104cdae1217e2d2"
                ],
                [
                    "13625e725f8f5b0c"
                ]
            ]
        },
        {
            "id": "5104cdae1217e2d2",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "hidden",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 940,
            "y": 3280,
            "wires": [
                [
                    "ae0468bbce141deb"
                ]
            ]
        },
        {
            "id": "13625e725f8f5b0c",
            "type": "change",
            "z": "0d41bb9886a9ece2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "visible",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 940,
            "y": 3320,
            "wires": [
                [
                    "ae0468bbce141deb"
                ]
            ]
        },
        {
            "id": "ae0468bbce141deb",
            "type": "ui_template",
            "z": "0d41bb9886a9ece2",
            "group": "e2bd4249b8d43ea4",
            "name": "",
            "order": 4,
            "width": 0,
            "height": 0,
            "format": "<style>\n    .brightness-slider {\n        visibility: {{msg.payload}};\n    }\n</style>",
            "storeOutMessages": true,
            "fwdInMessages": true,
            "resendOnRefresh": true,
            "templateScope": "local",
            "className": "",
            "x": 1120,
            "y": 3300,
            "wires": [
                []
            ]
        }
    ],
    "configs": [
        {
            "id": "0hsk0qox3qehdv59",
            "type": "ui_group",
            "z": "0d41bb9886a9ece2",
            "name": "Screen Oben",
            "tab": "za916y776lt9scse",
            "order": 1,
            "disp": true,
            "width": "10",
            "collapse": false,
            "className": ""
        },
        {
            "id": "bfdo8xf7hqh8jiq0",
            "type": "ui_group",
            "z": "0d41bb9886a9ece2",
            "name": "Vorschau",
            "tab": "za916y776lt9scse",
            "order": 3,
            "disp": true,
            "width": "5",
            "collapse": false,
            "className": ""
        },
        {
            "id": "r5hz8d3gk9ctrbxg",
            "type": "ui_group",
            "z": "0d41bb9886a9ece2",
            "name": "Screen Unten",
            "tab": "za916y776lt9scse",
            "order": 2,
            "disp": true,
            "width": "10",
            "collapse": false,
            "className": ""
        },
        {
            "id": "5eiuybosqqk5s26q",
            "type": "ui_group",
            "z": "0d41bb9886a9ece2",
            "name": "Live",
            "tab": "za916y776lt9scse",
            "order": 4,
            "disp": true,
            "width": "5",
            "collapse": false,
            "className": ""
        },
        {
            "id": "za916y776lt9scse",
            "type": "ui_tab",
            "z": "0d41bb9886a9ece2",
            "name": "Anzeige",
            "icon": "dashboard",
            "order": 1,
            "disabled": false,
            "hidden": false
        },
        {
            "id": "b895q9bdz2fcz4v7",
            "type": "ui_base",
            "z": "0d41bb9886a9ece2",
            "theme": {
                "name": "theme-light",
                "lightTheme": {
                    "default": "#0094CE",
                    "baseColor": "#f70000",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                    "edited": true,
                    "reset": false
                },
                "darkTheme": {
                    "default": "#097479",
                    "baseColor": "#097479",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                    "edited": false
                },
                "customTheme": {
                    "name": "Untitled Theme 1",
                    "default": "#4B7930",
                    "baseColor": "#4B7930",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                },
                "themeState": {
                    "base-color": {
                        "default": "#0094CE",
                        "value": "#f70000",
                        "edited": true
                    },
                    "page-titlebar-backgroundColor": {
                        "value": "#f70000",
                        "edited": false
                    },
                    "page-backgroundColor": {
                        "value": "#fafafa",
                        "edited": false
                    },
                    "page-sidebar-backgroundColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "group-textColor": {
                        "value": "#ff4444",
                        "edited": false
                    },
                    "group-borderColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "group-backgroundColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "widget-textColor": {
                        "value": "#111111",
                        "edited": false
                    },
                    "widget-backgroundColor": {
                        "value": "#f70000",
                        "edited": false
                    },
                    "widget-borderColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "base-font": {
                        "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                    }
                },
                "angularTheme": {
                    "primary": "indigo",
                    "accents": "blue",
                    "warn": "red",
                    "background": "grey",
                    "palette": "light"
                }
            },
            "site": {
                "name": "Triopan AG",
                "hideToolbar": "false",
                "allowSwipe": "false",
                "lockMenu": "icon",
                "allowTempTheme": "true",
                "dateFormat": "DD/MM/YYYY",
                "sizes": {
                    "sx": 48,
                    "sy": 48,
                    "gx": 12,
                    "gy": 12,
                    "cx": 8,
                    "cy": 8,
                    "px": 12,
                    "py": 12
                }
            }
        },
        {
            "id": "7cd1bf74f5f9232a",
            "type": "ui_tab",
            "z": "0d41bb9886a9ece2",
            "name": "Steuerung",
            "icon": "fa-cogs",
            "order": 2,
            "disabled": false,
            "hidden": false
        },
        {
            "id": "e2bd4249b8d43ea4",
            "type": "ui_group",
            "z": "0d41bb9886a9ece2",
            "name": "Bildschirm Konfiguration",
            "tab": "7cd1bf74f5f9232a",
            "order": 5,
            "disp": true,
            "width": "12",
            "collapse": false,
            "className": ""
        },
        {
            "id": "def749cfcc38736e",
            "type": "ui_spacer",
            "z": "0d41bb9886a9ece2",
            "name": "spacer",
            "group": "bfdo8xf7hqh8jiq0",
            "order": 3,
            "width": "2",
            "height": "2"
        },
        {
            "id": "06bc090469f30fee",
            "type": "ui_spacer",
            "z": "0d41bb9886a9ece2",
            "name": "spacer",
            "group": "5eiuybosqqk5s26q",
            "order": 3,
            "width": "2",
            "height": "2"
        },
        {
            "id": "2e624f6eba3423b7",
            "type": "ui_spacer",
            "z": "0d41bb9886a9ece2",
            "name": "spacer",
            "group": "bfdo8xf7hqh8jiq0",
            "order": 6,
            "width": "5",
            "height": "1"
        }
    ]
}