{
    "id": "3c404a3b2b9070cb",
    "label": "65e822d9bbf65abc8cdf4438",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "zhlj92vzblgeqfmk",
            "type": "mqtt out",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1080,
            "y": 1180,
            "wires": []
        },
        {
            "id": "ciflfprv8ejcp3hq",
            "type": "inject",
            "z": "3c404a3b2b9070cb",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "hrq865om00i39ddm"
                ]
            ]
        },
        {
            "id": "hrq865om00i39ddm",
            "type": "getflows",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "ckbisiaidhvd7wsl"
                ]
            ]
        },
        {
            "id": "ckbisiaidhvd7wsl",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "sds7t62ydmo7vgkc"
                ]
            ]
        },
        {
            "id": "bzph3lahesw3kyw2",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1260,
            "wires": []
        },
        {
            "id": "90cxj9vtnu16y9zv",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "sds7t62ydmo7vgkc",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "7t4zlhxad6iheo0e"
                ]
            ]
        },
        {
            "id": "ve4ydgcovk65qrw3",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "---- Set Screen Image",
            "info": "",
            "x": 100,
            "y": 660,
            "wires": []
        },
        {
            "id": "qq8sprownn16snrn",
            "type": "inject",
            "z": "3c404a3b2b9070cb",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "wlrdawwsp9tjc48w"
                ]
            ]
        },
        {
            "id": "7t4zlhxad6iheo0e",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "f9wd8m4e7rhf1afj",
                    "11tumbcazizeoykz"
                ]
            ]
        },
        {
            "id": "7ezpnrsksl75t9n2",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "wlrdawwsp9tjc48w",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 14",
            "mode": "link",
            "links": [
                "8432wmlkzzt9soau",
                "iitcnt3po11fmx9n"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "iitcnt3po11fmx9n",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Virtual Read",
            "links": [
                "jak7xse55acrj144",
                "wlrdawwsp9tjc48w"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "6vpu29m83eka6pjm"
                ]
            ]
        },
        {
            "id": "6vpu29m83eka6pjm",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "w377d69f1vqli0sy"
                ]
            ]
        },
        {
            "id": "b4y9xxq052437gzk",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"kwh\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = flow.get(\"bridge.image.metrics\")[metricId];\n        }\n        msg.payload[metricId] = msg.payload[metricId] + (flow.get(\"bridge.image.metrics\")[parameterIds[0]] / 3600);\n    },\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        functions[calc.func](sequence.dataPoint.id, calc.ids)\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "y8b8kh6eqi4j76z3"
                ]
            ]
        },
        {
            "id": "css0o32gl9ljzo5a",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "---- Update Image Metrics",
            "info": "",
            "x": 110,
            "y": 1120,
            "wires": []
        },
        {
            "id": "oe7lm0vkt1sxcjle",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Update LED Metrics",
            "links": [
                "mqkqox1y8sxhrlto",
                "tmg4ru4rbhlc2cam",
                "wzseja9op8h1di5u",
                "y8b8kh6eqi4j76z3"
            ],
            "x": 115,
            "y": 1180,
            "wires": [
                [
                    "1a4ntn3gc30wwx8u"
                ]
            ]
        },
        {
            "id": "1a4ntn3gc30wwx8u",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set LED value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1180,
            "wires": [
                [
                    "zhlj92vzblgeqfmk"
                ]
            ]
        },
        {
            "id": "aa6euj9tpcgp8zwj",
            "type": "flogger",
            "z": "3c404a3b2b9070cb",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 670,
            "y": 2300,
            "wires": [
                []
            ]
        },
        {
            "id": "8wze5rkucs881wbg",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 340,
            "y": 2300,
            "wires": [
                [
                    "vgsj7qac0wwiebc9"
                ]
            ]
        },
        {
            "id": "vgsj7qac0wwiebc9",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 510,
            "y": 2300,
            "wires": [
                [
                    "aa6euj9tpcgp8zwj"
                ]
            ]
        },
        {
            "id": "y8b8kh6eqi4j76z3",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 16",
            "mode": "link",
            "links": [
                "oe7lm0vkt1sxcjle"
            ],
            "x": 1285,
            "y": 260
        },
        {
            "id": "bpxlefqhi2wi2t1b",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "b4y9xxq052437gzk"
                ]
            ]
        },
        {
            "id": "w377d69f1vqli0sy",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "bpxlefqhi2wi2t1b"
                ]
            ]
        },
        {
            "id": "kb34b803111c03lp",
            "type": "exec",
            "z": "3c404a3b2b9070cb",
            "command": "fbset -g 1280 720 1280 720 4",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Fullscreen",
            "x": 580,
            "y": 720,
            "wires": [
                [],
                [
                    "w6zzy1ze8pvocoyi"
                ],
                [
                    "r3825ty1fmuneynf"
                ]
            ]
        },
        {
            "id": "r3825ty1fmuneynf",
            "type": "exec",
            "z": "3c404a3b2b9070cb",
            "command": "fbi -a -d /dev/fb0 --noverbose -T 1 -1 data/lib/ui-media/lib/images/clear.png",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Clear Screen",
            "x": 770,
            "y": 800,
            "wires": [
                [],
                [
                    "w6zzy1ze8pvocoyi"
                ],
                [
                    "jzogkc9rnqgnl00w"
                ]
            ]
        },
        {
            "id": "jzogkc9rnqgnl00w",
            "type": "exec",
            "z": "3c404a3b2b9070cb",
            "command": "pgrep fbi | xargs kill",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Kill FBI",
            "x": 1020,
            "y": 820,
            "wires": [
                [],
                [
                    "w6zzy1ze8pvocoyi"
                ],
                []
            ]
        },
        {
            "id": "hgnj33saw9v7anx6",
            "type": "exec",
            "z": "3c404a3b2b9070cb",
            "command": "fbi -a -d /dev/fb0 --noverbose -T 1 -1",
            "addpay": "payload",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Image",
            "x": 1030,
            "y": 940,
            "wires": [
                [],
                [
                    "w6zzy1ze8pvocoyi"
                ],
                []
            ]
        },
        {
            "id": "z18gw61mvdp0leeg",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "500",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 570,
            "y": 900,
            "wires": [
                [
                    "tmb24zlvlpqmssrh",
                    "1rldknl63zocdgyk"
                ]
            ]
        },
        {
            "id": "tmb24zlvlpqmssrh",
            "type": "exec",
            "z": "3c404a3b2b9070cb",
            "command": "fbset -g 96 224 96 224 4",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Image Screen",
            "x": 790,
            "y": 860,
            "wires": [
                [],
                [
                    "w6zzy1ze8pvocoyi"
                ],
                []
            ]
        },
        {
            "id": "1rldknl63zocdgyk",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "500",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 770,
            "y": 920,
            "wires": [
                [
                    "hgnj33saw9v7anx6"
                ]
            ]
        },
        {
            "id": "f9wd8m4e7rhf1afj",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set init image",
            "func": "msg.payload = {};\nmsg.payload[\"IMAGE-0\"] = \"\";\nmsg.payload[\"TEXT-0\"] = \"\";\nmsg.payload[\"SIZE-0\"] = \"FONT_SANS_8_WHITE\";\nmsg.payload[\"ALIGN-0\"] = \"VERTICAL_ALIGN_BOTTOM\";\nmsg.payload[\"BRIGHTNESS-0\"] = 0;\nmsg.payload[\"IMAGE-1\"] = \"\";\nmsg.payload[\"TEXT-1\"] = \"\";\nmsg.payload[\"SIZE-1\"] = \"FONT_SANS_8_WHITE\";\nmsg.payload[\"ALIGN-1\"] = \"VERTICAL_ALIGN_BOTTOM\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 80,
            "wires": [
                [
                    "tmg4ru4rbhlc2cam"
                ]
            ]
        },
        {
            "id": "tmg4ru4rbhlc2cam",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 20",
            "mode": "link",
            "links": [
                "oe7lm0vkt1sxcjle",
                "e30xxhjogd775bb0",
                "8rh1bo5slgjzy9u9"
            ],
            "x": 1285,
            "y": 80
        },
        {
            "id": "e30xxhjogd775bb0",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Clear Screen",
            "links": [
                "tmg4ru4rbhlc2cam"
            ],
            "x": 95,
            "y": 720,
            "wires": [
                [
                    "kb34b803111c03lp"
                ]
            ]
        },
        {
            "id": "pwz2ora27m8lwco9",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Set Screen",
            "links": [
                "xuvhkv875zcb1vfh"
            ],
            "x": 95,
            "y": 900,
            "wires": [
                [
                    "gbtc5grt11d982id"
                ]
            ]
        },
        {
            "id": "gbtc5grt11d982id",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 390,
            "y": 900,
            "wires": [
                [
                    "kb34b803111c03lp"
                ],
                [
                    "kb34b803111c03lp",
                    "z18gw61mvdp0leeg"
                ]
            ]
        },
        {
            "id": "jbuewvswxeaf2e07",
            "type": "mqtt in",
            "z": "3c404a3b2b9070cb",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 120,
            "y": 1540,
            "wires": [
                [
                    "whud59s7x7dbxhlg"
                ]
            ]
        },
        {
            "id": "ejxdekjpleh7h3sm",
            "type": "inject",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 1360,
            "wires": [
                [
                    "l8a5pyq6xq0uavu5"
                ]
            ]
        },
        {
            "id": "01f8nseng2u8ize7",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 310,
            "y": 1480,
            "wires": [
                [
                    "jbuewvswxeaf2e07"
                ]
            ]
        },
        {
            "id": "l8a5pyq6xq0uavu5",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 160,
            "y": 1420,
            "wires": [
                [
                    "6w6c1eib4j4lvikv"
                ],
                [
                    "01f8nseng2u8ize7"
                ]
            ]
        },
        {
            "id": "6w6c1eib4j4lvikv",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 1420,
            "wires": []
        },
        {
            "id": "fuqfmxhrbepm6lz2",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1540,
            "wires": [
                [
                    "2ieexdbap52j4cbt"
                ],
                [
                    "vwyi86fpyyf6fqck"
                ]
            ]
        },
        {
            "id": "pm089v4a8zzjtgf4",
            "type": "mqtt out",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1390,
            "y": 1600,
            "wires": []
        },
        {
            "id": "2ieexdbap52j4cbt",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 610,
            "y": 1520,
            "wires": [
                [
                    "9n4a1058lnswk0qj"
                ],
                [
                    "aukt6hh1ubcn6omq"
                ]
            ]
        },
        {
            "id": "6t8xksh0qmobjpj5",
            "type": "debug",
            "z": "3c404a3b2b9070cb",
            "name": "Execute LED Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1060,
            "y": 1400,
            "wires": []
        },
        {
            "id": "9n4a1058lnswk0qj",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1440,
            "wires": [
                [
                    "5ujm17nbjc5s132q"
                ],
                [
                    "6t8xksh0qmobjpj5",
                    "lygfitco88nw9lw4",
                    "qs5y7galnzlq9coo"
                ]
            ]
        },
        {
            "id": "5ujm17nbjc5s132q",
            "type": "debug",
            "z": "3c404a3b2b9070cb",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1090,
            "y": 1360,
            "wires": []
        },
        {
            "id": "i2ziu26004cenw83",
            "type": "catch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "scope": [
                "v0ybzti4w6s318gl"
            ],
            "uncaught": false,
            "x": 610,
            "y": 1640,
            "wires": [
                [
                    "hc6l4v6c6mtc21bv"
                ]
            ]
        },
        {
            "id": "vwyi86fpyyf6fqck",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1000,
            "y": 1600,
            "wires": [
                [
                    "pm089v4a8zzjtgf4"
                ]
            ]
        },
        {
            "id": "htq11gmu8m8ep7ts",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1020,
            "y": 1560,
            "wires": [
                [
                    "vwyi86fpyyf6fqck"
                ]
            ]
        },
        {
            "id": "aukt6hh1ubcn6omq",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1000,
            "y": 1680,
            "wires": [
                [
                    "pm089v4a8zzjtgf4"
                ]
            ]
        },
        {
            "id": "hc6l4v6c6mtc21bv",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1020,
            "y": 1640,
            "wires": [
                [
                    "aukt6hh1ubcn6omq"
                ]
            ]
        },
        {
            "id": "lygfitco88nw9lw4",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Update LED Image",
            "func": "const message = { \"payload\": \"data/lib/ui-media/lib/images/\" + msg.payload.value }\n\nif(msg.protocolCommand.protocolId === \"IMAGE-0\"){\n    flow.set(\"LT_IMAGE\", message.payload);\n} else if(msg.protocolCommand.protocolId === \"IMAGE-1\"){\n    flow.set(\"LB_IMAGE\", message.payload);\n}\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1030,
            "y": 1480,
            "wires": [
                [
                    "htq11gmu8m8ep7ts",
                    "kpteiydqfsdqspxm",
                    "m92dbuwyhjdbr9vn"
                ]
            ]
        },
        {
            "id": "qs5y7galnzlq9coo",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Update LED Metric",
            "func": "const message ={ \"payload\": {} };\nif(msg.payload.value.includes(\"clear\")){\n    message.payload[msg.protocolCommand.protocolId] = \"\";\n} else {\n    message.payload[msg.protocolCommand.protocolId] = msg.payload.value;\n}\n\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1030,
            "y": 1440,
            "wires": [
                [
                    "wzseja9op8h1di5u"
                ]
            ]
        },
        {
            "id": "wzseja9op8h1di5u",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 22",
            "mode": "link",
            "links": [
                "oe7lm0vkt1sxcjle"
            ],
            "x": 1485,
            "y": 1440
        },
        {
            "id": "w6zzy1ze8pvocoyi",
            "type": "debug",
            "z": "3c404a3b2b9070cb",
            "name": "Error",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1270,
            "y": 720,
            "wires": []
        },
        {
            "id": "omf80hdsk685664v",
            "type": "ui_text_input",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "label": "Text",
            "tooltip": "",
            "group": "vs34rxsj9l0ejrrw",
            "order": 4,
            "width": 6,
            "height": 1,
            "passthru": true,
            "mode": "text",
            "delay": "0",
            "topic": "topic",
            "sendOnBlur": true,
            "className": "textInput",
            "topicType": "msg",
            "x": 450,
            "y": 2760,
            "wires": [
                [
                    "7edzyrthedzaboe3"
                ]
            ]
        },
        {
            "id": "vxleafzotfl5f6dm",
            "type": "ui_template",
            "z": "3c404a3b2b9070cb",
            "group": "",
            "name": "Styles",
            "order": 1,
            "width": 0,
            "height": 0,
            "format": "<script id=\"logo-script\" type=\"text/javascript\">\n    $(function () {\n        const logoId = 'logo-div';\n        var toolbar = $('.md-toolbar-tools');\n        if(!toolbar.length) return;\n        if($(\"#\" + logoId).length > 0) return;\n\n        var div = $('<div/>');\n        div[0].style.margin = '10px 0px 10px auto';\n        div.attr('id', logoId);\n\n        var logo = new Image();\n        logo.src = 'https://github.com/MUV-Digital/resources/blob/main/img/TRIOPAN_LOGO.jpg?raw=true'\n        logo.height = 36;\n        \n        div.append(logo);\n        toolbar.append(div);\n    });\n    $('link[rel=\"shortcut icon\"]').attr('href', 'https://github.com/MUV-Digital/resources/blob/main/img/TRIOPAN_LOGO.jpg?raw=true');\n    $('link[rel=\"icon\"]').attr('href', 'https://github.com/MUV-Digital/resources/blob/main/img/TRIOPAN_LOGO.jpg?raw=true');\n</script>\n<style>\n    md-list-item .md-avatar {\n        border-radius: 0% !important;\n    }\n<\\style>",
            "storeOutMessages": true,
            "fwdInMessages": true,
            "resendOnRefresh": true,
            "templateScope": "global",
            "className": "",
            "x": 150,
            "y": 2400,
            "wires": [
                []
            ]
        },
        {
            "id": "qbixqwpoeqzyvdtu",
            "type": "ui_list",
            "z": "3c404a3b2b9070cb",
            "group": "vs34rxsj9l0ejrrw",
            "name": "Image list",
            "order": 1,
            "width": 4,
            "height": 3,
            "lineType": "three",
            "actionType": "click",
            "allowHTML": false,
            "outputs": 1,
            "topic": "",
            "x": 460,
            "y": 2720,
            "wires": [
                [
                    "drhlb9w8b9ouzztk"
                ]
            ]
        },
        {
            "id": "yrfflvqufx6szyql",
            "type": "exec",
            "z": "3c404a3b2b9070cb",
            "command": "ls data/lib/ui-media/lib/images",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "",
            "winHide": false,
            "oldrc": false,
            "name": "",
            "x": 290,
            "y": 2560,
            "wires": [
                [
                    "tnqi7k27qllpj0ix"
                ],
                [],
                []
            ]
        },
        {
            "id": "8rh1bo5slgjzy9u9",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Scan for images",
            "links": [
                "tmg4ru4rbhlc2cam"
            ],
            "x": 95,
            "y": 2480,
            "wires": [
                [
                    "zr4io6bu13jxvfvh"
                ]
            ]
        },
        {
            "id": "tnqi7k27qllpj0ix",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Get available images",
            "func": "var message = {\"payload\":[]};\n\nmsg.payload.split(\"\\n\").forEach(element => {\n    if(element.includes(\".png\")){\n        message.payload.push({\"title\": element.split(\".\")[0],\"icon\":\"/uimedia/images/\" + element})\n    }\n});\n\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 2620,
            "wires": [
                [
                    "qbixqwpoeqzyvdtu",
                    "rlq0ucp2ndv0ocaz",
                    "plfqag43dh63thod"
                ]
            ]
        },
        {
            "id": "nq4qzm94x2ay3jtd",
            "type": "ui_text",
            "z": "3c404a3b2b9070cb",
            "group": "jfzzmbmr22xgviv0",
            "order": 2,
            "width": "4",
            "height": "1",
            "name": "",
            "label": "Screen Oben",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1990,
            "y": 2780,
            "wires": []
        },
        {
            "id": "1igj12273v7k4dad",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "Top",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "8",
            "parameter3Type": "num",
            "parameter4": "LT_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_TOP",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1530,
            "y": 2760,
            "wires": [
                [
                    "xukz4vy9hv9gr9hr"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "s9jckq4slreii91d",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "LT_TEXT",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "null"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 3,
            "x": 930,
            "y": 2720,
            "wires": [
                [
                    "2ndnvr4aqbfsvsgc"
                ],
                [
                    "2ndnvr4aqbfsvsgc"
                ],
                [
                    "8p4imqgzav6z2ejw"
                ]
            ]
        },
        {
            "id": "o2g672jlx2ngufz7",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1770,
            "y": 2780,
            "wires": [
                [
                    "1evtcukq6fcmmdfm"
                ]
            ]
        },
        {
            "id": "7edzyrthedzaboe3",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LT_TEXT",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 710,
            "y": 2760,
            "wires": [
                [
                    "s9jckq4slreii91d"
                ]
            ]
        },
        {
            "id": "078hwpyymuexfa1r",
            "type": "ui_media",
            "z": "3c404a3b2b9070cb",
            "group": "jfzzmbmr22xgviv0",
            "name": "LT",
            "width": 2,
            "height": 2,
            "order": 4,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1970,
            "y": 2820,
            "wires": [
                []
            ]
        },
        {
            "id": "1evtcukq6fcmmdfm",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set preview image",
            "func": "msg.payload = 'screen/LT_PREVIEW.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1810,
            "y": 2820,
            "wires": [
                [
                    "078hwpyymuexfa1r"
                ]
            ]
        },
        {
            "id": "rlq0ucp2ndv0ocaz",
            "type": "ui_list",
            "z": "3c404a3b2b9070cb",
            "group": "eisshy5qcvzgpc5a",
            "name": "Image list",
            "order": 1,
            "width": 4,
            "height": 3,
            "lineType": "three",
            "actionType": "click",
            "allowHTML": false,
            "outputs": 1,
            "topic": "",
            "x": 460,
            "y": 2980,
            "wires": [
                [
                    "sh7sirkouqxsymc8"
                ]
            ]
        },
        {
            "id": "0lh1496xzyopcpla",
            "type": "ui_text_input",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "label": "Text",
            "tooltip": "",
            "group": "eisshy5qcvzgpc5a",
            "order": 4,
            "width": 6,
            "height": 1,
            "passthru": true,
            "mode": "text",
            "delay": "0",
            "topic": "topic",
            "sendOnBlur": true,
            "className": "text-input",
            "topicType": "msg",
            "x": 450,
            "y": 3020,
            "wires": [
                [
                    "dd1c4gwuxh8lygdu"
                ]
            ]
        },
        {
            "id": "u8hvsce5m3b24471",
            "type": "ui_text",
            "z": "3c404a3b2b9070cb",
            "group": "jfzzmbmr22xgviv0",
            "order": 9,
            "width": 4,
            "height": 1,
            "name": "",
            "label": "Screen Unten",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 2000,
            "y": 3040,
            "wires": []
        },
        {
            "id": "6f9v8aqkh3lrdm3r",
            "type": "ui_media",
            "z": "3c404a3b2b9070cb",
            "group": "jfzzmbmr22xgviv0",
            "name": "LB",
            "width": 2,
            "height": "3",
            "order": 11,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1970,
            "y": 3080,
            "wires": [
                []
            ]
        },
        {
            "id": "sfy6po2k4p3n0xiv",
            "type": "ui_text",
            "z": "3c404a3b2b9070cb",
            "group": "lt97vq5xq0mm64jb",
            "order": 2,
            "width": 4,
            "height": 1,
            "name": "",
            "label": "Screen Oben",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1810,
            "y": 4060,
            "wires": []
        },
        {
            "id": "8h1cokhv8vt016g2",
            "type": "ui_media",
            "z": "3c404a3b2b9070cb",
            "group": "lt97vq5xq0mm64jb",
            "name": "LT",
            "width": 2,
            "height": 2,
            "order": 10,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1790,
            "y": 4100,
            "wires": [
                []
            ]
        },
        {
            "id": "s44n5ocaxyo1y8yt",
            "type": "ui_text",
            "z": "3c404a3b2b9070cb",
            "group": "lt97vq5xq0mm64jb",
            "order": 40,
            "width": 4,
            "height": 1,
            "name": "",
            "label": "Screen Unten",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1800,
            "y": 4280,
            "wires": []
        },
        {
            "id": "mvvixcsdnhm0s8j4",
            "type": "ui_media",
            "z": "3c404a3b2b9070cb",
            "group": "lt97vq5xq0mm64jb",
            "name": "LB",
            "width": 2,
            "height": "3",
            "order": 48,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1770,
            "y": 4320,
            "wires": [
                []
            ]
        },
        {
            "id": "h8pzx0rsx04pdc52",
            "type": "ui_button",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "group": "jfzzmbmr22xgviv0",
            "order": 16,
            "width": "0",
            "height": "0",
            "passthru": false,
            "label": "Live setzen",
            "tooltip": "",
            "color": "",
            "bgcolor": "",
            "className": "",
            "icon": "",
            "payload": "",
            "payloadType": "str",
            "topic": "topic",
            "topicType": "msg",
            "x": 490,
            "y": 3900,
            "wires": [
                [
                    "wjyuib5soibrkvcd",
                    "o625dsarjrs2ghsf",
                    "m1j4nddvyindhsa2"
                ]
            ]
        },
        {
            "id": "om2rh7u7elqlvj6z",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set live image",
            "func": "msg.payload = 'screen/LT_LIVE.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1580,
            "y": 4100,
            "wires": [
                [
                    "8h1cokhv8vt016g2"
                ]
            ]
        },
        {
            "id": "66ghha59jca2m4z1",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set live image",
            "func": "msg.payload = 'screen/LB_LIVE.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1580,
            "y": 4320,
            "wires": [
                [
                    "mvvixcsdnhm0s8j4"
                ]
            ]
        },
        {
            "id": "wjyuib5soibrkvcd",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1430,
            "y": 4320,
            "wires": [
                [
                    "66ghha59jca2m4z1"
                ]
            ]
        },
        {
            "id": "o625dsarjrs2ghsf",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1430,
            "y": 4100,
            "wires": [
                [
                    "om2rh7u7elqlvj6z"
                ]
            ]
        },
        {
            "id": "gd0gjenwd6i6lj8a",
            "type": "ui_dropdown",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "label": "Text Position",
            "tooltip": "",
            "place": "Position wählen",
            "group": "vs34rxsj9l0ejrrw",
            "order": 2,
            "width": 6,
            "height": 1,
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Oben",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mitte",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Unten",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 2800,
            "wires": [
                [
                    "ykhzx3sjh1j3sdrh"
                ]
            ]
        },
        {
            "id": "ykhzx3sjh1j3sdrh",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set position",
            "func": "if(msg.payload === 0){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_TOP\");\n} else if(msg.payload === 1){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n} else if(msg.payload === 2){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_BOTTOM\");\n} else {\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 690,
            "y": 2800,
            "wires": [
                [
                    "s9jckq4slreii91d"
                ]
            ]
        },
        {
            "id": "smepms6f3h2ju857",
            "type": "ui_dropdown",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "label": "Text Position",
            "tooltip": "",
            "place": "Position wählen",
            "group": "eisshy5qcvzgpc5a",
            "order": 2,
            "width": 6,
            "height": 1,
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Oben",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mitte",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Unten",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 3060,
            "wires": [
                [
                    "sactule6b1o8qhpr"
                ]
            ]
        },
        {
            "id": "m1j4nddvyindhsa2",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 820,
            "y": 3900,
            "wires": [
                [
                    "6wizoibq76p9peoc"
                ]
            ]
        },
        {
            "id": "h8jj85dkzg52kson",
            "type": "catch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 60,
            "y": 2260,
            "wires": [
                [
                    "fs3s79ta48xa0aqg"
                ]
            ]
        },
        {
            "id": "zr4io6bu13jxvfvh",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LB_ALIGN",
                    "pt": "flow",
                    "to": "VERTICAL_ALIGN_BOTTOM",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_BRIGHTNESS",
                    "pt": "flow",
                    "to": "0",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "LB_IMAGE",
                    "pt": "flow",
                    "to": "data/lib/ui-media/lib/images/clear.png",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_TEXT",
                    "pt": "flow",
                    "to": "",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_TEXT_SIZE",
                    "pt": "flow",
                    "to": "FONT_SANS_8_WHITE",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_ALIGN",
                    "pt": "flow",
                    "to": "VERTICAL_ALIGN_BOTTOM",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_BRIGHTNESS",
                    "pt": "flow",
                    "to": "0",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "LT_IMAGE",
                    "pt": "flow",
                    "to": "data/lib/ui-media/lib/images/clear.png",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_TEXT",
                    "pt": "flow",
                    "to": "",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_TEXT_SIZE",
                    "pt": "flow",
                    "to": "FONT_SANS_8_WHITE",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"image\":\"data/lib/ui-media/lib/images/clear.png\",\"text\":\"\"}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 240,
            "y": 2480,
            "wires": [
                [
                    "9gzjn04eft1s5wrv",
                    "2jngbjakk5r2d4s2"
                ]
            ]
        },
        {
            "id": "a1686l15wn1lshgy",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "----- UI",
            "info": "",
            "x": 50,
            "y": 2320,
            "wires": []
        },
        {
            "id": "vehhi8tpt0ilp6oz",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "----- Styles",
            "info": "",
            "x": 120,
            "y": 2360,
            "wires": []
        },
        {
            "id": "8pj1uzmf5w24fn8h",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "----- Init",
            "info": "",
            "x": 110,
            "y": 2440,
            "wires": []
        },
        {
            "id": "r48ebah4ryq3ac2v",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "----- Preview",
            "info": "",
            "x": 130,
            "y": 2700,
            "wires": []
        },
        {
            "id": "2hk0urcmbb1u01qx",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "----- Live",
            "info": "",
            "x": 140,
            "y": 3800,
            "wires": []
        },
        {
            "id": "xv139kmnkkv32qoi",
            "type": "ui_dropdown",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "label": "Text Grösse",
            "tooltip": "",
            "place": "Grösse wählen",
            "group": "vs34rxsj9l0ejrrw",
            "order": 3,
            "width": 6,
            "height": 1,
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Gross",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mittel",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Klein",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 2840,
            "wires": [
                [
                    "2v5w5ctoi67iqjw4"
                ]
            ]
        },
        {
            "id": "2v5w5ctoi67iqjw4",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set size",
            "func": "if(msg.payload === 0){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_32_WHITE\");\n} else if(msg.payload === 1){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_16_WHITE\");\n} else if(msg.payload === 2){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n} else {\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 680,
            "y": 2840,
            "wires": [
                [
                    "s9jckq4slreii91d"
                ]
            ]
        },
        {
            "id": "ki168z4jsbftk7rl",
            "type": "ui_dropdown",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "label": "Text Grösse",
            "tooltip": "",
            "place": "Grösse wählen",
            "group": "eisshy5qcvzgpc5a",
            "order": 3,
            "width": 6,
            "height": 1,
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Gross",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mittel",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Klein",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 3100,
            "wires": [
                [
                    "7y6yizkby026okhk"
                ]
            ]
        },
        {
            "id": "qw1igzh1g62uzj8l",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "LT_ALIGN",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_TOP",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_MIDDLE",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_BOTTOM",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 4,
            "x": 1310,
            "y": 2800,
            "wires": [
                [
                    "lweclf6im4hnzabk"
                ],
                [
                    "1igj12273v7k4dad"
                ],
                [
                    "q43rulxxs1dopy9p"
                ],
                [
                    "lweclf6im4hnzabk"
                ]
            ]
        },
        {
            "id": "q43rulxxs1dopy9p",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "Middle",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "LT_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_MIDDLE",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1530,
            "y": 2800,
            "wires": [
                [
                    "xukz4vy9hv9gr9hr"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "lweclf6im4hnzabk",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "Bottom",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "LT_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1540,
            "y": 2840,
            "wires": [
                [
                    "xukz4vy9hv9gr9hr"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "c768wiridr05v06b",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set Live Image",
            "func": "return { \"payload\": \"data/lib/ui-media/lib/screen/SCREEN_LIVE.png\" };",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1660,
            "y": 3900,
            "wires": [
                [
                    "xuvhkv875zcb1vfh"
                ]
            ]
        },
        {
            "id": "xuvhkv875zcb1vfh",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 23",
            "mode": "link",
            "links": [
                "pwz2ora27m8lwco9"
            ],
            "x": 1595,
            "y": 3940
        },
        {
            "id": "9gzjn04eft1s5wrv",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "Bottom",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 420,
            "y": 2460,
            "wires": [
                [
                    "9yxfnmaa7ajmvili"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "9yxfnmaa7ajmvili",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 550,
            "y": 2460,
            "wires": [
                []
            ]
        },
        {
            "id": "2jngbjakk5r2d4s2",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "Bottom",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 420,
            "y": 2500,
            "wires": [
                [
                    "i2g7n3ztioytp6hh"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "i2g7n3ztioytp6hh",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 550,
            "y": 2500,
            "wires": [
                [
                    "yrfflvqufx6szyql"
                ]
            ]
        },
        {
            "id": "wa298pc2o6eoo0ry",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Update LED Metrics",
            "func": "const LB_IMAGE = flow.get(\"LB_IMAGE\").split(\"/\")[flow.get(\"LB_IMAGE\").split(\"/\").length -1];\nconst LT_IMAGE = flow.get(\"LT_IMAGE\").split(\"/\")[flow.get(\"LT_IMAGE\").split(\"/\").length -1];\n\nconst message ={ \"payload\": {} };\nif (LT_IMAGE.includes(\"clear\")){\n    message.payload[\"IMAGE-0\"] = \"\";\n} else {\n    message.payload[\"IMAGE-0\"] = LT_IMAGE;\n}\nif(LB_IMAGE.includes(\"clear\")){\n    message.payload[\"IMAGE-1\"] = \"\";\n} else {\n    message.payload[\"IMAGE-1\"] = LB_IMAGE;\n}\nmessage.payload[\"TEXT-0\"] = flow.get(\"LT_TEXT\");\nmessage.payload[\"SIZE-0\"] = flow.get(\"LT_TEXT_SIZE\");\nmessage.payload[\"ALIGN-0\"] = flow.get(\"LT_ALIGN\");\nmessage.payload[\"BRIGHTNESS-0\"] = flow.get(\"LT_BRIGHTNESS\");\nmessage.payload[\"TEXT-1\"] = flow.get(\"LB_TEXT\");\nmessage.payload[\"SIZE-1\"] = flow.get(\"LB_TEXT_SIZE\");\nmessage.payload[\"ALIGN-1\"] = flow.get(\"LB_ALIGN\");\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1680,
            "y": 3980,
            "wires": [
                [
                    "mqkqox1y8sxhrlto"
                ]
            ]
        },
        {
            "id": "mqkqox1y8sxhrlto",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 24",
            "mode": "link",
            "links": [
                "oe7lm0vkt1sxcjle"
            ],
            "x": 1595,
            "y": 4020
        },
        {
            "id": "i07nrbar1flou4yb",
            "type": "mqtt out",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1080,
            "y": 1140,
            "wires": []
        },
        {
            "id": "t4ivv0xhlmwakiio",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Reset dashboard",
            "links": [
                "daaz4zgfg3h0uhqe"
            ],
            "x": 535,
            "y": 4100,
            "wires": [
                [
                    "o625dsarjrs2ghsf",
                    "wjyuib5soibrkvcd",
                    "m1j4nddvyindhsa2"
                ]
            ]
        },
        {
            "id": "cnba1j8uenecr2j4",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Reset LT",
            "links": [
                "kpteiydqfsdqspxm",
                "3s40wz2p83111gxm"
            ],
            "x": 785,
            "y": 2680,
            "wires": [
                [
                    "s9jckq4slreii91d"
                ]
            ]
        },
        {
            "id": "6rk2xov63ungjdqr",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Reset LB",
            "links": [
                "kpteiydqfsdqspxm",
                "3s40wz2p83111gxm"
            ],
            "x": 785,
            "y": 2940,
            "wires": [
                [
                    "7omj05w0cucnliac"
                ]
            ]
        },
        {
            "id": "kpteiydqfsdqspxm",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 25",
            "mode": "link",
            "links": [
                "cnba1j8uenecr2j4",
                "6rk2xov63ungjdqr"
            ],
            "x": 1485,
            "y": 1480
        },
        {
            "id": "daaz4zgfg3h0uhqe",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 26",
            "mode": "link",
            "links": [
                "t4ivv0xhlmwakiio"
            ],
            "x": 1485,
            "y": 1520
        },
        {
            "id": "m92dbuwyhjdbr9vn",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1380,
            "y": 1520,
            "wires": [
                [
                    "daaz4zgfg3h0uhqe"
                ]
            ]
        },
        {
            "id": "w8t2nba1y5gnsk9m",
            "type": "ui_slider",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "label": "",
            "tooltip": "",
            "group": "67ioyqoho4zkjo4h",
            "order": 4,
            "width": "10",
            "height": "1",
            "passthru": true,
            "outs": "end",
            "topic": "topic",
            "topicType": "msg",
            "min": 0,
            "max": "100",
            "step": "10",
            "className": "brightness-slider",
            "x": 1170,
            "y": 3320,
            "wires": [
                [
                    "igsmkj8i0spk3yh5"
                ]
            ]
        },
        {
            "id": "3y1djnnv7b50j3oc",
            "type": "ui_text",
            "z": "3c404a3b2b9070cb",
            "group": "67ioyqoho4zkjo4h",
            "order": 1,
            "width": "10",
            "height": "1",
            "name": "",
            "label": "Automatik wählen..",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 490,
            "y": 3280,
            "wires": []
        },
        {
            "id": "igsmkj8i0spk3yh5",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set brightness",
            "func": "function factor(percentage) {\n  // Convert percentage value to decimal\n  const decimalPercentage = percentage / 100;\n\n  // Calculate range between numbers\n  const range = 2;\n\n  // Calculate result by adding first number in array to the product of the percentage value and the range\n  const result = -1 + (decimalPercentage * range);\n\n  // Return result rounded to the nearest hundredth\n  return Math.round(result * 100) / 100;\n}\n\nflow.set(\"LT_BRIGHTNESS\", factor(msg.payload));\nflow.set(\"LB_BRIGHTNESS\", factor(msg.payload));\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1320,
            "y": 3320,
            "wires": [
                [
                    "3s40wz2p83111gxm"
                ]
            ]
        },
        {
            "id": "3s40wz2p83111gxm",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 27",
            "mode": "link",
            "links": [
                "cnba1j8uenecr2j4",
                "6rk2xov63ungjdqr"
            ],
            "x": 1455,
            "y": 3320
        },
        {
            "id": "hbc3w37ecetp39ij",
            "type": "ui_switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "label": "Automatisch",
            "tooltip": "",
            "group": "67ioyqoho4zkjo4h",
            "order": 2,
            "width": "4",
            "height": "1",
            "passthru": true,
            "decouple": "false",
            "topic": "topic",
            "topicType": "msg",
            "style": "",
            "onvalue": "true",
            "onvalueType": "bool",
            "onicon": "",
            "oncolor": "",
            "offvalue": "false",
            "offvalueType": "bool",
            "officon": "",
            "offcolor": "",
            "animate": false,
            "className": "",
            "x": 470,
            "y": 3320,
            "wires": [
                [
                    "k0vclmk01s43bz2q"
                ]
            ]
        },
        {
            "id": "k0vclmk01s43bz2q",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LT_BRIGHTNESS_AUTO",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "LB_BRIGHTNESS_AUTO",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 640,
            "y": 3320,
            "wires": [
                [
                    "f2br6zhliyxj9gue"
                ]
            ]
        },
        {
            "id": "kh7m7hbn18cq56dm",
            "type": "ui_text",
            "z": "3c404a3b2b9070cb",
            "group": "67ioyqoho4zkjo4h",
            "order": 3,
            "width": "10",
            "height": "1",
            "name": "",
            "label": "Helligkeit wählen..",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "brightness-slider",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 490,
            "y": 3360,
            "wires": []
        },
        {
            "id": "f2br6zhliyxj9gue",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                },
                {
                    "t": "false"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 790,
            "y": 3320,
            "wires": [
                [
                    "1cjuw1tg862jc0m4"
                ],
                [
                    "xzg51u2c0as2ce9m"
                ]
            ]
        },
        {
            "id": "03a1w8i9ptad1ozj",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "resize",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "64",
            "parameter1Type": "num",
            "parameter2": "64",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1110,
            "y": 2820,
            "wires": [
                [
                    "vn97w7wcjx5o9o2l"
                ]
            ]
        },
        {
            "id": "vn97w7wcjx5o9o2l",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "merge",
            "data": "base",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "payload",
            "parameter1Type": "msg",
            "parameter2": "16",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "BLEND_SOURCE_OVER",
            "parameter4Type": "Blend",
            "parameter5": "1.0",
            "parameter5Type": "num",
            "parameter6": "1.0",
            "parameter6Type": "num",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 6,
            "jimpFunction": "composite",
            "selectedJimpFunction": {
                "name": "composite",
                "fn": "composite",
                "description": "composites another Jimp image over this image at x, y",
                "parameters": [
                    {
                        "name": "src",
                        "type": "",
                        "required": true,
                        "hint": "the source image (a Jimp instance)",
                        "defaultType": "msg",
                        "defaultValue": "payload"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "the x position to blit the image"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "the y position to blit the image"
                    },
                    {
                        "name": "mode",
                        "group": "options",
                        "type": "blend",
                        "required": true,
                        "hint": "what blend mode to use"
                    },
                    {
                        "name": "opacitySource",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    },
                    {
                        "name": "opacityDest",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    }
                ]
            },
            "x": 1110,
            "y": 2860,
            "wires": [
                [
                    "qw1igzh1g62uzj8l"
                ]
            ]
        },
        {
            "id": "drhlb9w8b9ouzztk",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set selected image",
            "func": "var image = msg.payload.icon.split(\"/\")[msg.payload.icon.split(\"/\").length -1]\nflow.set(\"LT_IMAGE\",  \"data/lib/ui-media/lib/images/\" + image);\n\nmsg.payload = flow.get(\"LT_IMAGE\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 710,
            "y": 2720,
            "wires": [
                [
                    "s9jckq4slreii91d"
                ]
            ]
        },
        {
            "id": "2ndnvr4aqbfsvsgc",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "LT_IMAGE",
                    "tot": "flow"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1140,
            "y": 2720,
            "wires": [
                [
                    "xukz4vy9hv9gr9hr"
                ]
            ]
        },
        {
            "id": "xukz4vy9hv9gr9hr",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "brightness",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_BRIGHTNESS",
            "parameter1Type": "flow",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "brightness",
            "selectedJimpFunction": {
                "name": "brightness",
                "fn": "brightness",
                "description": "adjust the brightness",
                "parameters": [
                    {
                        "name": "val",
                        "type": "num",
                        "required": true,
                        "hint": "adjust the brightness by a value -1.0 to 1.0"
                    }
                ]
            },
            "x": 1790,
            "y": 2740,
            "wires": [
                [
                    "o2g672jlx2ngufz7"
                ]
            ]
        },
        {
            "id": "r2k5pjm53ws0j9t4",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "Top",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "8",
            "parameter3Type": "num",
            "parameter4": "LB_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_TOP",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1530,
            "y": 3020,
            "wires": [
                [
                    "ag82gnrf4emd47i8"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "s64432zew087gdp1",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set Images",
            "func": "msg.base = \"data/lib/ui-media/lib/images/clear.png\";\nif (flow.get(\"LB_IMAGE\")) {\n    msg.payload = flow.get(\"LB_IMAGE\");\n} else {\n    msg.payload = \"data/lib/ui-media/lib/images/clear.png\";\n}\n\nif(!flow.get(\"LB_ALIGN\")){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1130,
            "y": 3040,
            "wires": [
                [
                    "92aqv2610gjpyuy6"
                ]
            ]
        },
        {
            "id": "7omj05w0cucnliac",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "LB_TEXT",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "null"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 3,
            "x": 930,
            "y": 2980,
            "wires": [
                [
                    "b92387s8ilahh6o6"
                ],
                [
                    "b92387s8ilahh6o6"
                ],
                [
                    "s64432zew087gdp1"
                ]
            ]
        },
        {
            "id": "vtbhwhl9s223eenp",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1770,
            "y": 3040,
            "wires": [
                [
                    "k6c9zk31tytdaztk"
                ]
            ]
        },
        {
            "id": "dd1c4gwuxh8lygdu",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LB_TEXT",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 710,
            "y": 3020,
            "wires": [
                [
                    "7omj05w0cucnliac"
                ]
            ]
        },
        {
            "id": "k6c9zk31tytdaztk",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set preview image",
            "func": "msg.payload = 'screen/LB_PREVIEW.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1810,
            "y": 3080,
            "wires": [
                [
                    "6f9v8aqkh3lrdm3r"
                ]
            ]
        },
        {
            "id": "sactule6b1o8qhpr",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set position",
            "func": "if(msg.payload === 0){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_TOP\");\n} else if(msg.payload === 1){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n} else if(msg.payload === 2){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_BOTTOM\");\n} else {\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 690,
            "y": 3060,
            "wires": [
                [
                    "7omj05w0cucnliac"
                ]
            ]
        },
        {
            "id": "7y6yizkby026okhk",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set size",
            "func": "if(msg.payload === 0){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_32_WHITE\");\n} else if(msg.payload === 1){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_16_WHITE\");\n} else if(msg.payload === 2){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n} else {\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 680,
            "y": 3100,
            "wires": [
                [
                    "7omj05w0cucnliac"
                ]
            ]
        },
        {
            "id": "xl9jo8mhbvmzf94u",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "LB_ALIGN",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_TOP",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_MIDDLE",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_BOTTOM",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 4,
            "x": 1310,
            "y": 3060,
            "wires": [
                [
                    "qvmuoesju4xpmzim"
                ],
                [
                    "r2k5pjm53ws0j9t4"
                ],
                [
                    "va7w95llwn31v5tw"
                ],
                [
                    "qvmuoesju4xpmzim"
                ]
            ]
        },
        {
            "id": "va7w95llwn31v5tw",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "Middle",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "LB_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_MIDDLE",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1530,
            "y": 3060,
            "wires": [
                [
                    "ag82gnrf4emd47i8"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "qvmuoesju4xpmzim",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "Bottom",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "LB_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1540,
            "y": 3100,
            "wires": [
                [
                    "ag82gnrf4emd47i8"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "92aqv2610gjpyuy6",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "resize",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "64",
            "parameter1Type": "num",
            "parameter2": "64",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1110,
            "y": 3080,
            "wires": [
                [
                    "1w1po116jplisz1d"
                ]
            ]
        },
        {
            "id": "pxogiwxy9a56mckr",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "merge",
            "data": "base",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "payload",
            "parameter1Type": "msg",
            "parameter2": "16",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "BLEND_SOURCE_OVER",
            "parameter4Type": "Blend",
            "parameter5": "1.0",
            "parameter5Type": "num",
            "parameter6": "1.0",
            "parameter6Type": "num",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 6,
            "jimpFunction": "composite",
            "selectedJimpFunction": {
                "name": "composite",
                "fn": "composite",
                "description": "composites another Jimp image over this image at x, y",
                "parameters": [
                    {
                        "name": "src",
                        "type": "",
                        "required": true,
                        "hint": "the source image (a Jimp instance)",
                        "defaultType": "msg",
                        "defaultValue": "payload"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "the x position to blit the image"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "the y position to blit the image"
                    },
                    {
                        "name": "mode",
                        "group": "options",
                        "type": "blend",
                        "required": true,
                        "hint": "what blend mode to use"
                    },
                    {
                        "name": "opacitySource",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    },
                    {
                        "name": "opacityDest",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    }
                ]
            },
            "x": 1110,
            "y": 3160,
            "wires": [
                [
                    "xl9jo8mhbvmzf94u"
                ]
            ]
        },
        {
            "id": "sh7sirkouqxsymc8",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set selected image",
            "func": "var image = msg.payload.icon.split(\"/\")[msg.payload.icon.split(\"/\").length -1]\nflow.set(\"LB_IMAGE\",  \"data/lib/ui-media/lib/images/\" + image);\n\nmsg.payload = flow.get(\"LB_IMAGE\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 710,
            "y": 2980,
            "wires": [
                [
                    "7omj05w0cucnliac"
                ]
            ]
        },
        {
            "id": "ag82gnrf4emd47i8",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "brightness",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_BRIGHTNESS",
            "parameter1Type": "flow",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "brightness",
            "selectedJimpFunction": {
                "name": "brightness",
                "fn": "brightness",
                "description": "adjust the brightness",
                "parameters": [
                    {
                        "name": "val",
                        "type": "num",
                        "required": true,
                        "hint": "adjust the brightness by a value -1.0 to 1.0"
                    }
                ]
            },
            "x": 1790,
            "y": 3000,
            "wires": [
                [
                    "vtbhwhl9s223eenp"
                ]
            ]
        },
        {
            "id": "1w1po116jplisz1d",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "resize",
            "data": "base",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "96",
            "parameter1Type": "num",
            "parameter2": "128",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "base",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1110,
            "y": 3120,
            "wires": [
                [
                    "pxogiwxy9a56mckr"
                ]
            ]
        },
        {
            "id": "8p4imqgzav6z2ejw",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set Images",
            "func": "msg.base = \"data/lib/ui-media/lib/images/clear.png\";\nif (flow.get(\"LT_IMAGE\")) {\n    msg.payload = flow.get(\"LT_IMAGE\");\n} else {\n    msg.payload = \"data/lib/ui-media/lib/images/clear.png\";\n}\n\nif(!flow.get(\"LT_ALIGN\")){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1130,
            "y": 2780,
            "wires": [
                [
                    "03a1w8i9ptad1ozj"
                ]
            ]
        },
        {
            "id": "b92387s8ilahh6o6",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "LB_IMAGE",
                    "tot": "flow"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1140,
            "y": 2980,
            "wires": [
                [
                    "ag82gnrf4emd47i8"
                ]
            ]
        },
        {
            "id": "6wizoibq76p9peoc",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "resize",
            "data": "data/lib/ui-media/lib/images/clear.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "96",
            "parameter1Type": "num",
            "parameter2": "224",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1010,
            "y": 3900,
            "wires": [
                [
                    "ffzc3a8ysr5gnyhz"
                ]
            ]
        },
        {
            "id": "3oixug5zp5vm1d91",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "merge",
            "data": "data/lib/ui-media/lib/screen/BACKGROUND.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "payload",
            "parameter1Type": "msg",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "BLEND_SOURCE_OVER",
            "parameter4Type": "Blend",
            "parameter5": "1.0",
            "parameter5Type": "num",
            "parameter6": "1.0",
            "parameter6Type": "num",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 6,
            "jimpFunction": "composite",
            "selectedJimpFunction": {
                "name": "composite",
                "fn": "composite",
                "description": "composites another Jimp image over this image at x, y",
                "parameters": [
                    {
                        "name": "src",
                        "type": "",
                        "required": true,
                        "hint": "the source image (a Jimp instance)",
                        "defaultType": "msg",
                        "defaultValue": "payload"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "the x position to blit the image"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "the y position to blit the image"
                    },
                    {
                        "name": "mode",
                        "group": "options",
                        "type": "blend",
                        "required": true,
                        "hint": "what blend mode to use"
                    },
                    {
                        "name": "opacitySource",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    },
                    {
                        "name": "opacityDest",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    }
                ]
            },
            "x": 1170,
            "y": 3940,
            "wires": [
                [
                    "lsaapcexrh98n118"
                ]
            ]
        },
        {
            "id": "f2ulyi7e62y3dm0z",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/SCREEN_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1330,
            "y": 3980,
            "wires": [
                [
                    "c768wiridr05v06b",
                    "wa298pc2o6eoo0ry"
                ]
            ]
        },
        {
            "id": "9mt4itko0l9jcjc0",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "merge",
            "data": "data/lib/ui-media/lib/screen/SCREEN_LIVE.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "payload",
            "parameter1Type": "msg",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "96",
            "parameter3Type": "num",
            "parameter4": "BLEND_SOURCE_OVER",
            "parameter4Type": "Blend",
            "parameter5": "1.0",
            "parameter5Type": "num",
            "parameter6": "1.0",
            "parameter6Type": "num",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 6,
            "jimpFunction": "composite",
            "selectedJimpFunction": {
                "name": "composite",
                "fn": "composite",
                "description": "composites another Jimp image over this image at x, y",
                "parameters": [
                    {
                        "name": "src",
                        "type": "",
                        "required": true,
                        "hint": "the source image (a Jimp instance)",
                        "defaultType": "msg",
                        "defaultValue": "payload"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "the x position to blit the image"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "the y position to blit the image"
                    },
                    {
                        "name": "mode",
                        "group": "options",
                        "type": "blend",
                        "required": true,
                        "hint": "what blend mode to use"
                    },
                    {
                        "name": "opacitySource",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    },
                    {
                        "name": "opacityDest",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    }
                ]
            },
            "x": 1330,
            "y": 3940,
            "wires": [
                [
                    "f2ulyi7e62y3dm0z"
                ]
            ]
        },
        {
            "id": "ffzc3a8ysr5gnyhz",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/BACKGROUND.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1010,
            "y": 3940,
            "wires": [
                [
                    "km1j84ldmpelf26o"
                ]
            ]
        },
        {
            "id": "km1j84ldmpelf26o",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "resize",
            "data": "data/lib/ui-media/lib/screen/LT_LIVE.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "96",
            "parameter1Type": "num",
            "parameter2": "96",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1170,
            "y": 3900,
            "wires": [
                [
                    "3oixug5zp5vm1d91"
                ]
            ]
        },
        {
            "id": "lsaapcexrh98n118",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/SCREEN_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1170,
            "y": 3980,
            "wires": [
                [
                    "7nblri568wu841fa"
                ]
            ]
        },
        {
            "id": "7nblri568wu841fa",
            "type": "jimp-image",
            "z": "3c404a3b2b9070cb",
            "name": "resize",
            "data": "data/lib/ui-media/lib/screen/LB_LIVE.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "96",
            "parameter1Type": "num",
            "parameter2": "128",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1330,
            "y": 3900,
            "wires": [
                [
                    "9mt4itko0l9jcjc0"
                ]
            ]
        },
        {
            "id": "1cjuw1tg862jc0m4",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "50",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "enabled",
                    "pt": "msg",
                    "to": "false",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 980,
            "y": 3300,
            "wires": [
                [
                    "w8t2nba1y5gnsk9m"
                ]
            ]
        },
        {
            "id": "xzg51u2c0as2ce9m",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "50",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "enabled",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 980,
            "y": 3340,
            "wires": [
                [
                    "w8t2nba1y5gnsk9m"
                ]
            ]
        },
        {
            "id": "plfqag43dh63thod",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 460,
            "y": 3240,
            "wires": [
                [
                    "xzg51u2c0as2ce9m"
                ]
            ]
        },
        {
            "id": "11tumbcazizeoykz",
            "type": "modbus-flex-connector",
            "z": "3c404a3b2b9070cb",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "ay0nsn138kfojd5u",
            "x": 1090,
            "y": 140,
            "wires": [
                []
            ]
        },
        {
            "id": "p1a35mvo2wmc3ari",
            "type": "modbus-flex-sequencer",
            "z": "3c404a3b2b9070cb",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "ay0nsn138kfojd5u",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 640,
            "y": 420,
            "wires": [
                [
                    "xvwu8qei1yft2j9l",
                    "ogzd1wtcrl8gnsd5"
                ],
                []
            ]
        },
        {
            "id": "wir5apf7ql0k1tf1",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "send bridge data",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"bridge.image.protocols\").filter(protocol => protocol.id.includes(\"DIGITAL\") || protocol.id.includes(\"ANALOG\") || protocol.id.includes(\"INTEGER\")).map(dataPoint => {\n    return {\n        dataPoint: dataPoint,\n        name: dataPoint.id,\n        fc: dataPoint.fc,\n        address: dataPoint.address,\n        unitid: flow.get(\"bridge.image.controller.unitId\"),\n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.type)\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 420,
            "wires": [
                [
                    "p1a35mvo2wmc3ari"
                ]
            ]
        },
        {
            "id": "xvwu8qei1yft2j9l",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set number data point values",
            "func": "if (!msg.dataPoint.type.includes(\"bool\") || (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\")) {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": msg.dataPoint.type.includes(\"bool\"),\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.type.includes(\"bool\") ? \"bool\" : msg.dataPoint.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.offsetbit,\n            \"scale\": msg.dataPoint.scale.toString(),\n            \"mask\": msg.dataPoint.mask\n        }\n    ];\n\n    if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\" && msg.dataPoint.invert) {\n        msg.payload[0] = Math.abs(msg.payload[0] - 1)\n    }\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 900,
            "y": 420,
            "wires": [
                [
                    "3pseueamvocvuvgl"
                ]
            ]
        },
        {
            "id": "3pseueamvocvuvgl",
            "type": "buffer-parser",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1150,
            "y": 420,
            "wires": [
                [
                    "ehgkoqbx3wmouj0j"
                ]
            ]
        },
        {
            "id": "ogzd1wtcrl8gnsd5",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set boolean data point values",
            "func": "if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] === \"boolean\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.offsetbit];\n\n    if (msg.dataPoint.invert) {\n        payload[msg.name] = !payload[msg.name];\n    }\n\n    msg.payload = payload;\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 910,
            "y": 460,
            "wires": [
                [
                    "ehgkoqbx3wmouj0j"
                ]
            ]
        },
        {
            "id": "9cfphk55zxkfm09d",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Protocol Read",
            "links": [
                "qoxu08aqopopa2q1",
                "xwok19i87qo5abla",
                "920915ea6b4a4950"
            ],
            "x": 75,
            "y": 420,
            "wires": [
                [
                    "fe1bqr7o84qhbdjd"
                ]
            ]
        },
        {
            "id": "fe1bqr7o84qhbdjd",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 420,
            "wires": [
                [
                    "i0kaeci1yhtcl37j"
                ]
            ]
        },
        {
            "id": "ehgkoqbx3wmouj0j",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 28",
            "mode": "link",
            "links": [
                "4zqwjrlfcc1uj21v"
            ],
            "x": 1285,
            "y": 500
        },
        {
            "id": "i0kaeci1yhtcl37j",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 460,
            "wires": [
                [
                    "wir5apf7ql0k1tf1"
                ]
            ]
        },
        {
            "id": "ffbj301x60ihnt5p",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "---- Update Telemetry Metrics",
            "info": "",
            "x": 120,
            "y": 980,
            "wires": []
        },
        {
            "id": "4zqwjrlfcc1uj21v",
            "type": "link in",
            "z": "3c404a3b2b9070cb",
            "name": "Update Telemetry Metrics",
            "links": [
                "ehgkoqbx3wmouj0j",
                "kj7i54r9pzir2vc5"
            ],
            "x": 115,
            "y": 1060,
            "wires": [
                [
                    "4cwb4laktl0ndc5m"
                ]
            ]
        },
        {
            "id": "4cwb4laktl0ndc5m",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 360,
            "y": 1060,
            "wires": [
                [
                    "ebcpza4uhwvnd1r1",
                    "ci4l7xrrlfn2s2so"
                ]
            ]
        },
        {
            "id": "ci4l7xrrlfn2s2so",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 720,
            "y": 1060,
            "wires": [
                [
                    "i07nrbar1flou4yb"
                ]
            ]
        },
        {
            "id": "ebcpza4uhwvnd1r1",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 720,
            "y": 1100,
            "wires": [
                [
                    "zhlj92vzblgeqfmk"
                ]
            ]
        },
        {
            "id": "sh3ky2vz71jsvtrk",
            "type": "comment",
            "z": "3c404a3b2b9070cb",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 360,
            "wires": []
        },
        {
            "id": "2ebhlsqd51v2u7qg",
            "type": "mqtt out",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1370,
            "y": 1960,
            "wires": []
        },
        {
            "id": "8dxfa3m5tfhlr3qf",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 570,
            "y": 1940,
            "wires": [
                [
                    "5grnocsu8vwjf2r8"
                ],
                [
                    "b7dyqbee4276j8a1"
                ]
            ]
        },
        {
            "id": "64xk741dkygdc2pm",
            "type": "debug",
            "z": "3c404a3b2b9070cb",
            "name": "Execute SPS Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "true",
            "targetType": "full",
            "statusVal": "",
            "statusType": "auto",
            "x": 1040,
            "y": 1840,
            "wires": []
        },
        {
            "id": "5grnocsu8vwjf2r8",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1920,
            "wires": [
                [
                    "n7hpx1mkakok0jr8"
                ],
                [
                    "64xk741dkygdc2pm",
                    "mf4cheixe5rcofok",
                    "46jv2yj3n3uos9nm"
                ]
            ]
        },
        {
            "id": "n7hpx1mkakok0jr8",
            "type": "debug",
            "z": "3c404a3b2b9070cb",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1070,
            "y": 1800,
            "wires": []
        },
        {
            "id": "1xkyybziifmjho1c",
            "type": "catch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "scope": [
                "af7a5d65221b4b94"
            ],
            "uncaught": false,
            "x": 590,
            "y": 2020,
            "wires": [
                [
                    "2jwozipvtdwg4kyc"
                ]
            ]
        },
        {
            "id": "x8j546tffhelv9vz",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1960,
            "wires": [
                [
                    "2ebhlsqd51v2u7qg"
                ]
            ]
        },
        {
            "id": "46jv2yj3n3uos9nm",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1920,
            "wires": [
                [
                    "x8j546tffhelv9vz"
                ]
            ]
        },
        {
            "id": "b7dyqbee4276j8a1",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 2060,
            "wires": [
                [
                    "2ebhlsqd51v2u7qg"
                ]
            ]
        },
        {
            "id": "2jwozipvtdwg4kyc",
            "type": "change",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 2020,
            "wires": [
                [
                    "b7dyqbee4276j8a1"
                ]
            ]
        },
        {
            "id": "nuju6i3cld6cgctt",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": false,\n        \"target\": true\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1960,
            "wires": [
                [
                    "8dxfa3m5tfhlr3qf"
                ],
                [
                    "x8j546tffhelv9vz"
                ]
            ]
        },
        {
            "id": "whud59s7x7dbxhlg",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "msg.payload.command.id",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "cont",
                    "v": "TEXT",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "SIZE",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "ALIGN",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "BRIGHTNESS",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "IMAGE",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "M",
                    "vt": "str"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 6,
            "x": 250,
            "y": 1560,
            "wires": [
                [
                    "7hkiabawxym5n8b6"
                ],
                [
                    "7hkiabawxym5n8b6"
                ],
                [
                    "7hkiabawxym5n8b6"
                ],
                [
                    "7hkiabawxym5n8b6"
                ],
                [
                    "fuqfmxhrbepm6lz2"
                ],
                [
                    "nuju6i3cld6cgctt"
                ]
            ]
        },
        {
            "id": "bp524z03ch9v61k1",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "rate",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": true,
            "allowrate": false,
            "outputs": 1,
            "x": 410,
            "y": 520,
            "wires": [
                [
                    "6vuabe9psga96rio"
                ]
            ]
        },
        {
            "id": "6vuabe9psga96rio",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Round values",
            "func": "msg.payload[\"VIRTUAL-0\"] = false;\nif (msg.payload[\"AM1\"]) {\n    msg.payload[\"AM1\"] = msg.payload[\"AM1\"] / 100;\n}\nif (msg.payload[\"AM2\"]) {\n    msg.payload[\"AM2\"] = msg.payload[\"AM2\"] / 100;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1140,
            "y": 520,
            "wires": [
                [
                    "ehgkoqbx3wmouj0j"
                ]
            ]
        },
        {
            "id": "ptrkewgfi2vivv3s",
            "type": "s7 in",
            "z": "3c404a3b2b9070cb",
            "endpoint": "sq1ktirfd37q2qrb",
            "mode": "all",
            "variable": "",
            "diff": false,
            "name": "",
            "x": 190,
            "y": 520,
            "wires": [
                [
                    "bp524z03ch9v61k1"
                ]
            ]
        },
        {
            "id": "fs3s79ta48xa0aqg",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "error.source.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "cont",
                    "v": "s7",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "serial",
                    "vt": "str"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 3,
            "x": 190,
            "y": 2260,
            "wires": [
                [
                    "oianw3qmhthqswxr"
                ],
                [
                    "8dbd216bb89f18bc"
                ],
                [
                    "8wze5rkucs881wbg"
                ]
            ]
        },
        {
            "id": "kj7i54r9pzir2vc5",
            "type": "link out",
            "z": "3c404a3b2b9070cb",
            "name": "link out 29",
            "mode": "link",
            "links": [
                "4zqwjrlfcc1uj21v"
            ],
            "x": 695,
            "y": 2220
        },
        {
            "id": "oianw3qmhthqswxr",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "SPS Error",
            "func": "msg = {\n    payload : {}\n}\n\nmsg.payload[\"VIRTUAL-0\"] = true;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 340,
            "y": 2220,
            "wires": [
                [
                    "kj7i54r9pzir2vc5"
                ]
            ]
        },
        {
            "id": "mf4cheixe5rcofok",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "protocolCommand.id",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "M32",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M33",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M34",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M36",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M37",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M38",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M39",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M40",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M41",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M42",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M43",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M44",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 12,
            "x": 1310,
            "y": 1840,
            "wires": [
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ],
                [
                    "jddnzqu0fcq2hhc6"
                ]
            ]
        },
        {
            "id": "fxv071nur91fg9uk",
            "type": "s7 out",
            "z": "3c404a3b2b9070cb",
            "endpoint": "sq1ktirfd37q2qrb",
            "variable": "",
            "name": "",
            "x": 1700,
            "y": 1840,
            "wires": []
        },
        {
            "id": "jddnzqu0fcq2hhc6",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Set value",
            "func": "msg = {\n    \"variable\" : msg.protocolCommand.id,\n    \"payload\": true,\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1460,
            "y": 1840,
            "wires": [
                [
                    "fxv071nur91fg9uk"
                ]
            ]
        },
        {
            "id": "7hkiabawxym5n8b6",
            "type": "debug",
            "z": "3c404a3b2b9070cb",
            "name": "debug 8",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 400,
            "y": 1580,
            "wires": []
        },
        {
            "id": "9ea53db6f66f12e0",
            "type": "serial in",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "serial": "d029d406982773c9",
            "x": 130,
            "y": 600,
            "wires": [
                [
                    "7d6235633aafb40e"
                ]
            ]
        },
        {
            "id": "c31e5ead17c8a0e2",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "Parse GPS",
            "func": "const data = {\n  gpsData: msg.payload,\n  utcTime: '',\n  ns: '',\n  ew: '',\n  slatitude: '',\n  slongitude: '',\n  usefullFlag: false\n};\n\nlet subString;\nlet subStringNext;\nfor (let i = 0; i <= 6; i++) {\n  if (i === 0) {\n    if ((subString = data.gpsData.indexOf(',')) === -1) {\n      node.warn(\"GPS ERROR\");\n    }\n  } else {\n    subString++;\n    if ((subStringNext = data.gpsData.indexOf(',', subString)) !== -1) {\n      let buffer = '';\n      let usefullBuffer = '';\n      switch (i) {\n        case 1:\n          data.utcTime = data.gpsData.substring(subString, subStringNext);\n          break;\n        case 2:\n          usefullBuffer = data.gpsData.substring(subString, subStringNext);\n          break;\n        case 3:\n          data.slatitude = data.gpsData.substring(subString, subStringNext);\n          data.slatitude = (parseInt(data.slatitude.substring(0, 2)) + parseFloat(data.slatitude.substring(2, data.slatitude.length)) / 60).toString()\n          break;\n        case 4:\n          data.ns = data.gpsData.substring(subString, subStringNext);\n          break;\n        case 5:\n          data.slongitude = data.gpsData.substring(subString, subStringNext);\n          data.slongitude = (parseInt(data.slongitude.substring(0, 3)) + parseFloat(data.slongitude.substring(3, data.slongitude.length)) / 60).toString()\n          break;\n        case 6:\n          data.ew = data.gpsData.substring(subString, subStringNext);\n          break;\n        default:\n          break;\n      }\n      subString = subStringNext;\n      if (usefullBuffer[0] === 'A') {\n        data.usefullFlag = true;\n      } else if (usefullBuffer[0] === 'V') {\n        data.usefullFlag = false;\n      }\n    } else {\n      node.warn(\"GPS ERROR\");\n    }\n  }\n}\n\nmsg.payload = {\n  \"GPS_POSITION\": data.slatitude + \";\" + data.slongitude + \";\" + data.ns + \";\" + data.ew,\n  \"GPS_ERROR\" : false\n  };\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1150,
            "y": 600,
            "wires": [
                [
                    "ehgkoqbx3wmouj0j"
                ]
            ]
        },
        {
            "id": "7d6235633aafb40e",
            "type": "delay",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "pauseType": "rate",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": true,
            "allowrate": false,
            "outputs": 1,
            "x": 290,
            "y": 600,
            "wires": [
                [
                    "9b9fcd76b317daaf"
                ]
            ]
        },
        {
            "id": "9b9fcd76b317daaf",
            "type": "switch",
            "z": "3c404a3b2b9070cb",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "cont",
                    "v": "$GPRMC",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 470,
            "y": 600,
            "wires": [
                [
                    "c31e5ead17c8a0e2"
                ]
            ]
        },
        {
            "id": "8dbd216bb89f18bc",
            "type": "function",
            "z": "3c404a3b2b9070cb",
            "name": "GPS Error",
            "func": "msg = {\n    payload : {}\n}\n\nmsg.payload[\"GPS_ERROR\"] = true;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 2260,
            "wires": [
                [
                    "kj7i54r9pzir2vc5"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "vs34rxsj9l0ejrrw",
            "type": "ui_group",
            "z": "3c404a3b2b9070cb",
            "name": "Screen Oben",
            "tab": "fafre3kqtevaravu",
            "order": 1,
            "disp": true,
            "width": "10",
            "collapse": false,
            "className": ""
        },
        {
            "id": "jfzzmbmr22xgviv0",
            "type": "ui_group",
            "z": "3c404a3b2b9070cb",
            "name": "Vorschau",
            "tab": "fafre3kqtevaravu",
            "order": 3,
            "disp": true,
            "width": "5",
            "collapse": false,
            "className": ""
        },
        {
            "id": "eisshy5qcvzgpc5a",
            "type": "ui_group",
            "z": "3c404a3b2b9070cb",
            "name": "Screen Unten",
            "tab": "fafre3kqtevaravu",
            "order": 2,
            "disp": true,
            "width": "10",
            "collapse": false,
            "className": ""
        },
        {
            "id": "lt97vq5xq0mm64jb",
            "type": "ui_group",
            "z": "3c404a3b2b9070cb",
            "name": "Live",
            "tab": "fafre3kqtevaravu",
            "order": 4,
            "disp": true,
            "width": "5",
            "collapse": false,
            "className": ""
        },
        {
            "id": "fafre3kqtevaravu",
            "type": "ui_tab",
            "z": "3c404a3b2b9070cb",
            "name": "Anzeige",
            "icon": "dashboard",
            "order": 1,
            "disabled": false,
            "hidden": false
        },
        {
            "id": "13m2mzqgpaopjhb1",
            "type": "ui_base",
            "z": "3c404a3b2b9070cb",
            "theme": {
                "name": "theme-light",
                "lightTheme": {
                    "default": "#0094CE",
                    "baseColor": "#f70000",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                    "edited": true,
                    "reset": false
                },
                "darkTheme": {
                    "default": "#097479",
                    "baseColor": "#097479",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                    "edited": false
                },
                "customTheme": {
                    "name": "Untitled Theme 1",
                    "default": "#4B7930",
                    "baseColor": "#4B7930",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                },
                "themeState": {
                    "base-color": {
                        "default": "#0094CE",
                        "value": "#f70000",
                        "edited": true
                    },
                    "page-titlebar-backgroundColor": {
                        "value": "#f70000",
                        "edited": false
                    },
                    "page-backgroundColor": {
                        "value": "#fafafa",
                        "edited": false
                    },
                    "page-sidebar-backgroundColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "group-textColor": {
                        "value": "#ff4444",
                        "edited": false
                    },
                    "group-borderColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "group-backgroundColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "widget-textColor": {
                        "value": "#111111",
                        "edited": false
                    },
                    "widget-backgroundColor": {
                        "value": "#f70000",
                        "edited": false
                    },
                    "widget-borderColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "base-font": {
                        "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                    }
                },
                "angularTheme": {
                    "primary": "indigo",
                    "accents": "blue",
                    "warn": "red",
                    "background": "grey",
                    "palette": "light"
                }
            },
            "site": {
                "name": "Triopan AG",
                "hideToolbar": "false",
                "allowSwipe": "false",
                "lockMenu": "icon",
                "allowTempTheme": "true",
                "dateFormat": "DD/MM/YYYY",
                "sizes": {
                    "sx": 40,
                    "sy": 40,
                    "gx": 8,
                    "gy": 8,
                    "cx": 8,
                    "cy": 8,
                    "px": 4,
                    "py": 4
                }
            }
        },
        {
            "id": "8643emq6p5mczc3n",
            "type": "ui_tab",
            "z": "3c404a3b2b9070cb",
            "name": "Steuerung",
            "icon": "fa-cogs",
            "order": 2,
            "disabled": false,
            "hidden": false
        },
        {
            "id": "67ioyqoho4zkjo4h",
            "type": "ui_group",
            "z": "3c404a3b2b9070cb",
            "name": "Bildschirm Konfiguration",
            "tab": "8643emq6p5mczc3n",
            "order": 5,
            "disp": true,
            "width": "10",
            "collapse": false,
            "className": ""
        },
        {
            "id": "9x5gb8zmd3n46cru",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 1,
            "width": 1,
            "height": 1
        },
        {
            "id": "t57ot86fox69sgni",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 3,
            "width": 1,
            "height": 1
        },
        {
            "id": "lga4xcejc3gu5u59",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 5,
            "width": 2,
            "height": 1
        },
        {
            "id": "lidc3chorj2q0s8s",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 6,
            "width": 1,
            "height": 1
        },
        {
            "id": "y1mtffqmizrk9393",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 7,
            "width": 2,
            "height": 1
        },
        {
            "id": "jakyjehg6nybdl31",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 8,
            "width": 1,
            "height": 1
        },
        {
            "id": "wr7uqitfstu1fq77",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 10,
            "width": 1,
            "height": 1
        },
        {
            "id": "xgs3j8t3oq9ab04p",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 12,
            "width": 2,
            "height": 1
        },
        {
            "id": "8q94fbytc6si1mim",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 13,
            "width": 1,
            "height": 1
        },
        {
            "id": "zsxj2344r54n207k",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 14,
            "width": 2,
            "height": 1
        },
        {
            "id": "937e3isll8f58jjv",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 15,
            "width": 1,
            "height": 1
        },
        {
            "id": "1r569ttw1oyu00vo",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "jfzzmbmr22xgviv0",
            "order": 17,
            "width": 1,
            "height": 1
        },
        {
            "id": "yl13l8cwap82l97k",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 1,
            "width": 1,
            "height": 1
        },
        {
            "id": "r28wmavwxzxswvoh",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 9,
            "width": 1,
            "height": 1
        },
        {
            "id": "7es8oruy8ce1jmzz",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 24,
            "width": 2,
            "height": 1
        },
        {
            "id": "t3ehxnhl925gitr4",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 31,
            "width": 1,
            "height": 1
        },
        {
            "id": "byd16lqhcw7qy29i",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 32,
            "width": 2,
            "height": 1
        },
        {
            "id": "zdw5i1wtya1tk5k7",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 39,
            "width": 1,
            "height": 1
        },
        {
            "id": "sots8k4v8wvcan5u",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 47,
            "width": 1,
            "height": 1
        },
        {
            "id": "h95z3um2m23bv31f",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 61,
            "width": 2,
            "height": 1
        },
        {
            "id": "qld9sb0qfoya0t4p",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 62,
            "width": 1,
            "height": 1
        },
        {
            "id": "scbm34u55i5gx5wg",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 63,
            "width": 2,
            "height": 1
        },
        {
            "id": "of320agk93nlnw9w",
            "type": "ui_spacer",
            "z": "3c404a3b2b9070cb",
            "name": "spacer",
            "group": "lt97vq5xq0mm64jb",
            "order": 64,
            "width": "5",
            "height": "1"
        },
        {
            "id": "sq1ktirfd37q2qrb",
            "type": "s7 endpoint",
            "z": "3c404a3b2b9070cb",
            "transport": "iso-on-tcp",
            "address": "192.168.1.101",
            "port": "102",
            "rack": "0",
            "slot": "2",
            "localtsaphi": "02",
            "localtsaplo": "00",
            "remotetsaphi": "02",
            "remotetsaplo": "00",
            "connmode": "tsap",
            "adapter": "",
            "busaddr": "2",
            "cycletime": "1000",
            "timeout": "5000",
            "name": "",
            "vartable": [
                {
                    "addr": "DB1,WORD1118",
                    "name": "AM1"
                },
                {
                    "addr": "DB1,WORD1119",
                    "name": "AM2"
                },
                {
                    "addr": "DB1,WORD1120",
                    "name": "AM3"
                },
                {
                    "addr": "DB1,X1105.1",
                    "name": "M10"
                },
                {
                    "addr": "DB1,X1105.2",
                    "name": "M11"
                },
                {
                    "addr": "DB1,X1105.3",
                    "name": "M12"
                },
                {
                    "addr": "DB1,X1105.4",
                    "name": "M13"
                },
                {
                    "addr": "DB1,X1105.5",
                    "name": "M14"
                },
                {
                    "addr": "DB1,X1105.6",
                    "name": "M15"
                },
                {
                    "addr": "DB1,X1105.7",
                    "name": "M16"
                },
                {
                    "addr": "DB1,X1106.0",
                    "name": "M17"
                },
                {
                    "addr": "DB1,X1106.1",
                    "name": "M18"
                },
                {
                    "addr": "DB1,X1106.2",
                    "name": "M19"
                },
                {
                    "addr": "DB1,X1106.3",
                    "name": "M20"
                },
                {
                    "addr": "DB1,X1107.7",
                    "name": "M32"
                },
                {
                    "addr": "DB1,X1108.0",
                    "name": "M33"
                },
                {
                    "addr": "DB1,X1108.1",
                    "name": "M34"
                },
                {
                    "addr": "DB1,X1108.2",
                    "name": "M36"
                },
                {
                    "addr": "DB1,X1108.3",
                    "name": "M37"
                },
                {
                    "addr": "DB1,X1108.4",
                    "name": "M38"
                },
                {
                    "addr": "DB1,X1108.5",
                    "name": "M39"
                },
                {
                    "addr": "DB1,X1108.6",
                    "name": "M40"
                },
                {
                    "addr": "DB1,X1108.7",
                    "name": "M41"
                },
                {
                    "addr": "DB1,X1109.0",
                    "name": "M42"
                },
                {
                    "addr": "DB1,X1109.1",
                    "name": "M43"
                },
                {
                    "addr": "DB1,X1109.2",
                    "name": "M44"
                }
            ]
        }
    ]
}