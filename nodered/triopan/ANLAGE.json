{
    "id": "5ab0a8a075d4c5d5",
    "label": "65e822d9bbf65abc8cdf4438",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "1xr3eumtgcymu5pe",
            "type": "mqtt out",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1080,
            "y": 1180,
            "wires": []
        },
        {
            "id": "dbe56zw3dkcvzmtd",
            "type": "inject",
            "z": "5ab0a8a075d4c5d5",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "8q8b8ujwnhe4tehp"
                ]
            ]
        },
        {
            "id": "8q8b8ujwnhe4tehp",
            "type": "getflows",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "rc7rxnr73igieze0"
                ]
            ]
        },
        {
            "id": "rc7rxnr73igieze0",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "94oq6rdmhxp0skip"
                ]
            ]
        },
        {
            "id": "4s9cim20b95uw76i",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1260,
            "wires": []
        },
        {
            "id": "paux7n14w8zi2jbl",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "94oq6rdmhxp0skip",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "g7d57s6168p7wqxh"
                ]
            ]
        },
        {
            "id": "h97cln6be213ghxl",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "---- Set Screen Image",
            "info": "",
            "x": 100,
            "y": 360,
            "wires": []
        },
        {
            "id": "l8ztc74w0d0cdff4",
            "type": "inject",
            "z": "5ab0a8a075d4c5d5",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "dlk9kp26cus6jtpa"
                ]
            ]
        },
        {
            "id": "g7d57s6168p7wqxh",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "h1g78zfapf0i4rod",
                    "681d61868120515e"
                ]
            ]
        },
        {
            "id": "82zc0lkpvxprsygk",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "dlk9kp26cus6jtpa",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 14",
            "mode": "link",
            "links": [
                "8432wmlkzzt9soau",
                "4puf380oje25ywh9"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "4puf380oje25ywh9",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Virtual Read",
            "links": [
                "jak7xse55acrj144",
                "dlk9kp26cus6jtpa"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "z6p91ic9aslcb0fj"
                ]
            ]
        },
        {
            "id": "z6p91ic9aslcb0fj",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "0je1g1k7uaoohnrk"
                ]
            ]
        },
        {
            "id": "gyvalmhisjhz62xn",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"kwh\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = flow.get(\"bridge.image.metrics\")[metricId];\n        }\n        msg.payload[metricId] = msg.payload[metricId] + (flow.get(\"bridge.image.metrics\")[parameterIds[0]] / 3600);\n    },\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        functions[calc.func](sequence.dataPoint.id, calc.ids)\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "vntwxigoqpjnymzh"
                ]
            ]
        },
        {
            "id": "vlhug9u193c9dhws",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "---- Update Image Metrics",
            "info": "",
            "x": 110,
            "y": 1120,
            "wires": []
        },
        {
            "id": "w3zr41c2xj9bjgmv",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Update LED Metrics",
            "links": [
                "cx6scr64w5cd8ni9",
                "tx2spwhtk331081i",
                "v1j5vcnpyafdz6ek",
                "vntwxigoqpjnymzh"
            ],
            "x": 115,
            "y": 1180,
            "wires": [
                [
                    "1rxoxsinaai0pdxi"
                ]
            ]
        },
        {
            "id": "1rxoxsinaai0pdxi",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set LED value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1180,
            "wires": [
                [
                    "1xr3eumtgcymu5pe"
                ]
            ]
        },
        {
            "id": "9sk7qza6bgdztrsw",
            "type": "flogger",
            "z": "5ab0a8a075d4c5d5",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 670,
            "y": 2260,
            "wires": [
                []
            ]
        },
        {
            "id": "auchwhqdxs8my77v",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 340,
            "y": 2260,
            "wires": [
                [
                    "y0u86ehpzg2nv5qa"
                ]
            ]
        },
        {
            "id": "y0u86ehpzg2nv5qa",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 510,
            "y": 2260,
            "wires": [
                [
                    "9sk7qza6bgdztrsw"
                ]
            ]
        },
        {
            "id": "vntwxigoqpjnymzh",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 16",
            "mode": "link",
            "links": [
                "w3zr41c2xj9bjgmv"
            ],
            "x": 1215,
            "y": 260
        },
        {
            "id": "11si0nlmjns3czf7",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "gyvalmhisjhz62xn"
                ]
            ]
        },
        {
            "id": "0je1g1k7uaoohnrk",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "11si0nlmjns3czf7"
                ]
            ]
        },
        {
            "id": "s6r9r1q403hfwi9i",
            "type": "exec",
            "z": "5ab0a8a075d4c5d5",
            "command": "fbset -g 1280 720 1280 720 4",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Fullscreen",
            "x": 580,
            "y": 420,
            "wires": [
                [],
                [
                    "u3r6rxoi1at0w8fn"
                ],
                [
                    "93mjb87100uatdga"
                ]
            ]
        },
        {
            "id": "93mjb87100uatdga",
            "type": "exec",
            "z": "5ab0a8a075d4c5d5",
            "command": "fbi -a -d /dev/fb0 --noverbose -T 1 -1 data/lib/ui-media/lib/images/clear.png",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Clear Screen",
            "x": 770,
            "y": 500,
            "wires": [
                [],
                [
                    "u3r6rxoi1at0w8fn"
                ],
                [
                    "ymd3p5kejca4m8rq"
                ]
            ]
        },
        {
            "id": "ymd3p5kejca4m8rq",
            "type": "exec",
            "z": "5ab0a8a075d4c5d5",
            "command": "pgrep fbi | xargs kill",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Kill FBI",
            "x": 1020,
            "y": 520,
            "wires": [
                [],
                [
                    "u3r6rxoi1at0w8fn"
                ],
                []
            ]
        },
        {
            "id": "ccm91p35l7gnaxa7",
            "type": "exec",
            "z": "5ab0a8a075d4c5d5",
            "command": "fbi -a -d /dev/fb0 --noverbose -T 1 -1",
            "addpay": "payload",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Image",
            "x": 1030,
            "y": 640,
            "wires": [
                [],
                [
                    "u3r6rxoi1at0w8fn"
                ],
                []
            ]
        },
        {
            "id": "stajb2d73dmeuti4",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "500",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 570,
            "y": 600,
            "wires": [
                [
                    "n82pfh8k97bbasbk",
                    "q6rjda6gnp8t0036"
                ]
            ]
        },
        {
            "id": "n82pfh8k97bbasbk",
            "type": "exec",
            "z": "5ab0a8a075d4c5d5",
            "command": "fbset -g 96 224 96 224 4",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "20",
            "winHide": false,
            "oldrc": false,
            "name": "Set Image Screen",
            "x": 790,
            "y": 560,
            "wires": [
                [],
                [
                    "u3r6rxoi1at0w8fn"
                ],
                []
            ]
        },
        {
            "id": "q6rjda6gnp8t0036",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "500",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 770,
            "y": 620,
            "wires": [
                [
                    "ccm91p35l7gnaxa7"
                ]
            ]
        },
        {
            "id": "h1g78zfapf0i4rod",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set init image",
            "func": "msg.payload = {};\n\nflow.get(\"bridge.image.protocols\").forEach(protocol => {\n    msg.payload[protocol.id] = \"\";\n})\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 80,
            "wires": [
                [
                    "tx2spwhtk331081i"
                ]
            ]
        },
        {
            "id": "tx2spwhtk331081i",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 20",
            "mode": "link",
            "links": [
                "w3zr41c2xj9bjgmv",
                "wa32k3r2lpbfg76p",
                "9d46vwvwmy99uvyf"
            ],
            "x": 1215,
            "y": 80
        },
        {
            "id": "wa32k3r2lpbfg76p",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Clear LB Screen",
            "links": [
                "tx2spwhtk331081i"
            ],
            "x": 95,
            "y": 420,
            "wires": [
                [
                    "s6r9r1q403hfwi9i"
                ]
            ]
        },
        {
            "id": "t4umb8dh9upi4h2i",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set LB Image",
            "links": [
                "57gqpvu3ruwnagpn",
                "de6m3dkh5l1fdxu1"
            ],
            "x": 95,
            "y": 600,
            "wires": [
                [
                    "chj09gfbpsm2z0h6"
                ]
            ]
        },
        {
            "id": "chj09gfbpsm2z0h6",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 390,
            "y": 600,
            "wires": [
                [
                    "s6r9r1q403hfwi9i"
                ],
                [
                    "s6r9r1q403hfwi9i",
                    "stajb2d73dmeuti4"
                ]
            ]
        },
        {
            "id": "azc2c5o5g0v1bn33",
            "type": "mqtt in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 130,
            "y": 1540,
            "wires": [
                [
                    "32a7e34d96e869c0"
                ]
            ]
        },
        {
            "id": "b3ueguqx56o8b975",
            "type": "inject",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 1360,
            "wires": [
                [
                    "k0d44b5kbvwz1vrh"
                ]
            ]
        },
        {
            "id": "11hyrixl3tro63nd",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 310,
            "y": 1480,
            "wires": [
                [
                    "azc2c5o5g0v1bn33"
                ]
            ]
        },
        {
            "id": "k0d44b5kbvwz1vrh",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 160,
            "y": 1420,
            "wires": [
                [
                    "z6apze5xt01lxc1y"
                ],
                [
                    "11hyrixl3tro63nd"
                ]
            ]
        },
        {
            "id": "z6apze5xt01lxc1y",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 1420,
            "wires": []
        },
        {
            "id": "qr0fncqywadexmze",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 410,
            "y": 1540,
            "wires": [
                [
                    "logbvkpqbl2ch68g"
                ],
                [
                    "9e1ta8lp4tsu4ftu"
                ]
            ]
        },
        {
            "id": "nv7mc89jc23em7yw",
            "type": "mqtt out",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1390,
            "y": 1600,
            "wires": []
        },
        {
            "id": "logbvkpqbl2ch68g",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 590,
            "y": 1520,
            "wires": [
                [
                    "q9fuow470taky7h8"
                ],
                [
                    "zoifsao2hqgtb79l"
                ]
            ]
        },
        {
            "id": "4egvelsa1mwhseor",
            "type": "debug",
            "z": "5ab0a8a075d4c5d5",
            "name": "Execute LED Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1060,
            "y": 1400,
            "wires": []
        },
        {
            "id": "q9fuow470taky7h8",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1440,
            "wires": [
                [
                    "96wyh2id9q8ctbth"
                ],
                [
                    "4egvelsa1mwhseor",
                    "jn1c5milkzj9hcgp",
                    "xxe5brrb09fv6oy8"
                ]
            ]
        },
        {
            "id": "96wyh2id9q8ctbth",
            "type": "debug",
            "z": "5ab0a8a075d4c5d5",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1090,
            "y": 1360,
            "wires": []
        },
        {
            "id": "jha2krk8jr775egr",
            "type": "catch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "scope": [
                "v0ybzti4w6s318gl"
            ],
            "uncaught": false,
            "x": 610,
            "y": 1640,
            "wires": [
                [
                    "jwyk65q3h84t30lu"
                ]
            ]
        },
        {
            "id": "9e1ta8lp4tsu4ftu",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1000,
            "y": 1600,
            "wires": [
                [
                    "nv7mc89jc23em7yw"
                ]
            ]
        },
        {
            "id": "mg60lttu72jczp3v",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1020,
            "y": 1520,
            "wires": [
                [
                    "9e1ta8lp4tsu4ftu"
                ]
            ]
        },
        {
            "id": "zoifsao2hqgtb79l",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1000,
            "y": 1680,
            "wires": [
                [
                    "nv7mc89jc23em7yw"
                ]
            ]
        },
        {
            "id": "jwyk65q3h84t30lu",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1020,
            "y": 1640,
            "wires": [
                [
                    "zoifsao2hqgtb79l"
                ]
            ]
        },
        {
            "id": "jn1c5milkzj9hcgp",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Update LED image",
            "func": "const message = { \"payload\": \"data/lib/ui-media/lib/images/\" + msg.payload.value }\nflow.set(\"LT_IMAGE\", message.payload);\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1030,
            "y": 1480,
            "wires": [
                [
                    "mg60lttu72jczp3v",
                    "de6m3dkh5l1fdxu1",
                    "rmy9j5dfupa8r57k",
                    "vgobdqeiskc4pyrt"
                ]
            ]
        },
        {
            "id": "de6m3dkh5l1fdxu1",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 21",
            "mode": "link",
            "links": [
                "t4umb8dh9upi4h2i"
            ],
            "x": 1485,
            "y": 1480
        },
        {
            "id": "xxe5brrb09fv6oy8",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Update LED Metric",
            "func": "const message ={ \"payload\": {} };\nif(msg.payload.value.includes(\"clear\")){\n    message.payload[msg.protocolCommand.protocolId] = \"\";\n} else {\n    message.payload[msg.protocolCommand.protocolId] = msg.payload.value;\n}\n\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1030,
            "y": 1440,
            "wires": [
                [
                    "v1j5vcnpyafdz6ek"
                ]
            ]
        },
        {
            "id": "v1j5vcnpyafdz6ek",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 22",
            "mode": "link",
            "links": [
                "w3zr41c2xj9bjgmv"
            ],
            "x": 1485,
            "y": 1440
        },
        {
            "id": "u3r6rxoi1at0w8fn",
            "type": "debug",
            "z": "5ab0a8a075d4c5d5",
            "name": "Error",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1270,
            "y": 420,
            "wires": []
        },
        {
            "id": "80420hi9kw4f59ku",
            "type": "ui_text_input",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "label": "Text",
            "tooltip": "",
            "group": "mbtw3sc5eoy6falr",
            "order": 4,
            "width": 6,
            "height": 1,
            "passthru": true,
            "mode": "text",
            "delay": "0",
            "topic": "topic",
            "sendOnBlur": true,
            "className": "textInput",
            "topicType": "msg",
            "x": 450,
            "y": 2760,
            "wires": [
                [
                    "fjc4o2cugzixf2c9"
                ]
            ]
        },
        {
            "id": "h0d9ns1dlk2z94mq",
            "type": "ui_template",
            "z": "5ab0a8a075d4c5d5",
            "group": "",
            "name": "Styles",
            "order": 1,
            "width": 0,
            "height": 0,
            "format": "<script id=\"logo-script\" type=\"text/javascript\">\n    $(function () {\n        const logoId = 'logo-div';\n        var toolbar = $('.md-toolbar-tools');\n        if(!toolbar.length) return;\n        if($(\"#\" + logoId).length > 0) return;\n\n        var div = $('<div/>');\n        div[0].style.margin = '10px 0px 10px auto';\n        div.attr('id', logoId);\n\n        var logo = new Image();\n        logo.src = 'https://github.com/MUV-Digital/resources/blob/main/img/TRIOPAN_LOGO.jpg?raw=true'\n        logo.height = 36;\n        \n        div.append(logo);\n        toolbar.append(div);\n    });\n    $('link[rel=\"shortcut icon\"]').attr('href', 'https://github.com/MUV-Digital/resources/blob/main/img/TRIOPAN_LOGO.jpg?raw=true');\n    $('link[rel=\"icon\"]').attr('href', 'https://github.com/MUV-Digital/resources/blob/main/img/TRIOPAN_LOGO.jpg?raw=true');\n</script>\n<style>\n    md-list-item .md-avatar {\n        border-radius: 0% !important;\n    }\n<\\style>",
            "storeOutMessages": true,
            "fwdInMessages": true,
            "resendOnRefresh": true,
            "templateScope": "global",
            "className": "",
            "x": 150,
            "y": 2400,
            "wires": [
                []
            ]
        },
        {
            "id": "ywazkevep9j2zn9p",
            "type": "ui_list",
            "z": "5ab0a8a075d4c5d5",
            "group": "mbtw3sc5eoy6falr",
            "name": "Image list",
            "order": 1,
            "width": 4,
            "height": 3,
            "lineType": "three",
            "actionType": "click",
            "allowHTML": false,
            "outputs": 1,
            "topic": "",
            "x": 460,
            "y": 2720,
            "wires": [
                [
                    "rfgqk97w56rg5h6g"
                ]
            ]
        },
        {
            "id": "tw5jovbdjt84dnfa",
            "type": "exec",
            "z": "5ab0a8a075d4c5d5",
            "command": "ls data/lib/ui-media/lib/images",
            "addpay": "",
            "append": "",
            "useSpawn": "false",
            "timer": "",
            "winHide": false,
            "oldrc": false,
            "name": "",
            "x": 290,
            "y": 2560,
            "wires": [
                [
                    "xsmdzdkrrgv0og01"
                ],
                [],
                []
            ]
        },
        {
            "id": "9d46vwvwmy99uvyf",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Scan for images",
            "links": [
                "tx2spwhtk331081i"
            ],
            "x": 95,
            "y": 2480,
            "wires": [
                [
                    "9x8auhh1k8vcdzpf"
                ]
            ]
        },
        {
            "id": "xsmdzdkrrgv0og01",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Get available images",
            "func": "var message = {\"payload\":[]};\n\nmsg.payload.split(\"\\n\").forEach(element => {\n    if(element.includes(\".png\")){\n        message.payload.push({\"title\": element.split(\".\")[0],\"icon\":\"/uimedia/images/\" + element})\n    }\n});\n\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 2620,
            "wires": [
                [
                    "ywazkevep9j2zn9p",
                    "kb7ms47bxub5otgd",
                    "0d1304abac1a0572"
                ]
            ]
        },
        {
            "id": "e7rkm7hovh1vikbg",
            "type": "ui_text",
            "z": "5ab0a8a075d4c5d5",
            "group": "v5fusy0gnncycq23",
            "order": 2,
            "width": "4",
            "height": "1",
            "name": "",
            "label": "Screen Oben",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1990,
            "y": 2780,
            "wires": []
        },
        {
            "id": "k0jb7136dx7ybsxi",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "Top",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "8",
            "parameter3Type": "num",
            "parameter4": "LT_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_TOP",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1530,
            "y": 2760,
            "wires": [
                [
                    "b7ho1qo223coh5hu"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "x0d6otusg70dfzdk",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "LT_TEXT",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "null"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 3,
            "x": 930,
            "y": 2720,
            "wires": [
                [
                    "575ebfce8d5f0a92"
                ],
                [
                    "575ebfce8d5f0a92"
                ],
                [
                    "1258877e10bdbdc0"
                ]
            ]
        },
        {
            "id": "lnha9wd7kymnuahj",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1770,
            "y": 2780,
            "wires": [
                [
                    "sb9f4t3efrps9mt9"
                ]
            ]
        },
        {
            "id": "fjc4o2cugzixf2c9",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LT_TEXT",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 710,
            "y": 2760,
            "wires": [
                [
                    "x0d6otusg70dfzdk"
                ]
            ]
        },
        {
            "id": "qt7duju785jbvct1",
            "type": "ui_media",
            "z": "5ab0a8a075d4c5d5",
            "group": "v5fusy0gnncycq23",
            "name": "LT",
            "width": 2,
            "height": 2,
            "order": 4,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1970,
            "y": 2820,
            "wires": [
                []
            ]
        },
        {
            "id": "sb9f4t3efrps9mt9",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set preview image",
            "func": "msg.payload = 'screen/LT_PREVIEW.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1810,
            "y": 2820,
            "wires": [
                [
                    "qt7duju785jbvct1"
                ]
            ]
        },
        {
            "id": "kb7ms47bxub5otgd",
            "type": "ui_list",
            "z": "5ab0a8a075d4c5d5",
            "group": "x4ot0jobpardwkm9",
            "name": "Image list",
            "order": 1,
            "width": 4,
            "height": 3,
            "lineType": "three",
            "actionType": "click",
            "allowHTML": false,
            "outputs": 1,
            "topic": "",
            "x": 460,
            "y": 2980,
            "wires": [
                [
                    "d51435cfaacd2299"
                ]
            ]
        },
        {
            "id": "cspm1hsk3xum57h2",
            "type": "ui_text_input",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "label": "Text",
            "tooltip": "",
            "group": "x4ot0jobpardwkm9",
            "order": 4,
            "width": 6,
            "height": 1,
            "passthru": true,
            "mode": "text",
            "delay": "0",
            "topic": "topic",
            "sendOnBlur": true,
            "className": "text-input",
            "topicType": "msg",
            "x": 450,
            "y": 3020,
            "wires": [
                [
                    "d0dd53a012c45d83"
                ]
            ]
        },
        {
            "id": "6qol7e9si6rtwz84",
            "type": "ui_text",
            "z": "5ab0a8a075d4c5d5",
            "group": "v5fusy0gnncycq23",
            "order": 9,
            "width": 4,
            "height": 1,
            "name": "",
            "label": "Screen Unten",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 2000,
            "y": 3040,
            "wires": []
        },
        {
            "id": "d0lbwb1dlexadn99",
            "type": "ui_media",
            "z": "5ab0a8a075d4c5d5",
            "group": "v5fusy0gnncycq23",
            "name": "LB",
            "width": 2,
            "height": "3",
            "order": 11,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1970,
            "y": 3080,
            "wires": [
                []
            ]
        },
        {
            "id": "mgreh5fcqr9y7c3d",
            "type": "ui_text",
            "z": "5ab0a8a075d4c5d5",
            "group": "cm07nmusspwqn6x7",
            "order": 2,
            "width": 4,
            "height": 1,
            "name": "",
            "label": "Screen Oben",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1810,
            "y": 4060,
            "wires": []
        },
        {
            "id": "foo66jbb7to3xvu4",
            "type": "ui_media",
            "z": "5ab0a8a075d4c5d5",
            "group": "cm07nmusspwqn6x7",
            "name": "LT",
            "width": 2,
            "height": 2,
            "order": 10,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1790,
            "y": 4100,
            "wires": [
                []
            ]
        },
        {
            "id": "lwfre6f8xrtqnkw1",
            "type": "ui_text",
            "z": "5ab0a8a075d4c5d5",
            "group": "cm07nmusspwqn6x7",
            "order": 40,
            "width": 4,
            "height": 1,
            "name": "",
            "label": "Screen Unten",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 1800,
            "y": 4280,
            "wires": []
        },
        {
            "id": "3dfzm88mp2tphg27",
            "type": "ui_media",
            "z": "5ab0a8a075d4c5d5",
            "group": "cm07nmusspwqn6x7",
            "name": "LB",
            "width": 2,
            "height": "3",
            "order": 48,
            "category": "images",
            "file": "clear.png",
            "layout": "adjust",
            "showcontrols": true,
            "loop": true,
            "onstart": false,
            "muted": true,
            "scope": "local",
            "tooltip": "",
            "x": 1770,
            "y": 4320,
            "wires": [
                []
            ]
        },
        {
            "id": "6oxztmicaqymvwdo",
            "type": "ui_button",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "group": "v5fusy0gnncycq23",
            "order": 16,
            "width": "0",
            "height": "0",
            "passthru": false,
            "label": "Live setzen",
            "tooltip": "",
            "color": "",
            "bgcolor": "",
            "className": "",
            "icon": "",
            "payload": "",
            "payloadType": "str",
            "topic": "topic",
            "topicType": "msg",
            "x": 490,
            "y": 3900,
            "wires": [
                [
                    "615t2sdx58jnzoqn",
                    "iz40q9g3t9mar94q",
                    "1ynn2ppm7hqcf3kc"
                ]
            ]
        },
        {
            "id": "vzuqqw3mqnvjjwcf",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set live image",
            "func": "msg.payload = 'screen/LT_LIVE.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1580,
            "y": 4100,
            "wires": [
                [
                    "foo66jbb7to3xvu4"
                ]
            ]
        },
        {
            "id": "26lobluws6m5dwux",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set live image",
            "func": "msg.payload = 'screen/LB_LIVE.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1580,
            "y": 4320,
            "wires": [
                [
                    "3dfzm88mp2tphg27"
                ]
            ]
        },
        {
            "id": "615t2sdx58jnzoqn",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1430,
            "y": 4320,
            "wires": [
                [
                    "26lobluws6m5dwux"
                ]
            ]
        },
        {
            "id": "iz40q9g3t9mar94q",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1430,
            "y": 4100,
            "wires": [
                [
                    "vzuqqw3mqnvjjwcf"
                ]
            ]
        },
        {
            "id": "23kotrl4c0x7eilj",
            "type": "ui_dropdown",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "label": "Text Position",
            "tooltip": "",
            "place": "Position wählen",
            "group": "mbtw3sc5eoy6falr",
            "order": 2,
            "width": 6,
            "height": 1,
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Oben",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mitte",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Unten",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 2800,
            "wires": [
                [
                    "n38acygrzju8e42v"
                ]
            ]
        },
        {
            "id": "n38acygrzju8e42v",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set position",
            "func": "if(msg.payload === 0){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_TOP\");\n} else if(msg.payload === 1){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n} else if(msg.payload === 2){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_BOTTOM\");\n} else {\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 690,
            "y": 2800,
            "wires": [
                [
                    "x0d6otusg70dfzdk"
                ]
            ]
        },
        {
            "id": "p0cyxgnybjbeb7xw",
            "type": "ui_dropdown",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "label": "Text Position",
            "tooltip": "",
            "place": "Position wählen",
            "group": "x4ot0jobpardwkm9",
            "order": 2,
            "width": 6,
            "height": 1,
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Oben",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mitte",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Unten",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 3060,
            "wires": [
                [
                    "91df40d6e13e8149"
                ]
            ]
        },
        {
            "id": "1ynn2ppm7hqcf3kc",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 820,
            "y": 3900,
            "wires": [
                [
                    "ca8abbb1c4f2b15f"
                ]
            ]
        },
        {
            "id": "ve9dr9xu3h73uaci",
            "type": "catch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 60,
            "y": 2260,
            "wires": [
                [
                    "e859f6c24e6843be"
                ]
            ]
        },
        {
            "id": "9x8auhh1k8vcdzpf",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LB_ALIGN",
                    "pt": "flow",
                    "to": "VERTICAL_ALIGN_BOTTOM",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_BRIGHTNESS",
                    "pt": "flow",
                    "to": "0",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "LB_IMAGE",
                    "pt": "flow",
                    "to": "data/lib/ui-media/lib/images/clear.png",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_TEXT",
                    "pt": "flow",
                    "to": "",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LB_TEXT_SIZE",
                    "pt": "flow",
                    "to": "FONT_SANS_8_WHITE",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_ALIGN",
                    "pt": "flow",
                    "to": "VERTICAL_ALIGN_BOTTOM",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_BRIGHTNESS",
                    "pt": "flow",
                    "to": "0",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "LT_IMAGE",
                    "pt": "flow",
                    "to": "data/lib/ui-media/lib/images/clear.png",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_TEXT",
                    "pt": "flow",
                    "to": "",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "LT_TEXT_SIZE",
                    "pt": "flow",
                    "to": "FONT_SANS_8_WHITE",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"image\":\"data/lib/ui-media/lib/images/clear.png\",\"text\":\"\"}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 240,
            "y": 2480,
            "wires": [
                [
                    "7ndajg5w5dq5dyj5",
                    "y8nnhgzm53b2fnt7"
                ]
            ]
        },
        {
            "id": "wn2e9m9b1972rpww",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "----- UI",
            "info": "",
            "x": 50,
            "y": 2320,
            "wires": []
        },
        {
            "id": "2tfk2zpcnamwliu4",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "----- Styles",
            "info": "",
            "x": 120,
            "y": 2360,
            "wires": []
        },
        {
            "id": "nfga8iltz0rnmhja",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "----- Init",
            "info": "",
            "x": 110,
            "y": 2440,
            "wires": []
        },
        {
            "id": "jq4niioyizxfr0gn",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "----- Preview",
            "info": "",
            "x": 130,
            "y": 2700,
            "wires": []
        },
        {
            "id": "uo0zm4fqyio2grby",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "----- Live",
            "info": "",
            "x": 140,
            "y": 3800,
            "wires": []
        },
        {
            "id": "whcu0evhrbp8pe87",
            "type": "ui_dropdown",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "label": "Text Grösse",
            "tooltip": "",
            "place": "Grösse wählen",
            "group": "mbtw3sc5eoy6falr",
            "order": 3,
            "width": 6,
            "height": 1,
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Gross",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mittel",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Klein",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 2840,
            "wires": [
                [
                    "78bkwrh10d9xn2dg"
                ]
            ]
        },
        {
            "id": "78bkwrh10d9xn2dg",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set size",
            "func": "if(msg.payload === 0){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_32_WHITE\");\n} else if(msg.payload === 1){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_16_WHITE\");\n} else if(msg.payload === 2){\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n} else {\n    flow.set(\"LT_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 680,
            "y": 2840,
            "wires": [
                [
                    "x0d6otusg70dfzdk"
                ]
            ]
        },
        {
            "id": "0x08n6new34r1eil",
            "type": "ui_dropdown",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "label": "Text Grösse",
            "tooltip": "",
            "place": "Grösse wählen",
            "group": "x4ot0jobpardwkm9",
            "order": 3,
            "width": 6,
            "height": 1,
            "passthru": true,
            "multiple": false,
            "options": [
                {
                    "label": "Gross",
                    "value": 0,
                    "type": "num"
                },
                {
                    "label": "Mittel",
                    "value": 1,
                    "type": "num"
                },
                {
                    "label": "Klein",
                    "value": 2,
                    "type": "num"
                }
            ],
            "payload": "",
            "topic": "topic",
            "topicType": "msg",
            "className": "",
            "x": 470,
            "y": 3100,
            "wires": [
                [
                    "defe5265433585e9"
                ]
            ]
        },
        {
            "id": "mbssi7gy6futnqr3",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "LT_ALIGN",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_TOP",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_MIDDLE",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_BOTTOM",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 4,
            "x": 1310,
            "y": 2800,
            "wires": [
                [
                    "7pdeoomndq3pryjd"
                ],
                [
                    "k0jb7136dx7ybsxi"
                ],
                [
                    "7cczlyqr3q1ps443"
                ],
                [
                    "7pdeoomndq3pryjd"
                ]
            ]
        },
        {
            "id": "7cczlyqr3q1ps443",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "Middle",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "LT_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_MIDDLE",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1530,
            "y": 2800,
            "wires": [
                [
                    "b7ho1qo223coh5hu"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "7pdeoomndq3pryjd",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "Bottom",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "LT_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1540,
            "y": 2840,
            "wires": [
                [
                    "b7ho1qo223coh5hu"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "41mjg5ixokgpuvds",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set Live Image",
            "func": "return { \"payload\": \"data/lib/ui-media/lib/screen/SCREEN_LIVE.png\" };",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1660,
            "y": 3900,
            "wires": [
                [
                    "57gqpvu3ruwnagpn"
                ]
            ]
        },
        {
            "id": "57gqpvu3ruwnagpn",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 23",
            "mode": "link",
            "links": [
                "t4umb8dh9upi4h2i"
            ],
            "x": 1595,
            "y": 3940
        },
        {
            "id": "7ndajg5w5dq5dyj5",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "Bottom",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 420,
            "y": 2460,
            "wires": [
                [
                    "gcit3rayo9nzdxdn"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "gcit3rayo9nzdxdn",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LT_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 550,
            "y": 2460,
            "wires": [
                []
            ]
        },
        {
            "id": "y8nnhgzm53b2fnt7",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "Bottom",
            "data": "payload.image",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "payload.text",
            "parameter4Type": "msg",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 420,
            "y": 2500,
            "wires": [
                [
                    "oryjieked26o7xji"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "oryjieked26o7xji",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 550,
            "y": 2500,
            "wires": [
                [
                    "tw5jovbdjt84dnfa"
                ]
            ]
        },
        {
            "id": "9a72vq1c7agcccog",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Update LB Metric",
            "func": "const LB_IMAGE = flow.get(\"LB_IMAGE\").split(\"/\")[flow.get(\"LB_IMAGE\").split(\"/\").length -1];\nconst LT_IMAGE = flow.get(\"LT_IMAGE\").split(\"/\")[flow.get(\"LT_IMAGE\").split(\"/\").length -1];\n\nconst message ={ \"payload\": {} };\nif (LT_IMAGE.includes(\"clear\")){\n    message.payload[\"IMAGE-0\"] = \"\";\n} else {\n    message.payload[\"IMAGE-0\"] = LT_IMAGE;\n}\nif(LB_IMAGE.includes(\"clear\")){\n    message.payload[\"IMAGE-1\"] = \"\";\n} else {\n    message.payload[\"IMAGE-1\"] = LB_IMAGE;\n}\n\n\nreturn message;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1670,
            "y": 3980,
            "wires": [
                [
                    "cx6scr64w5cd8ni9"
                ]
            ]
        },
        {
            "id": "cx6scr64w5cd8ni9",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 24",
            "mode": "link",
            "links": [
                "w3zr41c2xj9bjgmv"
            ],
            "x": 1595,
            "y": 4020
        },
        {
            "id": "im8ebknqf7xof209",
            "type": "mqtt out",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1080,
            "y": 1140,
            "wires": []
        },
        {
            "id": "y0nl0o1sjrhj4ebr",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Reset dashboard",
            "links": [
                "iy6q6wmlpyrwvoea"
            ],
            "x": 535,
            "y": 4100,
            "wires": [
                [
                    "iz40q9g3t9mar94q",
                    "615t2sdx58jnzoqn"
                ]
            ]
        },
        {
            "id": "0fm023lmzkko4b7p",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Reset LT",
            "links": [
                "rmy9j5dfupa8r57k",
                "1fvuv9gycdd06nlh"
            ],
            "x": 785,
            "y": 2680,
            "wires": [
                [
                    "x0d6otusg70dfzdk"
                ]
            ]
        },
        {
            "id": "2njuz8uum8nvvvn1",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Reset LB",
            "links": [
                "rmy9j5dfupa8r57k",
                "1fvuv9gycdd06nlh"
            ],
            "x": 785,
            "y": 2940,
            "wires": [
                [
                    "15142a9cf1e1efc3"
                ]
            ]
        },
        {
            "id": "rmy9j5dfupa8r57k",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 25",
            "mode": "link",
            "links": [
                "0fm023lmzkko4b7p",
                "2njuz8uum8nvvvn1"
            ],
            "x": 1485,
            "y": 1520
        },
        {
            "id": "iy6q6wmlpyrwvoea",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 26",
            "mode": "link",
            "links": [
                "y0nl0o1sjrhj4ebr"
            ],
            "x": 1485,
            "y": 1560
        },
        {
            "id": "vgobdqeiskc4pyrt",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1380,
            "y": 1560,
            "wires": [
                [
                    "iy6q6wmlpyrwvoea"
                ]
            ]
        },
        {
            "id": "plrhz60lnudzb60m",
            "type": "ui_slider",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "label": "",
            "tooltip": "",
            "group": "ezybspfpiqeavkvg",
            "order": 4,
            "width": "10",
            "height": "1",
            "passthru": true,
            "outs": "end",
            "topic": "topic",
            "topicType": "msg",
            "min": 0,
            "max": "100",
            "step": "10",
            "className": "brightness-slider",
            "x": 1170,
            "y": 3320,
            "wires": [
                [
                    "rk8xnbv45silfocx"
                ]
            ]
        },
        {
            "id": "xx157x8bd7hpyoui",
            "type": "ui_text",
            "z": "5ab0a8a075d4c5d5",
            "group": "ezybspfpiqeavkvg",
            "order": 1,
            "width": "10",
            "height": "1",
            "name": "",
            "label": "Automatik wählen..",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 490,
            "y": 3280,
            "wires": []
        },
        {
            "id": "rk8xnbv45silfocx",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set brightness",
            "func": "function factor(percentage) {\n  // Convert percentage value to decimal\n  const decimalPercentage = percentage / 100;\n\n  // Calculate range between numbers\n  const range = 2;\n\n  // Calculate result by adding first number in array to the product of the percentage value and the range\n  const result = -1 + (decimalPercentage * range);\n\n  // Return result rounded to the nearest hundredth\n  return Math.round(result * 100) / 100;\n}\n\nflow.set(\"LT_BRIGHTNESS\", factor(msg.payload));\nflow.set(\"LB_BRIGHTNESS\", factor(msg.payload));\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1320,
            "y": 3320,
            "wires": [
                [
                    "1fvuv9gycdd06nlh"
                ]
            ]
        },
        {
            "id": "1fvuv9gycdd06nlh",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 27",
            "mode": "link",
            "links": [
                "0fm023lmzkko4b7p",
                "2njuz8uum8nvvvn1"
            ],
            "x": 1455,
            "y": 3320
        },
        {
            "id": "700h1pam6eodq0l4",
            "type": "ui_switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "label": "Automatisch",
            "tooltip": "",
            "group": "ezybspfpiqeavkvg",
            "order": 2,
            "width": "4",
            "height": "1",
            "passthru": true,
            "decouple": "false",
            "topic": "topic",
            "topicType": "msg",
            "style": "",
            "onvalue": "true",
            "onvalueType": "bool",
            "onicon": "",
            "oncolor": "",
            "offvalue": "false",
            "offvalueType": "bool",
            "officon": "",
            "offcolor": "",
            "animate": false,
            "className": "",
            "x": 470,
            "y": 3320,
            "wires": [
                [
                    "3k5mvrky8wkzf88n"
                ]
            ]
        },
        {
            "id": "3k5mvrky8wkzf88n",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LT_BRIGHTNESS_AUTO",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "LB_BRIGHTNESS_AUTO",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 640,
            "y": 3320,
            "wires": [
                [
                    "gxovo9egl8dpf6i4"
                ]
            ]
        },
        {
            "id": "ga8pi6i3foet6ys3",
            "type": "ui_text",
            "z": "5ab0a8a075d4c5d5",
            "group": "ezybspfpiqeavkvg",
            "order": 3,
            "width": "10",
            "height": "1",
            "name": "",
            "label": "Helligkeit wählen..",
            "format": "{{msg.payload}}",
            "layout": "row-spread",
            "className": "brightness-slider",
            "style": true,
            "font": "Arial,Arial,Helvetica,sans-serif",
            "fontSize": 16,
            "color": "#000000",
            "x": 490,
            "y": 3360,
            "wires": []
        },
        {
            "id": "gxovo9egl8dpf6i4",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                },
                {
                    "t": "false"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 790,
            "y": 3320,
            "wires": [
                [
                    "8318769a27994fd7"
                ],
                [
                    "20061d25c2e98a94"
                ]
            ]
        },
        {
            "id": "bc0ad0c5d9c3faeb",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "resize",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "64",
            "parameter1Type": "num",
            "parameter2": "64",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1110,
            "y": 2820,
            "wires": [
                [
                    "616ca24dd4c48f5c"
                ]
            ]
        },
        {
            "id": "616ca24dd4c48f5c",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "merge",
            "data": "base",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "payload",
            "parameter1Type": "msg",
            "parameter2": "16",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "BLEND_SOURCE_OVER",
            "parameter4Type": "Blend",
            "parameter5": "1.0",
            "parameter5Type": "num",
            "parameter6": "1.0",
            "parameter6Type": "num",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 6,
            "jimpFunction": "composite",
            "selectedJimpFunction": {
                "name": "composite",
                "fn": "composite",
                "description": "composites another Jimp image over this image at x, y",
                "parameters": [
                    {
                        "name": "src",
                        "type": "",
                        "required": true,
                        "hint": "the source image (a Jimp instance)",
                        "defaultType": "msg",
                        "defaultValue": "payload"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "the x position to blit the image"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "the y position to blit the image"
                    },
                    {
                        "name": "mode",
                        "group": "options",
                        "type": "blend",
                        "required": true,
                        "hint": "what blend mode to use"
                    },
                    {
                        "name": "opacitySource",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    },
                    {
                        "name": "opacityDest",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    }
                ]
            },
            "x": 1110,
            "y": 2860,
            "wires": [
                [
                    "mbssi7gy6futnqr3"
                ]
            ]
        },
        {
            "id": "rfgqk97w56rg5h6g",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set selected image",
            "func": "var image = msg.payload.icon.split(\"/\")[msg.payload.icon.split(\"/\").length -1]\nflow.set(\"LT_IMAGE\",  \"data/lib/ui-media/lib/images/\" + image);\n\nmsg.payload = flow.get(\"LT_IMAGE\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 710,
            "y": 2720,
            "wires": [
                [
                    "x0d6otusg70dfzdk"
                ]
            ]
        },
        {
            "id": "575ebfce8d5f0a92",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "LT_IMAGE",
                    "tot": "flow"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1140,
            "y": 2720,
            "wires": [
                [
                    "b7ho1qo223coh5hu"
                ]
            ]
        },
        {
            "id": "b7ho1qo223coh5hu",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "brightness",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LT_BRIGHTNESS",
            "parameter1Type": "flow",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "brightness",
            "selectedJimpFunction": {
                "name": "brightness",
                "fn": "brightness",
                "description": "adjust the brightness",
                "parameters": [
                    {
                        "name": "val",
                        "type": "num",
                        "required": true,
                        "hint": "adjust the brightness by a value -1.0 to 1.0"
                    }
                ]
            },
            "x": 1790,
            "y": 2740,
            "wires": [
                [
                    "lnha9wd7kymnuahj"
                ]
            ]
        },
        {
            "id": "af403e73706cd7df",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "Top",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "8",
            "parameter3Type": "num",
            "parameter4": "LB_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_TOP",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1530,
            "y": 3020,
            "wires": [
                [
                    "6dca7328e396aa48"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "cd1f87fe6163dab8",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set Images",
            "func": "msg.base = \"data/lib/ui-media/lib/images/clear.png\";\nif (flow.get(\"LB_IMAGE\")) {\n    msg.payload = flow.get(\"LB_IMAGE\");\n} else {\n    msg.payload = \"data/lib/ui-media/lib/images/clear.png\";\n}\n\nif(!flow.get(\"LB_ALIGN\")){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1130,
            "y": 3040,
            "wires": [
                [
                    "0d5bc33ba6d83a03"
                ]
            ]
        },
        {
            "id": "15142a9cf1e1efc3",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "LB_TEXT",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "empty"
                },
                {
                    "t": "null"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 3,
            "x": 930,
            "y": 2980,
            "wires": [
                [
                    "798d6f04336acb65"
                ],
                [
                    "798d6f04336acb65"
                ],
                [
                    "cd1f87fe6163dab8"
                ]
            ]
        },
        {
            "id": "f64baae9d53cf45f",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/LB_PREVIEW.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1770,
            "y": 3040,
            "wires": [
                [
                    "5343e7bd53aa9b70"
                ]
            ]
        },
        {
            "id": "d0dd53a012c45d83",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "LB_TEXT",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 710,
            "y": 3020,
            "wires": [
                [
                    "15142a9cf1e1efc3"
                ]
            ]
        },
        {
            "id": "5343e7bd53aa9b70",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set preview image",
            "func": "msg.payload = 'screen/LB_PREVIEW.png?' + + (new Date()).getTime()\nmsg.mimetype = \"image/png\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1810,
            "y": 3080,
            "wires": [
                [
                    "d0lbwb1dlexadn99"
                ]
            ]
        },
        {
            "id": "91df40d6e13e8149",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set position",
            "func": "if(msg.payload === 0){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_TOP\");\n} else if(msg.payload === 1){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n} else if(msg.payload === 2){\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_BOTTOM\");\n} else {\n    flow.set(\"LB_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 690,
            "y": 3060,
            "wires": [
                [
                    "15142a9cf1e1efc3"
                ]
            ]
        },
        {
            "id": "defe5265433585e9",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set size",
            "func": "if(msg.payload === 0){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_32_WHITE\");\n} else if(msg.payload === 1){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_16_WHITE\");\n} else if(msg.payload === 2){\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n} else {\n    flow.set(\"LB_TEXT_SIZE\", \"FONT_SANS_8_WHITE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 680,
            "y": 3100,
            "wires": [
                [
                    "15142a9cf1e1efc3"
                ]
            ]
        },
        {
            "id": "dce572bf9f9fbcd8",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "LB_ALIGN",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_TOP",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_MIDDLE",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "VERTICAL_ALIGN_BOTTOM",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 4,
            "x": 1310,
            "y": 3060,
            "wires": [
                [
                    "1c5bcc794e3bd778"
                ],
                [
                    "af403e73706cd7df"
                ],
                [
                    "7a510f2363ad2b2e"
                ],
                [
                    "1c5bcc794e3bd778"
                ]
            ]
        },
        {
            "id": "7a510f2363ad2b2e",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "Middle",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "LB_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_MIDDLE",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1530,
            "y": 3060,
            "wires": [
                [
                    "6dca7328e396aa48"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "1c5bcc794e3bd778",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "Bottom",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_TEXT_SIZE",
            "parameter1Type": "flow",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "-8",
            "parameter3Type": "num",
            "parameter4": "LB_TEXT",
            "parameter4Type": "flow",
            "parameter5": "HORIZONTAL_ALIGN_CENTER",
            "parameter5Type": "AlignX",
            "parameter6": "VERTICAL_ALIGN_BOTTOM",
            "parameter6Type": "AlignY",
            "parameter7": "",
            "parameter7Type": "auto",
            "parameter8": "",
            "parameter8Type": "auto",
            "sendProperty": "payload",
            "parameterCount": 8,
            "jimpFunction": "print2",
            "selectedJimpFunction": {
                "name": "print aligned",
                "fn": "print",
                "description": "Print text to the image",
                "parameters": [
                    {
                        "name": "font",
                        "type": "jimpFont|str",
                        "required": true,
                        "hint": "font to print. NOTE: This can be one of the presets or the path to a fnt file"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "x coordinate to print text"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "y coordinate to print text"
                    },
                    {
                        "name": "text",
                        "group": "options",
                        "type": "str",
                        "required": true,
                        "hint": "text to print"
                    },
                    {
                        "name": "alignmentX",
                        "group": "options",
                        "type": "AlignX",
                        "required": false,
                        "hint": "X Alignment"
                    },
                    {
                        "name": "alignmentY",
                        "group": "options",
                        "type": "AlignY",
                        "required": false,
                        "hint": "Y Alignment"
                    },
                    {
                        "name": "maxWidth",
                        "type": "auto|num",
                        "required": false,
                        "hint": "wrap text at maxWidth"
                    },
                    {
                        "name": "maxHeight",
                        "type": "auto|num",
                        "required": false,
                        "hint": "max height"
                    }
                ]
            },
            "x": 1540,
            "y": 3100,
            "wires": [
                [
                    "6dca7328e396aa48"
                ]
            ],
            "icon": "font-awesome/fa-image"
        },
        {
            "id": "0d5bc33ba6d83a03",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "resize",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "64",
            "parameter1Type": "num",
            "parameter2": "64",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1110,
            "y": 3080,
            "wires": [
                [
                    "c936eded688bbfc8"
                ]
            ]
        },
        {
            "id": "3d223aa8b5299af7",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "merge",
            "data": "base",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "payload",
            "parameter1Type": "msg",
            "parameter2": "16",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "BLEND_SOURCE_OVER",
            "parameter4Type": "Blend",
            "parameter5": "1.0",
            "parameter5Type": "num",
            "parameter6": "1.0",
            "parameter6Type": "num",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 6,
            "jimpFunction": "composite",
            "selectedJimpFunction": {
                "name": "composite",
                "fn": "composite",
                "description": "composites another Jimp image over this image at x, y",
                "parameters": [
                    {
                        "name": "src",
                        "type": "",
                        "required": true,
                        "hint": "the source image (a Jimp instance)",
                        "defaultType": "msg",
                        "defaultValue": "payload"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "the x position to blit the image"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "the y position to blit the image"
                    },
                    {
                        "name": "mode",
                        "group": "options",
                        "type": "blend",
                        "required": true,
                        "hint": "what blend mode to use"
                    },
                    {
                        "name": "opacitySource",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    },
                    {
                        "name": "opacityDest",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    }
                ]
            },
            "x": 1110,
            "y": 3160,
            "wires": [
                [
                    "dce572bf9f9fbcd8"
                ]
            ]
        },
        {
            "id": "d51435cfaacd2299",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set selected image",
            "func": "var image = msg.payload.icon.split(\"/\")[msg.payload.icon.split(\"/\").length -1]\nflow.set(\"LB_IMAGE\",  \"data/lib/ui-media/lib/images/\" + image);\n\nmsg.payload = flow.get(\"LB_IMAGE\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 710,
            "y": 2980,
            "wires": [
                [
                    "15142a9cf1e1efc3"
                ]
            ]
        },
        {
            "id": "6dca7328e396aa48",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "brightness",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "LB_BRIGHTNESS",
            "parameter1Type": "flow",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "brightness",
            "selectedJimpFunction": {
                "name": "brightness",
                "fn": "brightness",
                "description": "adjust the brightness",
                "parameters": [
                    {
                        "name": "val",
                        "type": "num",
                        "required": true,
                        "hint": "adjust the brightness by a value -1.0 to 1.0"
                    }
                ]
            },
            "x": 1790,
            "y": 3000,
            "wires": [
                [
                    "f64baae9d53cf45f"
                ]
            ]
        },
        {
            "id": "c936eded688bbfc8",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "resize",
            "data": "base",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "96",
            "parameter1Type": "num",
            "parameter2": "128",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "base",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1110,
            "y": 3120,
            "wires": [
                [
                    "3d223aa8b5299af7"
                ]
            ]
        },
        {
            "id": "1258877e10bdbdc0",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set Images",
            "func": "msg.base = \"data/lib/ui-media/lib/images/clear.png\";\nif (flow.get(\"LT_IMAGE\")) {\n    msg.payload = flow.get(\"LT_IMAGE\");\n} else {\n    msg.payload = \"data/lib/ui-media/lib/images/clear.png\";\n}\n\nif(!flow.get(\"LT_ALIGN\")){\n    flow.set(\"LT_ALIGN\", \"VERTICAL_ALIGN_MIDDLE\");\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1130,
            "y": 2780,
            "wires": [
                [
                    "bc0ad0c5d9c3faeb"
                ]
            ]
        },
        {
            "id": "798d6f04336acb65",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "LB_IMAGE",
                    "tot": "flow"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1140,
            "y": 2980,
            "wires": [
                [
                    "6dca7328e396aa48"
                ]
            ]
        },
        {
            "id": "ca8abbb1c4f2b15f",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "resize",
            "data": "data/lib/ui-media/lib/images/clear.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "96",
            "parameter1Type": "num",
            "parameter2": "224",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1070,
            "y": 3620,
            "wires": [
                [
                    "a112c0ac0e1defc3"
                ]
            ]
        },
        {
            "id": "306f1de2749a4aab",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "merge",
            "data": "data/lib/ui-media/lib/screen/BACKGROUND.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "payload",
            "parameter1Type": "msg",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "0",
            "parameter3Type": "num",
            "parameter4": "BLEND_SOURCE_OVER",
            "parameter4Type": "Blend",
            "parameter5": "1.0",
            "parameter5Type": "num",
            "parameter6": "1.0",
            "parameter6Type": "num",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 6,
            "jimpFunction": "composite",
            "selectedJimpFunction": {
                "name": "composite",
                "fn": "composite",
                "description": "composites another Jimp image over this image at x, y",
                "parameters": [
                    {
                        "name": "src",
                        "type": "",
                        "required": true,
                        "hint": "the source image (a Jimp instance)",
                        "defaultType": "msg",
                        "defaultValue": "payload"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "the x position to blit the image"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "the y position to blit the image"
                    },
                    {
                        "name": "mode",
                        "group": "options",
                        "type": "blend",
                        "required": true,
                        "hint": "what blend mode to use"
                    },
                    {
                        "name": "opacitySource",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    },
                    {
                        "name": "opacityDest",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    }
                ]
            },
            "x": 1070,
            "y": 3740,
            "wires": [
                [
                    "68efa58ce3f04703"
                ]
            ]
        },
        {
            "id": "b1ebb2ca87d8265b",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/SCREEN_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1070,
            "y": 3900,
            "wires": [
                [
                    "41mjg5ixokgpuvds",
                    "9a72vq1c7agcccog"
                ]
            ]
        },
        {
            "id": "5bae2822073706cd",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "merge",
            "data": "data/lib/ui-media/lib/screen/SCREEN_LIVE.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "payload",
            "parameter1Type": "msg",
            "parameter2": "0",
            "parameter2Type": "num",
            "parameter3": "96",
            "parameter3Type": "num",
            "parameter4": "BLEND_SOURCE_OVER",
            "parameter4Type": "Blend",
            "parameter5": "1.0",
            "parameter5Type": "num",
            "parameter6": "1.0",
            "parameter6Type": "num",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 6,
            "jimpFunction": "composite",
            "selectedJimpFunction": {
                "name": "composite",
                "fn": "composite",
                "description": "composites another Jimp image over this image at x, y",
                "parameters": [
                    {
                        "name": "src",
                        "type": "",
                        "required": true,
                        "hint": "the source image (a Jimp instance)",
                        "defaultType": "msg",
                        "defaultValue": "payload"
                    },
                    {
                        "name": "x",
                        "type": "num",
                        "required": true,
                        "hint": "the x position to blit the image"
                    },
                    {
                        "name": "y",
                        "type": "num",
                        "required": true,
                        "hint": "the y position to blit the image"
                    },
                    {
                        "name": "mode",
                        "group": "options",
                        "type": "blend",
                        "required": true,
                        "hint": "what blend mode to use"
                    },
                    {
                        "name": "opacitySource",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    },
                    {
                        "name": "opacityDest",
                        "group": "options",
                        "type": "num",
                        "required": true,
                        "hint": "opacity of src image 0.0 to 1.0"
                    }
                ]
            },
            "x": 1070,
            "y": 3860,
            "wires": [
                [
                    "b1ebb2ca87d8265b"
                ]
            ]
        },
        {
            "id": "a112c0ac0e1defc3",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/BACKGROUND.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1070,
            "y": 3660,
            "wires": [
                [
                    "528020dc42902e29"
                ]
            ]
        },
        {
            "id": "528020dc42902e29",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "resize",
            "data": "data/lib/ui-media/lib/screen/LT_LIVE.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "96",
            "parameter1Type": "num",
            "parameter2": "96",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1070,
            "y": 3700,
            "wires": [
                [
                    "306f1de2749a4aab"
                ]
            ]
        },
        {
            "id": "68efa58ce3f04703",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "ret": "img",
            "parameter1": "data/lib/ui-media/lib/screen/SCREEN_LIVE.png",
            "parameter1Type": "str",
            "parameter2": "",
            "parameter2Type": "msg",
            "parameter3": "",
            "parameter3Type": "msg",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 1,
            "jimpFunction": "write",
            "selectedJimpFunction": {
                "name": "write",
                "fn": "write",
                "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "str",
                        "required": true,
                        "hint": "Name of the file",
                        "defaultType": "str"
                    }
                ]
            },
            "x": 1070,
            "y": 3780,
            "wires": [
                [
                    "9ee79500af97c6b8"
                ]
            ]
        },
        {
            "id": "9ee79500af97c6b8",
            "type": "jimp-image",
            "z": "5ab0a8a075d4c5d5",
            "name": "resize",
            "data": "data/lib/ui-media/lib/screen/LB_LIVE.png",
            "dataType": "str",
            "ret": "img",
            "parameter1": "96",
            "parameter1Type": "num",
            "parameter2": "128",
            "parameter2Type": "num",
            "parameter3": "RESIZE_BEZIER",
            "parameter3Type": "resizeMode",
            "parameter4": "",
            "parameter4Type": "msg",
            "parameter5": "",
            "parameter5Type": "msg",
            "parameter6": "",
            "parameter6Type": "msg",
            "parameter7": "",
            "parameter7Type": "msg",
            "parameter8": "",
            "parameter8Type": "msg",
            "sendProperty": "payload",
            "sendPropertyType": "msg",
            "parameterCount": 3,
            "jimpFunction": "resize",
            "selectedJimpFunction": {
                "name": "resize",
                "fn": "resize",
                "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
                "parameters": [
                    {
                        "name": "w",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "h",
                        "type": "num|auto",
                        "required": true,
                        "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                    },
                    {
                        "name": "mode",
                        "type": "resizeMode",
                        "required": false,
                        "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                    }
                ]
            },
            "x": 1070,
            "y": 3820,
            "wires": [
                [
                    "5bae2822073706cd"
                ]
            ]
        },
        {
            "id": "8318769a27994fd7",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "50",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "enabled",
                    "pt": "msg",
                    "to": "false",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 980,
            "y": 3300,
            "wires": [
                [
                    "plrhz60lnudzb60m"
                ]
            ]
        },
        {
            "id": "20061d25c2e98a94",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "50",
                    "tot": "num"
                },
                {
                    "t": "set",
                    "p": "enabled",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 980,
            "y": 3340,
            "wires": [
                [
                    "plrhz60lnudzb60m"
                ]
            ]
        },
        {
            "id": "0d1304abac1a0572",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "1",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 460,
            "y": 3240,
            "wires": [
                [
                    "20061d25c2e98a94"
                ]
            ]
        },
        {
            "id": "681d61868120515e",
            "type": "modbus-flex-connector",
            "z": "5ab0a8a075d4c5d5",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "ay0nsn138kfojd5u",
            "x": 1090,
            "y": 140,
            "wires": [
                []
            ]
        },
        {
            "id": "9b525eaf58bb83c7",
            "type": "modbus-flex-sequencer",
            "z": "5ab0a8a075d4c5d5",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "ay0nsn138kfojd5u",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 640,
            "y": 820,
            "wires": [
                [
                    "65d275bfd8f3bdd3",
                    "337acb678ca31e9d"
                ],
                []
            ]
        },
        {
            "id": "7deff143ef91670d",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "send bridge data",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"bridge.image.protocols\").filter(protocol => protocol.id.includes(\"DIGITAL\") || protocol.id.includes(\"ANALOG\") || protocol.id.includes(\"INTEGER\")).map(dataPoint => {\n    return {\n        dataPoint: dataPoint,\n        name: dataPoint.id,\n        fc: dataPoint.fc,\n        address: dataPoint.address,\n        unitid: flow.get(\"bridge.image.controller.unitId\"),\n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.type)\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 820,
            "wires": [
                [
                    "9b525eaf58bb83c7"
                ]
            ]
        },
        {
            "id": "65d275bfd8f3bdd3",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set number data point values",
            "func": "if (!msg.dataPoint.type.includes(\"bool\") || (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\")) {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": msg.dataPoint.type.includes(\"bool\"),\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.type.includes(\"bool\") ? \"bool\" : msg.dataPoint.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.offsetbit,\n            \"scale\": msg.dataPoint.scale.toString(),\n            \"mask\": msg.dataPoint.mask\n        }\n    ];\n\n    if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\" && msg.dataPoint.invert) {\n        msg.payload[0] = Math.abs(msg.payload[0] - 1)\n    }\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 900,
            "y": 820,
            "wires": [
                [
                    "02a2069cc61fe443"
                ]
            ]
        },
        {
            "id": "02a2069cc61fe443",
            "type": "buffer-parser",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1110,
            "y": 820,
            "wires": [
                [
                    "87c2ad10900e60bf"
                ]
            ]
        },
        {
            "id": "337acb678ca31e9d",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set boolean data point values",
            "func": "if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] === \"boolean\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.offsetbit];\n\n    if (msg.dataPoint.invert) {\n        payload[msg.name] = !payload[msg.name];\n    }\n\n    msg.payload = payload;\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 910,
            "y": 860,
            "wires": [
                [
                    "87c2ad10900e60bf"
                ]
            ]
        },
        {
            "id": "80814a987b4a509c",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Protocol Read",
            "links": [
                "qoxu08aqopopa2q1",
                "xwok19i87qo5abla",
                "920915ea6b4a4950"
            ],
            "x": 75,
            "y": 820,
            "wires": [
                [
                    "d6a3bcc399d04b8c"
                ]
            ]
        },
        {
            "id": "d6a3bcc399d04b8c",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 820,
            "wires": [
                [
                    "627baf42967f3ea7"
                ]
            ]
        },
        {
            "id": "87c2ad10900e60bf",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 28",
            "mode": "link",
            "links": [
                "9e69ca3112f830d6"
            ],
            "x": 1275,
            "y": 820
        },
        {
            "id": "627baf42967f3ea7",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 860,
            "wires": [
                [
                    "7deff143ef91670d"
                ]
            ]
        },
        {
            "id": "6dbb6a19c0ea6446",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "---- Update Telemetry Metrics",
            "info": "",
            "x": 120,
            "y": 980,
            "wires": []
        },
        {
            "id": "9e69ca3112f830d6",
            "type": "link in",
            "z": "5ab0a8a075d4c5d5",
            "name": "Update Telemetry Metrics",
            "links": [
                "87c2ad10900e60bf",
                "ddd01c7cfe0466f5"
            ],
            "x": 115,
            "y": 1060,
            "wires": [
                [
                    "d42dfd4532765d98"
                ]
            ]
        },
        {
            "id": "d42dfd4532765d98",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 360,
            "y": 1060,
            "wires": [
                [
                    "ecfca1b85acd064d",
                    "a6d72adf6b2df908"
                ]
            ]
        },
        {
            "id": "a6d72adf6b2df908",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 720,
            "y": 1060,
            "wires": [
                [
                    "im8ebknqf7xof209"
                ]
            ]
        },
        {
            "id": "ecfca1b85acd064d",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 720,
            "y": 1100,
            "wires": [
                [
                    "1xr3eumtgcymu5pe"
                ]
            ]
        },
        {
            "id": "93d9d51a968e5e34",
            "type": "comment",
            "z": "5ab0a8a075d4c5d5",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 760,
            "wires": []
        },
        {
            "id": "b8a1fed01840a469",
            "type": "mqtt out",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1370,
            "y": 1960,
            "wires": []
        },
        {
            "id": "31209012926b0b60",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 570,
            "y": 1940,
            "wires": [
                [
                    "4cb99e128540161a"
                ],
                [
                    "b6a1ed0e8538c6dc"
                ]
            ]
        },
        {
            "id": "222ea5349fb0ec40",
            "type": "debug",
            "z": "5ab0a8a075d4c5d5",
            "name": "Execute SPS Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1040,
            "y": 1840,
            "wires": []
        },
        {
            "id": "4cb99e128540161a",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1920,
            "wires": [
                [
                    "a9299eaebd632a9d"
                ],
                [
                    "222ea5349fb0ec40",
                    "a96b303c2256c58b"
                ]
            ]
        },
        {
            "id": "a9299eaebd632a9d",
            "type": "debug",
            "z": "5ab0a8a075d4c5d5",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1070,
            "y": 1800,
            "wires": []
        },
        {
            "id": "9304c65b967d849e",
            "type": "catch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "scope": [
                "af7a5d65221b4b94"
            ],
            "uncaught": false,
            "x": 590,
            "y": 2020,
            "wires": [
                [
                    "3079f60dea9360ec"
                ]
            ]
        },
        {
            "id": "07c0ca4870115f2d",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1960,
            "wires": [
                [
                    "b8a1fed01840a469"
                ]
            ]
        },
        {
            "id": "f88c466299ee0fdd",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1920,
            "wires": [
                [
                    "07c0ca4870115f2d"
                ]
            ]
        },
        {
            "id": "b6a1ed0e8538c6dc",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 2060,
            "wires": [
                [
                    "b8a1fed01840a469"
                ]
            ]
        },
        {
            "id": "3079f60dea9360ec",
            "type": "change",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 2020,
            "wires": [
                [
                    "b6a1ed0e8538c6dc"
                ]
            ]
        },
        {
            "id": "38d83102baf3436c",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1960,
            "wires": [
                [
                    "31209012926b0b60"
                ],
                [
                    "07c0ca4870115f2d"
                ]
            ]
        },
        {
            "id": "32a7e34d96e869c0",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "msg.payload.command.id",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "cont",
                    "v": "IMAGE",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "M",
                    "vt": "str"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 2,
            "x": 250,
            "y": 1540,
            "wires": [
                [
                    "qr0fncqywadexmze"
                ],
                [
                    "38d83102baf3436c"
                ]
            ]
        },
        {
            "id": "gsuuv49hoqfnv3ep",
            "type": "delay",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "pauseType": "rate",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": true,
            "allowrate": false,
            "outputs": 1,
            "x": 410,
            "y": 920,
            "wires": [
                [
                    "p4bap0eborhbe189"
                ]
            ]
        },
        {
            "id": "p4bap0eborhbe189",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "Round values",
            "func": "msg.payload[\"VIRTUAL-0\"] = false;\nmsg.payload[\"ANALOG-0\"] = msg.payload[\"ANALOG-0\"] / 100;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1140,
            "y": 920,
            "wires": [
                [
                    "87c2ad10900e60bf",
                    "cb66d2fa624f6d14"
                ]
            ]
        },
        {
            "id": "tu3m04utzex3vzeu",
            "type": "s7 in",
            "z": "5ab0a8a075d4c5d5",
            "endpoint": "odit6s5smqdxwghw",
            "mode": "all",
            "variable": "",
            "diff": false,
            "name": "",
            "x": 190,
            "y": 920,
            "wires": [
                [
                    "gsuuv49hoqfnv3ep"
                ]
            ]
        },
        {
            "id": "e859f6c24e6843be",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "error.source.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "cont",
                    "v": "s7 endpoint",
                    "vt": "str"
                },
                {
                    "t": "nempty"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 2,
            "x": 190,
            "y": 2260,
            "wires": [
                [
                    "566b2426fdbdda2f"
                ],
                [
                    "auchwhqdxs8my77v"
                ]
            ]
        },
        {
            "id": "cb66d2fa624f6d14",
            "type": "debug",
            "z": "5ab0a8a075d4c5d5",
            "name": "debug 7",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1380,
            "y": 960,
            "wires": []
        },
        {
            "id": "ddd01c7cfe0466f5",
            "type": "link out",
            "z": "5ab0a8a075d4c5d5",
            "name": "link out 29",
            "mode": "link",
            "links": [
                "9e69ca3112f830d6"
            ],
            "x": 455,
            "y": 2200
        },
        {
            "id": "566b2426fdbdda2f",
            "type": "function",
            "z": "5ab0a8a075d4c5d5",
            "name": "SPS Error",
            "func": "msg = {\n    payload : {}\n}\n\nmsg.payload[\"VIRTUAL-0\"] = true;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 2200,
            "wires": [
                []
            ]
        },
        {
            "id": "a96b303c2256c58b",
            "type": "switch",
            "z": "5ab0a8a075d4c5d5",
            "name": "",
            "property": "protocolCommand.id",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "M32",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M33",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M34",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M36",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M37",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M38",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M39",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M40",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M41",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M42",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M43",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "M44",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 12,
            "x": 1310,
            "y": 1840,
            "wires": [
                [
                    "7effd8d9a55708d4"
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ]
        },
        {
            "id": "7effd8d9a55708d4",
            "type": "debug",
            "z": "5ab0a8a075d4c5d5",
            "name": "debug 8",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1560,
            "y": 1820,
            "wires": []
        }
    ],
    "configs": [
        {
            "id": "mbtw3sc5eoy6falr",
            "type": "ui_group",
            "z": "5ab0a8a075d4c5d5",
            "name": "Screen Oben",
            "tab": "l2ulp6meb3z2ul38",
            "order": 1,
            "disp": true,
            "width": "10",
            "collapse": false,
            "className": ""
        },
        {
            "id": "v5fusy0gnncycq23",
            "type": "ui_group",
            "z": "5ab0a8a075d4c5d5",
            "name": "Vorschau",
            "tab": "l2ulp6meb3z2ul38",
            "order": 3,
            "disp": true,
            "width": "5",
            "collapse": false,
            "className": ""
        },
        {
            "id": "x4ot0jobpardwkm9",
            "type": "ui_group",
            "z": "5ab0a8a075d4c5d5",
            "name": "Screen Unten",
            "tab": "l2ulp6meb3z2ul38",
            "order": 2,
            "disp": true,
            "width": "10",
            "collapse": false,
            "className": ""
        },
        {
            "id": "cm07nmusspwqn6x7",
            "type": "ui_group",
            "z": "5ab0a8a075d4c5d5",
            "name": "Live",
            "tab": "l2ulp6meb3z2ul38",
            "order": 4,
            "disp": true,
            "width": "5",
            "collapse": false,
            "className": ""
        },
        {
            "id": "l2ulp6meb3z2ul38",
            "type": "ui_tab",
            "z": "5ab0a8a075d4c5d5",
            "name": "Anzeige",
            "icon": "dashboard",
            "order": 1,
            "disabled": false,
            "hidden": false
        },
        {
            "id": "dnox37ftvj6ckfgh",
            "type": "ui_base",
            "z": "5ab0a8a075d4c5d5",
            "theme": {
                "name": "theme-light",
                "lightTheme": {
                    "default": "#0094CE",
                    "baseColor": "#f70000",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                    "edited": true,
                    "reset": false
                },
                "darkTheme": {
                    "default": "#097479",
                    "baseColor": "#097479",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                    "edited": false
                },
                "customTheme": {
                    "name": "Untitled Theme 1",
                    "default": "#4B7930",
                    "baseColor": "#4B7930",
                    "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                },
                "themeState": {
                    "base-color": {
                        "default": "#0094CE",
                        "value": "#f70000",
                        "edited": true
                    },
                    "page-titlebar-backgroundColor": {
                        "value": "#f70000",
                        "edited": false
                    },
                    "page-backgroundColor": {
                        "value": "#fafafa",
                        "edited": false
                    },
                    "page-sidebar-backgroundColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "group-textColor": {
                        "value": "#ff4444",
                        "edited": false
                    },
                    "group-borderColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "group-backgroundColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "widget-textColor": {
                        "value": "#111111",
                        "edited": false
                    },
                    "widget-backgroundColor": {
                        "value": "#f70000",
                        "edited": false
                    },
                    "widget-borderColor": {
                        "value": "#ffffff",
                        "edited": false
                    },
                    "base-font": {
                        "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                    }
                },
                "angularTheme": {
                    "primary": "indigo",
                    "accents": "blue",
                    "warn": "red",
                    "background": "grey",
                    "palette": "light"
                }
            },
            "site": {
                "name": "Triopan AG",
                "hideToolbar": "false",
                "allowSwipe": "false",
                "lockMenu": "icon",
                "allowTempTheme": "true",
                "dateFormat": "DD/MM/YYYY",
                "sizes": {
                    "sx": 40,
                    "sy": 40,
                    "gx": 8,
                    "gy": 8,
                    "cx": 8,
                    "cy": 8,
                    "px": 4,
                    "py": 4
                }
            }
        },
        {
            "id": "zf0tqfugh6dk2d22",
            "type": "ui_tab",
            "z": "5ab0a8a075d4c5d5",
            "name": "Steuerung",
            "icon": "fa-cogs",
            "order": 2,
            "disabled": false,
            "hidden": false
        },
        {
            "id": "ezybspfpiqeavkvg",
            "type": "ui_group",
            "z": "5ab0a8a075d4c5d5",
            "name": "Bildschirm Konfiguration",
            "tab": "zf0tqfugh6dk2d22",
            "order": 5,
            "disp": true,
            "width": "10",
            "collapse": false,
            "className": ""
        },
        {
            "id": "ogq21m2ls2ghezxe",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 1,
            "width": 1,
            "height": 1
        },
        {
            "id": "unvskczg6nznvjqf",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 3,
            "width": 1,
            "height": 1
        },
        {
            "id": "xaz5qzqevopfxolt",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 5,
            "width": 2,
            "height": 1
        },
        {
            "id": "9pv5jtfqq7msjax0",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 6,
            "width": 1,
            "height": 1
        },
        {
            "id": "bt6lu4hykcxlqvz1",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 7,
            "width": 2,
            "height": 1
        },
        {
            "id": "1tveic8nubo9hx3i",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 8,
            "width": 1,
            "height": 1
        },
        {
            "id": "7ph9sjfoyduwop5y",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 10,
            "width": 1,
            "height": 1
        },
        {
            "id": "ogpxc3hlb6km91hj",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 12,
            "width": 2,
            "height": 1
        },
        {
            "id": "q1nhnm3qgtskpuuq",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 13,
            "width": 1,
            "height": 1
        },
        {
            "id": "tids4sbg9snyeeez",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 14,
            "width": 2,
            "height": 1
        },
        {
            "id": "sddzgu6rqci4jyf1",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 15,
            "width": 1,
            "height": 1
        },
        {
            "id": "f96t93qpxjco4r2p",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "v5fusy0gnncycq23",
            "order": 17,
            "width": 1,
            "height": 1
        },
        {
            "id": "5ru8de71giz4lf4i",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 1,
            "width": 1,
            "height": 1
        },
        {
            "id": "ujmldk7baoda7ki1",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 9,
            "width": 1,
            "height": 1
        },
        {
            "id": "kmagq49fjens7xx7",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 24,
            "width": 2,
            "height": 1
        },
        {
            "id": "q842pjais7ghjluh",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 31,
            "width": 1,
            "height": 1
        },
        {
            "id": "80f042eqpdi3j5qh",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 32,
            "width": 2,
            "height": 1
        },
        {
            "id": "nbint52lzswa4hgg",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 39,
            "width": 1,
            "height": 1
        },
        {
            "id": "zjnpk9kz5clu0eff",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 47,
            "width": 1,
            "height": 1
        },
        {
            "id": "e8syri9tdi57as0q",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 61,
            "width": 2,
            "height": 1
        },
        {
            "id": "a61fti033weixlb6",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 62,
            "width": 1,
            "height": 1
        },
        {
            "id": "t2zqs1hcx2vruqqx",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 63,
            "width": 2,
            "height": 1
        },
        {
            "id": "1n12isj2knniej43",
            "type": "ui_spacer",
            "z": "5ab0a8a075d4c5d5",
            "name": "spacer",
            "group": "cm07nmusspwqn6x7",
            "order": 64,
            "width": "5",
            "height": "1"
        },
        {
            "id": "odit6s5smqdxwghw",
            "type": "s7 endpoint",
            "z": "5ab0a8a075d4c5d5",
            "transport": "iso-on-tcp",
            "address": "192.168.1.101",
            "port": "102",
            "rack": "0",
            "slot": "2",
            "localtsaphi": "02",
            "localtsaplo": "00",
            "remotetsaphi": "02",
            "remotetsaplo": "00",
            "connmode": "tsap",
            "adapter": "",
            "busaddr": "2",
            "cycletime": "1000",
            "timeout": "5000",
            "name": "",
            "vartable": [
                {
                    "addr": "DB1,WORD1118",
                    "name": "AM1"
                },
                {
                    "addr": "DB1,WORD1119",
                    "name": "AM2"
                },
                {
                    "addr": "DB1,WORD1120",
                    "name": "AM3"
                },
                {
                    "addr": "DB1,X1105.1",
                    "name": "M10"
                },
                {
                    "addr": "DB1,X1105.2",
                    "name": "M11"
                },
                {
                    "addr": "DB1,X1105.3",
                    "name": "M12"
                },
                {
                    "addr": "DB1,X1105.4",
                    "name": "M13"
                },
                {
                    "addr": "DB1,X1105.5",
                    "name": "M14"
                },
                {
                    "addr": "DB1,X1105.6",
                    "name": "M15"
                },
                {
                    "addr": "DB1,X1105.7",
                    "name": "M16"
                },
                {
                    "addr": "DB1,X1106.0",
                    "name": "M17"
                },
                {
                    "addr": "DB1,X1106.1",
                    "name": "M18"
                },
                {
                    "addr": "DB1,X1106.2",
                    "name": "M19"
                },
                {
                    "addr": "DB1,X1106.3",
                    "name": "M20"
                }
            ]
        }
    ]
}