{
    "id": "a51495243d507bef",
    "label": "65d7224130a69205eb45fdc3",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "8bfcnrs1y4tocsks",
            "type": "mqtt out",
            "z": "a51495243d507bef",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 780,
            "wires": []
        },
        {
            "id": "02zua250g9qxwagp",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "dl7qrmz5z46h6yj9"
                ]
            ]
        },
        {
            "id": "dl7qrmz5z46h6yj9",
            "type": "getflows",
            "z": "a51495243d507bef",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "9kw8880q1d4u4gn9"
                ]
            ]
        },
        {
            "id": "9kw8880q1d4u4gn9",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "xytezcclek2uu4ko"
                ]
            ]
        },
        {
            "id": "a0i2p8kh02eeijn5",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "send bridge data",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"bridge.image.protocols\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint,\n        name: dataPoint.id,\n        fc: dataPoint.fc,\n        address: dataPoint.address,\n        unitid: flow.get(\"bridge.image.controller.unitId\"),\n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.type)\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 480,
            "wires": [
                []
            ]
        },
        {
            "id": "kkne7xpvmsiwdz6y",
            "type": "comment",
            "z": "a51495243d507bef",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1020,
            "wires": []
        },
        {
            "id": "elnz9639en2t9vqz",
            "type": "comment",
            "z": "a51495243d507bef",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "xytezcclek2uu4ko",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "ksup5sxxr5v9elt2"
                ]
            ]
        },
        {
            "id": "9l3k1ckufqj5d3s5",
            "type": "comment",
            "z": "a51495243d507bef",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 360,
            "wires": []
        },
        {
            "id": "jwl514skrecpbim5",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Set number data point values",
            "func": "if (!msg.dataPoint.type.includes(\"bool\") || (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\")) {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": msg.dataPoint.type.includes(\"bool\"),\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.type.includes(\"bool\") ? \"bool\" : msg.dataPoint.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.offsetbit,\n            \"scale\": msg.dataPoint.scale.toString(),\n            \"mask\": msg.dataPoint.mask\n        }\n    ];\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 900,
            "y": 480,
            "wires": [
                [
                    "xv48xcuwln47r309"
                ]
            ]
        },
        {
            "id": "xv48xcuwln47r309",
            "type": "buffer-parser",
            "z": "a51495243d507bef",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1110,
            "y": 480,
            "wires": [
                [
                    "qr37h3i07kn3n1rr"
                ]
            ]
        },
        {
            "id": "gbslf3jga0g2gysy",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "9ua2bq9cfhlhyjfu"
                ]
            ]
        },
        {
            "id": "l4g2yysbv030l9zu",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Set boolean data point values",
            "func": "if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] === \"boolean\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.offsetbit];\n    msg.payload = payload;\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 910,
            "y": 520,
            "wires": [
                [
                    "qr37h3i07kn3n1rr"
                ]
            ]
        },
        {
            "id": "wel7dq9ux78lrsxw",
            "type": "delay",
            "z": "a51495243d507bef",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1320,
            "y": 1180,
            "wires": [
                [
                    "8bfcnrs1y4tocsks"
                ]
            ]
        },
        {
            "id": "putqr4to39tlbejx",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 780,
            "wires": [
                [
                    "8bfcnrs1y4tocsks"
                ]
            ]
        },
        {
            "id": "ksup5sxxr5v9elt2",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "8ytk5xm4c4zxhvnq",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 740,
            "wires": [
                [
                    "tegpd5k76dx7276b"
                ]
            ]
        },
        {
            "id": "tegpd5k76dx7276b",
            "type": "mqtt out",
            "z": "a51495243d507bef",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 720,
            "wires": []
        },
        {
            "id": "4ob0yvv2t7n25c96",
            "type": "comment",
            "z": "a51495243d507bef",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "9ua2bq9cfhlhyjfu",
            "type": "link out",
            "z": "a51495243d507bef",
            "name": "link out 14",
            "mode": "link",
            "links": [
                "23gxn86y3qo5k6uh",
                "lmv8uc3prs4dulol"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "23gxn86y3qo5k6uh",
            "type": "link in",
            "z": "a51495243d507bef",
            "name": "Protocol Read",
            "links": [
                "9ua2bq9cfhlhyjfu",
                "79tc6iikarcz45k8"
            ],
            "x": 75,
            "y": 480,
            "wires": [
                [
                    "eqfh4prsb6v0tc89"
                ]
            ]
        },
        {
            "id": "eqfh4prsb6v0tc89",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 480,
            "wires": [
                [
                    "rdw4dga2k5hk39qi"
                ]
            ]
        },
        {
            "id": "79tc6iikarcz45k8",
            "type": "link out",
            "z": "a51495243d507bef",
            "name": "link out 15",
            "mode": "link",
            "links": [
                "23gxn86y3qo5k6uh"
            ],
            "x": 1275,
            "y": 1140
        },
        {
            "id": "lmv8uc3prs4dulol",
            "type": "link in",
            "z": "a51495243d507bef",
            "name": "Virtual Read",
            "links": [
                "9ua2bq9cfhlhyjfu"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "mcvzifg8mgse031f"
                ]
            ]
        },
        {
            "id": "mcvzifg8mgse031f",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "zewddyx5efmclpil"
                ]
            ]
        },
        {
            "id": "61al0zy9km2oz094",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nconst executor = (metricId, func, parameterIds) => {\n    msg.payload[metricId] = eval(\"(\" + func + \")\")(...parameterIds.map(x => flow.get(\"bridge.image.metrics\")[x]))\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        if (functions.hasOwnProperty(calc.func)){\n            functions[calc.func](sequence.dataPoint.id, calc.ids)\n        } else {\n            executor(sequence.dataPoint.id, calc.func, calc.ids);\n        }\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "7uz1v810hwt4klzu"
                ]
            ]
        },
        {
            "id": "5htygxuz2pjar5bm",
            "type": "comment",
            "z": "a51495243d507bef",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 640,
            "wires": []
        },
        {
            "id": "5ac72aga0k5om8vd",
            "type": "link in",
            "z": "a51495243d507bef",
            "name": "Update Metrics",
            "links": [
                "7uz1v810hwt4klzu",
                "qr37h3i07kn3n1rr"
            ],
            "x": 75,
            "y": 740,
            "wires": [
                [
                    "qsb6oiqmxigzz5v0"
                ]
            ]
        },
        {
            "id": "qsb6oiqmxigzz5v0",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 320,
            "y": 740,
            "wires": [
                [
                    "putqr4to39tlbejx",
                    "8ytk5xm4c4zxhvnq"
                ]
            ]
        },
        {
            "id": "qr37h3i07kn3n1rr",
            "type": "link out",
            "z": "a51495243d507bef",
            "name": "link out 17",
            "mode": "link",
            "links": [
                "5ac72aga0k5om8vd"
            ],
            "x": 1275,
            "y": 480
        },
        {
            "id": "w893i8k9tn2krao8",
            "type": "flogger",
            "z": "a51495243d507bef",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 1520,
            "wires": [
                []
            ]
        },
        {
            "id": "cojfiqccjh3tc73s",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 1520,
            "wires": [
                [
                    "jj5g9fsxcguvdqvt"
                ]
            ]
        },
        {
            "id": "4u4cytazfadygzlb",
            "type": "catch",
            "z": "a51495243d507bef",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1520,
            "wires": [
                [
                    "cojfiqccjh3tc73s"
                ]
            ]
        },
        {
            "id": "jj5g9fsxcguvdqvt",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1520,
            "wires": [
                [
                    "w893i8k9tn2krao8"
                ]
            ]
        },
        {
            "id": "7uz1v810hwt4klzu",
            "type": "link out",
            "z": "a51495243d507bef",
            "name": "link out 16",
            "mode": "link",
            "links": [
                "5ac72aga0k5om8vd"
            ],
            "x": 1275,
            "y": 260
        },
        {
            "id": "ohgtnix3z6hikbbd",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "61al0zy9km2oz094"
                ]
            ]
        },
        {
            "id": "zewddyx5efmclpil",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "ohgtnix3z6hikbbd"
                ]
            ]
        },
        {
            "id": "rdw4dga2k5hk39qi",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 520,
            "wires": [
                [
                    "a0i2p8kh02eeijn5"
                ]
            ]
        },
        {
            "id": "10elx4q1ki0tupfi",
            "type": "mqtt in",
            "z": "a51495243d507bef",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 110,
            "y": 1260,
            "wires": [
                [
                    "0lkf39hj9xei14hr"
                ]
            ]
        },
        {
            "id": "121k6mfzxdczks2g",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 110,
            "y": 1080,
            "wires": [
                [
                    "ttucwp8dbvxwo63a"
                ]
            ]
        },
        {
            "id": "a896fo32jo9h2s7e",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 290,
            "y": 1200,
            "wires": [
                [
                    "10elx4q1ki0tupfi"
                ]
            ]
        },
        {
            "id": "ttucwp8dbvxwo63a",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 1140,
            "wires": [
                [
                    "m685l6evk932tuwg"
                ],
                [
                    "a896fo32jo9h2s7e"
                ]
            ]
        },
        {
            "id": "m685l6evk932tuwg",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 310,
            "y": 1140,
            "wires": []
        },
        {
            "id": "0lkf39hj9xei14hr",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1260,
            "wires": [
                [
                    "alhc3poep2tdnxsf"
                ],
                [
                    "wp659m0msozl21z3"
                ]
            ]
        },
        {
            "id": "luiiu9xrj97917b4",
            "type": "mqtt out",
            "z": "a51495243d507bef",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1370,
            "y": 1260,
            "wires": []
        },
        {
            "id": "alhc3poep2tdnxsf",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 570,
            "y": 1240,
            "wires": [
                [
                    "7mi9eyxtvrbgu4qe"
                ],
                [
                    "0gwp9j2inw6kft4z"
                ]
            ]
        },
        {
            "id": "pkm5r33l3rhzamtz",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "Execute Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1020,
            "y": 1120,
            "wires": []
        },
        {
            "id": "7mi9eyxtvrbgu4qe",
            "type": "switch",
            "z": "a51495243d507bef",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1220,
            "wires": [
                [
                    "t2q0jw7n0nqmk02g"
                ],
                [
                    "pkm5r33l3rhzamtz"
                ]
            ]
        },
        {
            "id": "t2q0jw7n0nqmk02g",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1070,
            "y": 1080,
            "wires": []
        },
        {
            "id": "abe4n8b6mvvkdsra",
            "type": "comment",
            "z": "a51495243d507bef",
            "name": "---- Handle errors",
            "info": "",
            "x": 80,
            "y": 1480,
            "wires": []
        },
        {
            "id": "ce3y0xg9mvf2ngz4",
            "type": "catch",
            "z": "a51495243d507bef",
            "name": "",
            "scope": [
                "3v8asazcjzcmssk3"
            ],
            "uncaught": false,
            "x": 590,
            "y": 1320,
            "wires": [
                [
                    "djwm2fkcs6we3sq8"
                ]
            ]
        },
        {
            "id": "wp659m0msozl21z3",
            "type": "delay",
            "z": "a51495243d507bef",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1260,
            "wires": [
                [
                    "luiiu9xrj97917b4"
                ]
            ]
        },
        {
            "id": "kkesvq99nyxgemlt",
            "type": "change",
            "z": "a51495243d507bef",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1220,
            "wires": [
                [
                    "wp659m0msozl21z3"
                ]
            ]
        },
        {
            "id": "0gwp9j2inw6kft4z",
            "type": "delay",
            "z": "a51495243d507bef",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1360,
            "wires": [
                [
                    "luiiu9xrj97917b4"
                ]
            ]
        },
        {
            "id": "djwm2fkcs6we3sq8",
            "type": "change",
            "z": "a51495243d507bef",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1320,
            "wires": [
                [
                    "0gwp9j2inw6kft4z"
                ]
            ]
        },
        {
            "id": "1b15b9eb8d4e859f",
            "type": "read-object-properties",
            "z": "a51495243d507bef",
            "name": "",
            "x": 720,
            "y": 1840,
            "wires": [
                [
                    "63de82d1703dcede",
                    "98756e5bb72a3685"
                ]
            ]
        },
        {
            "id": "f2ab79c87df39de3",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Inject Id + Type + Properties",
            "func": "msg.deviceId = 99;\nmsg.address = \"192.168.1.222\";\nmsg.inputType = 5;\nmsg.bacnetID = 22;\n\nconst bacnetProperties = [\n  { id: 77 }, // OBJECT_NAME\n // { id: 79 }, // OBJECT_TYPE OR INPUT TYPE\n  { id: 85 }, // PRESENT_VALUE\n];\n\n\nconst requestArray = [\n  { objectId: { type: msg.inputType, instance: msg.bacnetID }, properties: bacnetProperties }\n];\n\nmsg.requestArray = requestArray        \n        \nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 400,
            "y": 1840,
            "wires": [
                [
                    "1b15b9eb8d4e859f"
                ]
            ]
        },
        {
            "id": "a8a816e74c2d2519",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 1840,
            "wires": [
                [
                    "f2ab79c87df39de3"
                ]
            ]
        },
        {
            "id": "63de82d1703dcede",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "debug 27",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1080,
            "y": 1840,
            "wires": []
        },
        {
            "id": "98756e5bb72a3685",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Data Transformation",
            "func": "var object = msg.payload;\n\nvar myArray = {};\n\nmyArray[\"BacnetID\"] = msg.bacnetID;\nmyArray[\"InputType\"] = msg.inputType;\n\n\nfor(var j = 0; j < object.values[0].values.length; j++){\n    \n    \n    \n    var k1 = object.values[0].values[j].id.toString();\n    \n    //str = str + k1 + \" ----- \";\n    \n    var v1 = object.values[0].values[j].value[0].value;\n    \n    var k1str = ConvertPropertyIdWithString(k1);\n    \n    myArray[k1str] = v1;\n    \n}\n\n\n//msg.payload = str;\n\nmsg.payload = myArray;\n\nreturn msg;\n\n\n\nfunction ConvertPropertyIdWithString(id){\n    \n    var convertedValue = \" PPPP \";\n    \n    if(id == 0){\n        convertedValue = \"ACKED_TRANSITIONS\";\n    }\n    \n    else if(id == 4){\n        convertedValue = \"ACTIVE_TEXT\";\n    }\n    \n    else if(id == 6){\n        convertedValue = \"ALARM_VALUE\";\n    }\n    \n    else if(id == 15){\n        convertedValue = \"CHANGE_OF_STATE_COUNT\";\n    }\n    \n    else if(id == 16){\n        convertedValue = \"CHANGE_OF _STATE_TIME\";\n    }\n    \n    else if(id == 17){\n        convertedValue = \"NOTIFICATION_CLASS\";\n    }\n    \n    else if(id == 22){\n        convertedValue = \"COV_INCREMENT\";\n    }\n\n    else if(id == 25){\n        convertedValue = \"DEADBAND\";\n    }\n\n    else if(id == 28){\n        convertedValue = \"DESCRIPTION\";\n    }\n    \n    else if(id == 31){\n        convertedValue = \"DEVICE_TYPE\";\n    }\n    \n    else if(id == 33){\n        convertedValue = \"ELAPSED_ACTIVE_TIME\";\n    }\n    \n    else if(id == 35){\n        convertedValue = \"EVENT_ENABLE\";\n    }\n    \n    else if(id == 36){\n        convertedValue = \"EVENT_STATE\";\n    }\n\n    else if(id == 45){\n        convertedValue = \"HIGH_LIMIT\";\n    }\n    \n    else if(id == 46){\n        convertedValue = \"INACTIVE_TEXT\";\n    }\n\n    else if(id == 52){\n        convertedValue = \"LIMIT_ENABLE\";\n    }\n\n    else if(id == 59){\n        convertedValue = \"LOW_LIMIT\";\n    }\n\n    else if(id == 65){\n        convertedValue = \"MAX_PRES_VALUE\";\n    }\n\n    else if(id == 69){\n        convertedValue = \"MIN_PRES_VALUE\";\n    }\n    \n    else if(id == 72){\n        convertedValue = \"NOTIFY_TYPE\";\n    }\n    \n    else if(id == 75){\n        convertedValue = \"OBJECT_IDENTIFIER\";\n    }\n    \n    else if(id == 77){\n        convertedValue = \"OBJECT_NAME\";\n    }\n    \n    else if(id == 79){\n        convertedValue = \"OBJECT_TYPE\";\n    }\n    \n    else if(id == 81){\n        convertedValue = \"OUT_OF_SERVICE\";\n    }\n    \n    else if(id == 84){\n        convertedValue = \"POLARITY\";\n    }\n    \n    else if(id == 85){\n        convertedValue = \"PRESENT_VALUE\";\n    }\n    \n    else if(id == 103){\n        convertedValue = \"RELIABILITY\";\n    }\n\n    else if(id == 106){\n        convertedValue = \"RESOLUTION\";\n    }\n    \n    else if(id == 111){\n        convertedValue = \"STATUS_FLAGS\";\n    }\n    \n    else if(id == 113){\n        convertedValue = \"TIME_DELAY\";\n    }\n    \n    else if(id == 114){\n        convertedValue = \"TIME_OF_ACTIVE_TIME_RESET\";\n    }\n    \n    else if(id == 115){\n        convertedValue = \"TIME_OF_STATE_COUNT_RESET\";\n    }\n\n    else if(id == 117){\n        convertedValue = \"UNITS\";\n    }\n\n    else if(id == 118){\n        convertedValue = \"UPDATE_INTERVAL\";\n    }\n    \n    else if(id == 130){\n        convertedValue = \"EVENT_TIME_STAMPS\";\n    }\n    \n    else if(id == 351){\n        convertedValue = \"EVENT_MESSAGE_TEXTS\";\n    }\n    \n    else if(id == 352){\n        convertedValue = \"EVENT_MESSAGE_TEXTS_CONFIGS\";\n    }\n    \n    else if(id == 353){\n        convertedValue = \"EVENT_DETECTION_ENABLE\";\n    }\n    \n    else if(id == 354){\n        convertedValue = \"EVENT_ALGORITHM_INHIBIT\";\n    }\n    \n    else if(id == 355){\n        convertedValue = \"EVENT_ALGORITHM_INHIBIT_REF\";\n    }\n    \n    else if(id == 356){\n        convertedValue = \"TIME_DELAY_NORMAL\";\n    }\n    \n    return convertedValue;\n    \n    \n}",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 880,
            "y": 1940,
            "wires": [
                [
                    "3b068278ea802094"
                ]
            ]
        },
        {
            "id": "3b068278ea802094",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "debug 28",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1080,
            "y": 1940,
            "wires": []
        },
        {
            "id": "0v0fphxvjbbveqli",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "debug 4",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 680,
            "y": 1700,
            "wires": []
        },
        {
            "id": "qc0aaj15qg0girih",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 1700,
            "wires": [
                [
                    "1mnl7hbpz93gtjqw"
                ]
            ]
        },
        {
            "id": "1mnl7hbpz93gtjqw",
            "type": "BACnet-Command",
            "z": "a51495243d507bef",
            "name": "1",
            "commandType": "whoIs",
            "timeDuration": 0,
            "enableDisable": 0,
            "deviceState": 0,
            "isUtc": true,
            "lowLimit": 0,
            "highLimit": 0,
            "device": "cuxd5uhceljnm9yd",
            "server": "thkthh9g3ed7ms9v",
            "x": 290,
            "y": 1700,
            "wires": [
                [
                    "0v0fphxvjbbveqli"
                ]
            ]
        },
        {
            "id": "4494f2fbdd6bcf29",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 2160,
            "wires": [
                [
                    "4fb6bf9552d1c542"
                ]
            ]
        },
        {
            "id": "4fb6bf9552d1c542",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Inject Parameters",
            "func": "// var randNum = Math.floor(Math.random() * 5100);\n// msg.communicationPort = 47809 + randNum;\n// msg.interface = '0.0.0.0';\n// msg.broadcastAddress = '255.255.255.255';\n// msg.apduTimeout = 3000;\n// msg.reuseAddr = true;\n// msg.transportClosedDuration = 90000;\n//msg.getAllPropertiesManually = \"true\";\n\nmsg.deviceId = 99;\nmsg.address = \"192.168.1.222\";\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 370,
            "y": 2160,
            "wires": [
                [
                    "ede5e2d97a9ff630"
                ]
            ]
        },
        {
            "id": "177ff63bf3091b0f",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "debug 22",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 860,
            "y": 2160,
            "wires": []
        },
        {
            "id": "ede5e2d97a9ff630",
            "type": "read-single-device",
            "z": "a51495243d507bef",
            "name": "",
            "x": 610,
            "y": 2160,
            "wires": [
                [
                    "177ff63bf3091b0f"
                ]
            ]
        },
        {
            "id": "3ed9cb3c68c88c50",
            "type": "read-single-point",
            "z": "a51495243d507bef",
            "name": "",
            "x": 610,
            "y": 2220,
            "wires": [
                [
                    "56dcc0c93d7edcc8"
                ]
            ]
        },
        {
            "id": "dfdf9cfae6db316a",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 2220,
            "wires": [
                [
                    "8b01e8719e4d6d6b"
                ]
            ]
        },
        {
            "id": "8b01e8719e4d6d6b",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Inject Parameters",
            "func": "// msg.communicationPort = 47811;\n// msg.interface = '0.0.0.0';\n// msg.broadcastAddress = '255.255.255.255';\n// msg.apduTimeout = 4000;\n// msg.reuseAddr = true;\n\n \n// msg.transportClosedDuration = 9000;\n\n\n// msg.inputType = 2;\n// msg.bacnetId = 103;\n// msg.address = \"192.168.10.52\";\n\nmsg.inputType = 2;\nmsg.bacnetId = 26;\nmsg.address = \"192.168.10.50\";\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 370,
            "y": 2220,
            "wires": [
                [
                    "3ed9cb3c68c88c50"
                ]
            ]
        },
        {
            "id": "56dcc0c93d7edcc8",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "debug 23",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 860,
            "y": 2220,
            "wires": []
        },
        {
            "id": "d4e184b3ed27c65c",
            "type": "read-objects-list-within-device",
            "z": "a51495243d507bef",
            "name": "",
            "x": 730,
            "y": 2280,
            "wires": [
                [
                    "e2c2a2fd6e536531"
                ]
            ]
        },
        {
            "id": "5515866ca25b964a",
            "type": "read-object-properties",
            "z": "a51495243d507bef",
            "name": "",
            "x": 720,
            "y": 2340,
            "wires": [
                [
                    "bf874e495e86a417"
                ]
            ]
        },
        {
            "id": "42ba49ea2bb49724",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 2280,
            "wires": [
                [
                    "d881f01805f8f779"
                ]
            ]
        },
        {
            "id": "d881f01805f8f779",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Inject Device Id and Address",
            "func": "msg.deviceId = 99;\nmsg.address = \"192.168.1.222\";\n\n//msg.communicationPort = 47808;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 400,
            "y": 2280,
            "wires": [
                [
                    "d4e184b3ed27c65c"
                ]
            ]
        },
        {
            "id": "e2c2a2fd6e536531",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "debug 24",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1000,
            "y": 2280,
            "wires": []
        },
        {
            "id": "f53d617dd251dd64",
            "type": "function",
            "z": "a51495243d507bef",
            "name": "Inject Id + Type + Properties",
            "func": "msg.deviceId = 99;\nmsg.address = \"192.168.1.222\";\nmsg.inputType = 5;\nmsg.bacnetID = 22;\n\nconst bacnetProperties = [\n  { id: 77 }, // OBJECT_NAME\n // { id: 79 }, // OBJECT_TYPE OR INPUT TYPE\n  { id: 85 }, // PRESENT_VALUE\n];\n\n\nconst requestArray = [\n  { objectId: { type: msg.inputType, instance: msg.bacnetID }, properties: bacnetProperties }\n];\n\nmsg.requestArray = requestArray        \n        \nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 400,
            "y": 2340,
            "wires": [
                [
                    "5515866ca25b964a"
                ]
            ]
        },
        {
            "id": "d8d1549a7fbecea0",
            "type": "inject",
            "z": "a51495243d507bef",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 2340,
            "wires": [
                [
                    "f53d617dd251dd64"
                ]
            ]
        },
        {
            "id": "bf874e495e86a417",
            "type": "debug",
            "z": "a51495243d507bef",
            "name": "debug 25",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 960,
            "y": 2340,
            "wires": []
        }
    ],
    "configs": [
        {
            "id": "cuxd5uhceljnm9yd",
            "type": "BACnet-Device",
            "z": "a51495243d507bef",
            "name": "C-Bus Gateway",
            "deviceAddress": "192.168.1.222"
        },
        {
            "id": "thkthh9g3ed7ms9v",
            "type": "BACnet-Client",
            "z": "a51495243d507bef",
            "name": "C-Bus Gateway Client",
            "adpuTimeout": "6000",
            "port": "47808",
            "interface": "192.168.1.222",
            "broadcastAddress": "192.168.1.255"
        },
        {
            "id": "0ej5nk3u852eja5o",
            "type": "modbus-client",
            "z": "a51495243d507bef",
            "name": "Flexible Channel",
            "clienttype": "tcp",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "127.0.0.1",
            "tcpPort": "10502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "9600",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "1",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": true,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}