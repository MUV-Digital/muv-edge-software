{
    "id": "d4386007cbf280b2",
    "label": "123123123123",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "0jmh8uk39u74rcn8",
            "type": "mqtt out",
            "z": "d4386007cbf280b2",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 780,
            "wires": []
        },
        {
            "id": "q2j7d1efdefoix5z",
            "type": "inject",
            "z": "d4386007cbf280b2",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "e6e2ycyn24frzxwx"
                ]
            ]
        },
        {
            "id": "e6e2ycyn24frzxwx",
            "type": "getflows",
            "z": "d4386007cbf280b2",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "u4hm2qoq6lzsuya6"
                ]
            ]
        },
        {
            "id": "u4hm2qoq6lzsuya6",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "tljofvve9m1i5igx"
                ]
            ]
        },
        {
            "id": "9pc6soh2nw2fupia",
            "type": "comment",
            "z": "d4386007cbf280b2",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1020,
            "wires": []
        },
        {
            "id": "p35iy8hfje1p0r5z",
            "type": "comment",
            "z": "d4386007cbf280b2",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "tljofvve9m1i5igx",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "38d55uqnqb7wydov"
                ]
            ]
        },
        {
            "id": "aw0wh29up58cmrtu",
            "type": "comment",
            "z": "d4386007cbf280b2",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 360,
            "wires": []
        },
        {
            "id": "584m1sjfn44bz3ew",
            "type": "inject",
            "z": "d4386007cbf280b2",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "60",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "8ilsiu67lnzxxe4f"
                ]
            ]
        },
        {
            "id": "1oyqpr8b4pss142r",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Set data point values",
            "func": "var bacnetPoints = []\nvar dataPointvalues = { \"payload\": {} };\n\nmsg.payload.forEach(point => {\n    if (point.pointName !== undefined && point.value !== undefined) {\n        bacnetPoints.push({ \"id\": point.pointName, \"value\": point.value });\n    }\n});\n\nflow.get(\"bridge.image.protocols\").map(dataPoint => {\n    let bacnetPoint = bacnetPoints.find(element => element.id === dataPoint.id);\n    if (bacnetPoint && dataPoint.topic.includes(\"bool\")) {\n        dataPointvalues.payload[dataPoint.id] = bacnetPoint.value === 1;\n    } else if (bacnetPoint) {\n        dataPointvalues.payload[dataPoint.id] = bacnetPoint.value;\n    }\n});\n\nreturn dataPointvalues;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 820,
            "y": 520,
            "wires": [
                [
                    "m2tcm1ph4xlz1pl3"
                ]
            ]
        },
        {
            "id": "huvomui020n4p0ts",
            "type": "delay",
            "z": "d4386007cbf280b2",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1320,
            "y": 1180,
            "wires": [
                [
                    "0jmh8uk39u74rcn8"
                ]
            ]
        },
        {
            "id": "6mfoqhsrxneap13p",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 780,
            "wires": [
                [
                    "0jmh8uk39u74rcn8"
                ]
            ]
        },
        {
            "id": "38d55uqnqb7wydov",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "tbuwt1tg7fc7mncq",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 740,
            "wires": [
                [
                    "k4l2zmbw8ryt02or"
                ]
            ]
        },
        {
            "id": "k4l2zmbw8ryt02or",
            "type": "mqtt out",
            "z": "d4386007cbf280b2",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 720,
            "wires": []
        },
        {
            "id": "4y8ev2ocgkn1nlbn",
            "type": "comment",
            "z": "d4386007cbf280b2",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "8ilsiu67lnzxxe4f",
            "type": "link out",
            "z": "d4386007cbf280b2",
            "name": "link out 14",
            "mode": "link",
            "links": [
                "gve13p3kkyk48y5z",
                "zx8v2ot8snboy3c1"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "gve13p3kkyk48y5z",
            "type": "link in",
            "z": "d4386007cbf280b2",
            "name": "Protocol Read",
            "links": [
                "8ilsiu67lnzxxe4f",
                "18hrcx86akwfw0o1"
            ],
            "x": 75,
            "y": 480,
            "wires": [
                [
                    "2eprspy9qtwslp67"
                ]
            ]
        },
        {
            "id": "2eprspy9qtwslp67",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 480,
            "wires": [
                [
                    "rnwbugsb81mohd30"
                ]
            ]
        },
        {
            "id": "18hrcx86akwfw0o1",
            "type": "link out",
            "z": "d4386007cbf280b2",
            "name": "link out 15",
            "mode": "link",
            "links": [
                "gve13p3kkyk48y5z"
            ],
            "x": 1275,
            "y": 1140
        },
        {
            "id": "zx8v2ot8snboy3c1",
            "type": "link in",
            "z": "d4386007cbf280b2",
            "name": "Virtual Read",
            "links": [
                "8ilsiu67lnzxxe4f"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "oxtyrk82qwfb3nrn"
                ]
            ]
        },
        {
            "id": "oxtyrk82qwfb3nrn",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "qcz0vdggf7tg2xpq"
                ]
            ]
        },
        {
            "id": "zbr6ficgt36bkjes",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nconst executor = (metricId, func, parameterIds) => {\n    msg.payload[metricId] = eval(\"(\" + func + \")\")(...parameterIds.map(x => flow.get(\"bridge.image.metrics\")[x]))\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        if (functions.hasOwnProperty(calc.func)){\n            functions[calc.func](sequence.dataPoint.id, calc.ids)\n        } else {\n            executor(sequence.dataPoint.id, calc.func, calc.ids);\n        }\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "il2y5i687l9yargj"
                ]
            ]
        },
        {
            "id": "5um1wt18o39kp5ns",
            "type": "comment",
            "z": "d4386007cbf280b2",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 640,
            "wires": []
        },
        {
            "id": "5ixvlc6khlbs0mm2",
            "type": "link in",
            "z": "d4386007cbf280b2",
            "name": "Update Metrics",
            "links": [
                "m2tcm1ph4xlz1pl3",
                "904fe2b07f50ce47"
            ],
            "x": 75,
            "y": 740,
            "wires": [
                [
                    "19ukayj6cgjvguq8"
                ]
            ]
        },
        {
            "id": "19ukayj6cgjvguq8",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Set multiple sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (flow.get(\"bridge.image.protocols\").find(element => element.id === propertyName).topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (flow.get(\"bridge.image.protocols\").find(element => element.id === propertyName).topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 340,
            "y": 740,
            "wires": [
                [
                    "6mfoqhsrxneap13p",
                    "tbuwt1tg7fc7mncq"
                ]
            ]
        },
        {
            "id": "m2tcm1ph4xlz1pl3",
            "type": "link out",
            "z": "d4386007cbf280b2",
            "name": "link out 17",
            "mode": "link",
            "links": [
                "5ixvlc6khlbs0mm2"
            ],
            "x": 1275,
            "y": 520
        },
        {
            "id": "lrosih2ux76vipr5",
            "type": "flogger",
            "z": "d4386007cbf280b2",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 1520,
            "wires": [
                []
            ]
        },
        {
            "id": "92q6jlut3dvr8p0d",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 1520,
            "wires": [
                [
                    "7bqslheqosk2nimk"
                ]
            ]
        },
        {
            "id": "2hcqblwk8n3pt0kq",
            "type": "catch",
            "z": "d4386007cbf280b2",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1520,
            "wires": [
                [
                    "92q6jlut3dvr8p0d"
                ]
            ]
        },
        {
            "id": "7bqslheqosk2nimk",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1520,
            "wires": [
                [
                    "lrosih2ux76vipr5"
                ]
            ]
        },
        {
            "id": "il2y5i687l9yargj",
            "type": "link out",
            "z": "d4386007cbf280b2",
            "name": "link out 16",
            "mode": "link",
            "links": [
                "abm4nmogpi87nvay"
            ],
            "x": 1275,
            "y": 260
        },
        {
            "id": "eh1xg0m2ah78nxlk",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "zbr6ficgt36bkjes"
                ]
            ]
        },
        {
            "id": "qcz0vdggf7tg2xpq",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "eh1xg0m2ah78nxlk"
                ]
            ]
        },
        {
            "id": "rnwbugsb81mohd30",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 520,
            "wires": [
                [
                    "c5jtvrn31mxltp9t"
                ]
            ]
        },
        {
            "id": "qytsxpunuht33u39",
            "type": "mqtt in",
            "z": "d4386007cbf280b2",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 110,
            "y": 1260,
            "wires": [
                [
                    "7b0899pk7fgk44w8"
                ]
            ]
        },
        {
            "id": "lquvhyj4mxlke393",
            "type": "inject",
            "z": "d4386007cbf280b2",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 110,
            "y": 1080,
            "wires": [
                [
                    "x8bpuucphy6vdu6n"
                ]
            ]
        },
        {
            "id": "i3hk4fjwiyw6dypv",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 290,
            "y": 1200,
            "wires": [
                [
                    "qytsxpunuht33u39"
                ]
            ]
        },
        {
            "id": "x8bpuucphy6vdu6n",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 1140,
            "wires": [
                [
                    "pluq0vfab5n5i8c0"
                ],
                [
                    "i3hk4fjwiyw6dypv"
                ]
            ]
        },
        {
            "id": "pluq0vfab5n5i8c0",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 310,
            "y": 1140,
            "wires": []
        },
        {
            "id": "7b0899pk7fgk44w8",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1260,
            "wires": [
                [
                    "s20aixiokwqq056a"
                ],
                [
                    "wq5l6gz5g67ug90r"
                ]
            ]
        },
        {
            "id": "dvk7ulf0ieauw4gx",
            "type": "mqtt out",
            "z": "d4386007cbf280b2",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1370,
            "y": 1260,
            "wires": []
        },
        {
            "id": "s20aixiokwqq056a",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 570,
            "y": 1240,
            "wires": [
                [
                    "waym8gte62eqvrd0"
                ],
                [
                    "28wucrtsdxr6zx3q"
                ]
            ]
        },
        {
            "id": "fqvxk0p1gjm14eqn",
            "type": "debug",
            "z": "d4386007cbf280b2",
            "name": "Execute Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1020,
            "y": 1120,
            "wires": []
        },
        {
            "id": "waym8gte62eqvrd0",
            "type": "switch",
            "z": "d4386007cbf280b2",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1220,
            "wires": [
                [
                    "940jcxrsw5s6jupo"
                ],
                [
                    "fqvxk0p1gjm14eqn"
                ]
            ]
        },
        {
            "id": "940jcxrsw5s6jupo",
            "type": "debug",
            "z": "d4386007cbf280b2",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1070,
            "y": 1080,
            "wires": []
        },
        {
            "id": "6rkuyld0mj6mxba3",
            "type": "comment",
            "z": "d4386007cbf280b2",
            "name": "---- Handle errors",
            "info": "",
            "x": 80,
            "y": 1480,
            "wires": []
        },
        {
            "id": "wfh3lff87jevip2g",
            "type": "catch",
            "z": "d4386007cbf280b2",
            "name": "",
            "scope": [
                "3v8asazcjzcmssk3"
            ],
            "uncaught": false,
            "x": 590,
            "y": 1320,
            "wires": [
                [
                    "suep5tybs4f1nk7n"
                ]
            ]
        },
        {
            "id": "wq5l6gz5g67ug90r",
            "type": "delay",
            "z": "d4386007cbf280b2",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1260,
            "wires": [
                [
                    "dvk7ulf0ieauw4gx"
                ]
            ]
        },
        {
            "id": "h0mbqhh18s68w81j",
            "type": "change",
            "z": "d4386007cbf280b2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1220,
            "wires": [
                [
                    "wq5l6gz5g67ug90r"
                ]
            ]
        },
        {
            "id": "28wucrtsdxr6zx3q",
            "type": "delay",
            "z": "d4386007cbf280b2",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1360,
            "wires": [
                [
                    "dvk7ulf0ieauw4gx"
                ]
            ]
        },
        {
            "id": "suep5tybs4f1nk7n",
            "type": "change",
            "z": "d4386007cbf280b2",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1320,
            "wires": [
                [
                    "28wucrtsdxr6zx3q"
                ]
            ]
        },
        {
            "id": "c5jtvrn31mxltp9t",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Set Bacnet parameters",
            "func": "msg.devices = [\n    {\n        \"deviceId\": parseInt(flow.get(\"bridge.image.controller.unitId\")),\n        \"network\": null,\n        \"ipAddress\": flow.get(\"bridge.image.controller.tcpHost\"),\n        \"macAddress\": null,\n        \"segmentation\": 0,\n        \"maxApdu\": 1476,\n        \"vendorId\": 865,\n        \"deviceName\": \"CBOX\"\n    }\n]\n\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 400,
            "y": 520,
            "wires": [
                [
                    "9b0f6185adaaceef"
                ]
            ]
        },
        {
            "id": "rubez7dau6wkuc99",
            "type": "function",
            "z": "d4386007cbf280b2",
            "name": "Set single sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 340,
            "y": 700,
            "wires": [
                [
                    "tbuwt1tg7fc7mncq",
                    "6mfoqhsrxneap13p"
                ]
            ]
        },
        {
            "id": "abm4nmogpi87nvay",
            "type": "link in",
            "z": "d4386007cbf280b2",
            "name": "Update Single Metric",
            "links": [
                "il2y5i687l9yargj"
            ],
            "x": 75,
            "y": 700,
            "wires": [
                [
                    "rubez7dau6wkuc99"
                ]
            ]
        },
        {
            "id": "9b0f6185adaaceef",
            "type": "discover point",
            "z": "d4386007cbf280b2",
            "name": "",
            "client": "48a306e1686ff253",
            "discoverMode": "0",
            "readMethod": "2",
            "groupExportDeviceCount": "10",
            "maxConcurrentDeviceRead": 3,
            "maxConcurrentSinglePointRead": 10,
            "x": 600,
            "y": 520,
            "wires": [
                [
                    "1oyqpr8b4pss142r"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "48a306e1686ff253",
            "type": "bacnet client",
            "z": "d4386007cbf280b2",
            "name": "Bacnet Client",
            "interface": "192.168.1.123",
            "port": "47808",
            "broadcastAddress": "192.168.1.255",
            "apduTimeout": "6000"
        },
        {
            "id": "ysah3s2h3ccjuom9",
            "type": "modbus-client",
            "z": "d4386007cbf280b2",
            "name": "Flexible Channel",
            "clienttype": "tcp",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "127.0.0.1",
            "tcpPort": "10502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "9600",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "1",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": true,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}