{
    "id": "e0c00843bd759d2c",
    "label": "67f66d4f9caec53a5ce7506e",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "02zru6ludagijew8",
            "type": "function",
            "z": "e0c00843bd759d2c",
            "name": "define credentials",
            "func": "let clientId = env.get('AOP_API_CLIENT_ID');\nlet clientSecret = env.get('AOP_API_CLIENT_SECRET');\nlet scope = env.get('AOP_API_SCOPE');\n\nif (clientId && clientId !== \"\" && clientSecret && clientSecret !== \"\" && scope && scope !== \"\") {\n    msg.payload =\n        \"client_id=\" + encodeURIComponent(clientId) +\n        \"&client_secret=\" + encodeURIComponent(clientSecret) +\n        \"&grant_type=client_credentials\" +\n        \"&scope=\" + encodeURIComponent(scope);\n\n    msg.headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n\n    return msg;\n}\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 300,
            "wires": [
                [
                    "nv2uhu1klmq1sz6e"
                ]
            ]
        },
        {
            "id": "nv2uhu1klmq1sz6e",
            "type": "http request",
            "z": "e0c00843bd759d2c",
            "name": "Aquire Authorization Token",
            "method": "POST",
            "ret": "obj",
            "paytoqs": "body",
            "url": "https://login.microsoftonline.com/49181cc3-a08b-493e-8606-9eebd7ae9f10/oauth2/v2.0/token",
            "tls": "",
            "persist": false,
            "proxy": "",
            "insecureHTTPParser": false,
            "authType": "",
            "senderr": false,
            "headers": [
                {
                    "keyType": "other",
                    "keyValue": "Content-Type",
                    "valueType": "other",
                    "valueValue": "application/x-www-form-urlencoded"
                }
            ],
            "x": 580,
            "y": 300,
            "wires": [
                [
                    "1yiwpg0a8f10rzdh"
                ]
            ]
        },
        {
            "id": "if6fvwdhjuhtsqx0",
            "type": "inject",
            "z": "e0c00843bd759d2c",
            "name": "read cylce",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "120",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 130,
            "y": 300,
            "wires": [
                [
                    "02zru6ludagijew8"
                ]
            ]
        },
        {
            "id": "1yiwpg0a8f10rzdh",
            "type": "function",
            "z": "e0c00843bd759d2c",
            "name": "define_query_params",
            "func": "const to_ts = new Date();\nconst from_ts = new Date();\n\nto_ts.setMinutes(to_ts.getMinutes() + 100);\n// to_ts.setHours(to_ts.getHours() + 3);\n\nmsg.gate_area = 'A81-A86'\nmsg.obs_from = from_ts.toJSON()\nmsg.obs_to = to_ts.toJSON()\n\nmsg.headers = {\n        'Authorization': 'Bearer ' + msg.payload.access_token\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 840,
            "y": 300,
            "wires": [
                [
                    "5asg0trdlxv74u6t"
                ]
            ]
        },
        {
            "id": "5asg0trdlxv74u6t",
            "type": "http request",
            "z": "e0c00843bd759d2c",
            "name": "Request Gate Demand Data",
            "method": "GET",
            "ret": "obj",
            "paytoqs": "ignore",
            "url": "https://api.int.zurich-airport.com/airport_operations_plan/v2/passenger-demand/gate-areas/{{{gate_area}}}?observation_time_window_from={{{obs_from}}}&observation_time_window_to={{{obs_to}}}",
            "tls": "",
            "persist": false,
            "proxy": "",
            "insecureHTTPParser": false,
            "authType": "",
            "senderr": false,
            "headers": [],
            "x": 1100,
            "y": 300,
            "wires": [
                [
                    "2re7cvka08kado2s"
                ]
            ]
        },
        {
            "id": "2re7cvka08kado2s",
            "type": "function",
            "z": "e0c00843bd759d2c",
            "name": "Create AOP PAX Data Array for Modbus Communication",
            "func": "// Definiere die Größe des Arrays (n kann z. B. aus msg.n kommen oder festgelegt sein)\nvar n = msg.n || 5;  // Falls msg.n nicht gesetzt ist, wird n=5 als Standardwert genommen\n\n// Initialisiere das Array mit Standardwerten (z. B. 0 oder eine Sequenz)\nvar dataArray = new Array(n).fill(0);  // Füllt das Array mit n Elementen, alle auf 0 gesetzt\n\n// Falls du das Array mit einer Sequenz befüllen möchtest, kannst du dies tun:\nfor (let i = 0; i < n; i++) {\n    dataArray[i] = msg.payload.data[i].estimated_passenger_count;  // Erzeugt ein Array [mit den Passagierdaten]\n}\n\n// Setze das Array als msg.payload\nmsg.payload = dataArray;\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 650,
            "y": 440,
            "wires": [
                [
                    "8b6l0hl6baz8idkn",
                    "mdlhryvqwuj7kuyv",
                    "096bad18a026c396"
                ]
            ]
        },
        {
            "id": "8b6l0hl6baz8idkn",
            "type": "debug",
            "z": "e0c00843bd759d2c",
            "name": "debug 1",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1040,
            "y": 440,
            "wires": []
        },
        {
            "id": "mdlhryvqwuj7kuyv",
            "type": "modbus-write",
            "z": "e0c00843bd759d2c",
            "name": "AOP Data to Belimo",
            "showStatusActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "MHoldingRegisters",
            "adr": "200",
            "quantity": "5",
            "server": "4uk7euc80ljhf1fp",
            "emptyMsgOnFail": false,
            "keepMsgProperties": false,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 1080,
            "y": 500,
            "wires": [
                [],
                []
            ]
        },
        {
            "id": "jzuzunv1ssq23bdv",
            "type": "comment",
            "z": "e0c00843bd759d2c",
            "name": "Get AOP PAX Data",
            "info": "",
            "x": 110,
            "y": 240,
            "wires": []
        },
        {
            "id": "ixzidy9bphwizca7",
            "type": "modbus-read",
            "z": "e0c00843bd759d2c",
            "name": "Beckhoff Sensor Data",
            "topic": "Read Sensor Data from Beckhoff",
            "showStatusActivities": false,
            "logIOActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "InputRegister",
            "adr": "32768",
            "quantity": "100",
            "rate": "1",
            "rateUnit": "s",
            "delayOnStart": false,
            "startDelayTime": "",
            "server": "tdu5s92y0gnhf7ct",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "x": 160,
            "y": 700,
            "wires": [
                [
                    "glokjmzco5m9z1qm",
                    "xib3wlb8smrtkct2"
                ],
                []
            ]
        },
        {
            "id": "xib3wlb8smrtkct2",
            "type": "modbus-write",
            "z": "e0c00843bd759d2c",
            "name": "Belimo Sensor Data",
            "showStatusActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "MHoldingRegisters",
            "adr": "0",
            "quantity": "100",
            "server": "4uk7euc80ljhf1fp",
            "emptyMsgOnFail": false,
            "keepMsgProperties": false,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 480,
            "y": 760,
            "wires": [
                [
                    "f3b20908c60cbc50"
                ],
                []
            ]
        },
        {
            "id": "glokjmzco5m9z1qm",
            "type": "debug",
            "z": "e0c00843bd759d2c",
            "name": "Beckhoff Sensor Data",
            "active": false,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 480,
            "y": 700,
            "wires": []
        },
        {
            "id": "ekzcfxl0oid5hut5",
            "type": "comment",
            "z": "e0c00843bd759d2c",
            "name": "Beckhoff -> Belimo",
            "info": "",
            "x": 110,
            "y": 640,
            "wires": []
        },
        {
            "id": "o4rh1blsnldp0t3q",
            "type": "modbus-read",
            "z": "e0c00843bd759d2c",
            "name": "Belimo Setpoints",
            "topic": "Read Setpoints from Belimo",
            "showStatusActivities": false,
            "logIOActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "InputRegister",
            "adr": "1000",
            "quantity": "5",
            "rate": "1",
            "rateUnit": "s",
            "delayOnStart": false,
            "startDelayTime": "",
            "server": "4uk7euc80ljhf1fp",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "x": 140,
            "y": 940,
            "wires": [
                [
                    "b98e6tp9hmm9stkk",
                    "0b8zv8vm25fxwnik"
                ],
                []
            ]
        },
        {
            "id": "0b8zv8vm25fxwnik",
            "type": "modbus-write",
            "z": "e0c00843bd759d2c",
            "name": "Beckhoff setpoints",
            "showStatusActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "MHoldingRegisters",
            "adr": "32768",
            "quantity": "5",
            "server": "tdu5s92y0gnhf7ct",
            "emptyMsgOnFail": false,
            "keepMsgProperties": false,
            "delayOnStart": true,
            "startDelayTime": "12",
            "x": 470,
            "y": 1000,
            "wires": [
                [
                    "dbc26d7e48d51175"
                ],
                []
            ]
        },
        {
            "id": "b98e6tp9hmm9stkk",
            "type": "debug",
            "z": "e0c00843bd759d2c",
            "name": "Belimo Setpoints",
            "active": false,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 470,
            "y": 940,
            "wires": []
        },
        {
            "id": "v72dkg0xy4ryol9t",
            "type": "modbus-read",
            "z": "e0c00843bd759d2c",
            "name": "Belimo Setpoints",
            "topic": "Read Setpoints from Belimo",
            "showStatusActivities": false,
            "logIOActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "InputRegister",
            "adr": "1040",
            "quantity": "8",
            "rate": "1",
            "rateUnit": "s",
            "delayOnStart": false,
            "startDelayTime": "",
            "server": "4uk7euc80ljhf1fp",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "x": 140,
            "y": 1100,
            "wires": [
                [
                    "76o8goitfvfjsp4a",
                    "zd74uqecdgkivn1j"
                ],
                []
            ]
        },
        {
            "id": "zd74uqecdgkivn1j",
            "type": "modbus-write",
            "z": "e0c00843bd759d2c",
            "name": "Beckhoff setpoints",
            "showStatusActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "MHoldingRegisters",
            "adr": "32808",
            "quantity": "8",
            "server": "tdu5s92y0gnhf7ct",
            "emptyMsgOnFail": false,
            "keepMsgProperties": false,
            "delayOnStart": true,
            "startDelayTime": "12",
            "x": 470,
            "y": 1160,
            "wires": [
                [],
                []
            ]
        },
        {
            "id": "76o8goitfvfjsp4a",
            "type": "debug",
            "z": "e0c00843bd759d2c",
            "name": "Belimo Setpoints",
            "active": false,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 470,
            "y": 1100,
            "wires": []
        },
        {
            "id": "8phxtw3662bzjo4v",
            "type": "comment",
            "z": "e0c00843bd759d2c",
            "name": "Belimo -> Beckhoff ",
            "info": "",
            "x": 110,
            "y": 880,
            "wires": []
        },
        {
            "id": "il4pjyd5es3xrgrs",
            "type": "inject",
            "z": "e0c00843bd759d2c",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 40,
            "wires": [
                [
                    "1m7cob4kevk0psj0",
                    "7c242d3c931432d6"
                ]
            ]
        },
        {
            "id": "1m7cob4kevk0psj0",
            "type": "getflows",
            "z": "e0c00843bd759d2c",
            "name": "",
            "x": 300,
            "y": 40,
            "wires": [
                [
                    "5td6ao54is1mpi8c"
                ]
            ]
        },
        {
            "id": "5td6ao54is1mpi8c",
            "type": "function",
            "z": "e0c00843bd759d2c",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 40,
            "wires": [
                [
                    "kie74msqzi5vpqyo"
                ]
            ]
        },
        {
            "id": "kie74msqzi5vpqyo",
            "type": "switch",
            "z": "e0c00843bd759d2c",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 580,
            "y": 40,
            "wires": [
                [
                    "amafqpw3qfeussug"
                ]
            ]
        },
        {
            "id": "amafqpw3qfeussug",
            "type": "function",
            "z": "e0c00843bd759d2c",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 810,
            "y": 40,
            "wires": [
                []
            ]
        },
        {
            "id": "3p75tvr07fovp0fr",
            "type": "function",
            "z": "e0c00843bd759d2c",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 800,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "9rr6gi3koz5wvo9d",
            "type": "inject",
            "z": "e0c00843bd759d2c",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "30",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 200,
            "wires": [
                []
            ]
        },
        {
            "id": "7c242d3c931432d6",
            "type": "change",
            "z": "e0c00843bd759d2c",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"SYSTEM-0\":0,\"COMMUNICATION_ERROR\":false,\"BECKHOFF_COMMUNICATION_ERROR\":false,\"BELIMO_COMMUNICATION_ERROR\":false,\"AOP_COMMUNICATION_ERROR\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "3p75tvr07fovp0fr"
                ]
            ]
        },
        {
            "id": "f3b20908c60cbc50",
            "type": "change",
            "z": "e0c00843bd759d2c",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"BELIMO_COMMUNICATION_ERROR\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 700,
            "y": 740,
            "wires": [
                [
                    "342afe6e59293f54"
                ]
            ]
        },
        {
            "id": "dbc26d7e48d51175",
            "type": "change",
            "z": "e0c00843bd759d2c",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"BECKHOFF_COMMUNICATION_ERROR\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 700,
            "y": 980,
            "wires": [
                [
                    "342afe6e59293f54"
                ]
            ]
        },
        {
            "id": "f89fea5caccb9fc5",
            "type": "link in",
            "z": "e0c00843bd759d2c",
            "name": "Write Values",
            "links": [
                "342afe6e59293f54"
            ],
            "x": 385,
            "y": 120,
            "wires": [
                [
                    "3p75tvr07fovp0fr"
                ]
            ]
        },
        {
            "id": "342afe6e59293f54",
            "type": "link out",
            "z": "e0c00843bd759d2c",
            "name": "link out 19",
            "mode": "link",
            "links": [
                "f89fea5caccb9fc5"
            ],
            "x": 915,
            "y": 840
        },
        {
            "id": "846ba42f86a3b0ea",
            "type": "catch",
            "z": "e0c00843bd759d2c",
            "name": "",
            "scope": [
                "xib3wlb8smrtkct2"
            ],
            "uncaught": false,
            "x": 530,
            "y": 820,
            "wires": [
                [
                    "7201d7493f0ca55f"
                ]
            ]
        },
        {
            "id": "f352dd8332393915",
            "type": "catch",
            "z": "e0c00843bd759d2c",
            "name": "",
            "scope": [
                "0b8zv8vm25fxwnik"
            ],
            "uncaught": false,
            "x": 510,
            "y": 1040,
            "wires": [
                [
                    "949a4139ad64aac9"
                ]
            ]
        },
        {
            "id": "949a4139ad64aac9",
            "type": "change",
            "z": "e0c00843bd759d2c",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"BECKHOFF_COMMUNICATION_ERROR\":true}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 700,
            "y": 1040,
            "wires": [
                [
                    "342afe6e59293f54"
                ]
            ]
        },
        {
            "id": "7201d7493f0ca55f",
            "type": "change",
            "z": "e0c00843bd759d2c",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"BELIMO_COMMUNICATION_ERROR\":true}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 700,
            "y": 820,
            "wires": [
                [
                    "342afe6e59293f54"
                ]
            ]
        },
        {
            "id": "096bad18a026c396",
            "type": "change",
            "z": "e0c00843bd759d2c",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"AOP_COMMUNICATION_ERROR\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1060,
            "y": 560,
            "wires": [
                [
                    "342afe6e59293f54"
                ]
            ]
        },
        {
            "id": "c7058b7fbd3f6d1e",
            "type": "catch",
            "z": "e0c00843bd759d2c",
            "name": "",
            "scope": [
                "2re7cvka08kado2s"
            ],
            "uncaught": false,
            "x": 810,
            "y": 600,
            "wires": [
                [
                    "2687b5f806c425b6"
                ]
            ]
        },
        {
            "id": "2687b5f806c425b6",
            "type": "change",
            "z": "e0c00843bd759d2c",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"AOP_COMMUNICATION_ERROR\":true}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1060,
            "y": 600,
            "wires": [
                [
                    "342afe6e59293f54"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "tdu5s92y0gnhf7ct",
            "type": "modbus-client",
            "z": "e0c00843bd759d2c",
            "name": "Beckhoff",
            "clienttype": "tcp",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "192.168.1.50",
            "tcpPort": "502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "9600",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "100",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": true,
            "showErrors": true,
            "showWarnings": true,
            "showLogs": true
        },
        {
            "id": "4uk7euc80ljhf1fp",
            "type": "modbus-client",
            "z": "e0c00843bd759d2c",
            "name": "Belmo",
            "clienttype": "tcp",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "192.168.1.61",
            "tcpPort": "502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "9600",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "100",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": true,
            "showErrors": true,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}