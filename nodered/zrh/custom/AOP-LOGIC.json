{
    "id": "f60195a4aaa57393",
    "label": "67f66d4f9caec53a5ce7506e",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "6qlfodtt9hmoa9j7",
            "type": "function",
            "z": "f60195a4aaa57393",
            "name": "define credentials",
            "func": "let clientId = env.get('AOP_API_CLIENT_ID');\nlet clientSecret = env.get('AOP_API_CLIENT_SECRET');\nlet scope = env.get('AOP_API_SCOPE');\n\nif (clientId && clientId !== \"\" && clientSecret && clientSecret !== \"\" && scope && scope !== \"\") {\n    msg.payload =\n        \"client_id=\" + encodeURIComponent(clientId) +\n        \"&client_secret=\" + encodeURIComponent(clientSecret) +\n        \"&grant_type=client_credentials\" +\n        \"&scope=\" + encodeURIComponent(scope);\n\n    msg.headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n\n    return msg;\n}\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 300,
            "wires": [
                [
                    "qzt4j50ygtioe6g4"
                ]
            ]
        },
        {
            "id": "qzt4j50ygtioe6g4",
            "type": "http request",
            "z": "f60195a4aaa57393",
            "name": "Aquire Authorization Token",
            "method": "POST",
            "ret": "obj",
            "paytoqs": "body",
            "url": "https://login.microsoftonline.com/49181cc3-a08b-493e-8606-9eebd7ae9f10/oauth2/v2.0/token",
            "tls": "",
            "persist": false,
            "proxy": "",
            "insecureHTTPParser": false,
            "authType": "",
            "senderr": false,
            "headers": [
                {
                    "keyType": "other",
                    "keyValue": "Content-Type",
                    "valueType": "other",
                    "valueValue": "application/x-www-form-urlencoded"
                }
            ],
            "x": 580,
            "y": 300,
            "wires": [
                [
                    "rx18uuvhwpfi4sl7"
                ]
            ]
        },
        {
            "id": "446p85vxne04eih3",
            "type": "inject",
            "z": "f60195a4aaa57393",
            "name": "read cylce",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "120",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 130,
            "y": 300,
            "wires": [
                [
                    "6qlfodtt9hmoa9j7"
                ]
            ]
        },
        {
            "id": "rx18uuvhwpfi4sl7",
            "type": "function",
            "z": "f60195a4aaa57393",
            "name": "define_query_params",
            "func": "const to_ts = new Date();\nconst from_ts = new Date();\n\nto_ts.setMinutes(to_ts.getMinutes() + 100);\n// to_ts.setHours(to_ts.getHours() + 3);\n\nmsg.gate_area = 'A81-A86'\nmsg.obs_from = from_ts.toJSON()\nmsg.obs_to = to_ts.toJSON()\n\nmsg.headers = {\n        'Authorization': 'Bearer ' + msg.payload.access_token\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 840,
            "y": 300,
            "wires": [
                [
                    "3g15bofut13epuri"
                ]
            ]
        },
        {
            "id": "3g15bofut13epuri",
            "type": "http request",
            "z": "f60195a4aaa57393",
            "name": "Request Gate Demand Data",
            "method": "GET",
            "ret": "obj",
            "paytoqs": "ignore",
            "url": "https://api.int.zurich-airport.com/airport_operations_plan/v2/passenger-demand/gate-areas/{{{gate_area}}}?observation_time_window_from={{{obs_from}}}&observation_time_window_to={{{obs_to}}}",
            "tls": "",
            "persist": false,
            "proxy": "",
            "insecureHTTPParser": false,
            "authType": "",
            "senderr": false,
            "headers": [],
            "x": 1100,
            "y": 300,
            "wires": [
                [
                    "e7xyw9vgb16m2chq"
                ]
            ]
        },
        {
            "id": "e7xyw9vgb16m2chq",
            "type": "function",
            "z": "f60195a4aaa57393",
            "name": "Create AOP PAX Data Array for Modbus Communication",
            "func": "// Definiere die Größe des Arrays (n kann z. B. aus msg.n kommen oder festgelegt sein)\nvar n = msg.n || 5;  // Falls msg.n nicht gesetzt ist, wird n=5 als Standardwert genommen\n\n// Initialisiere das Array mit Standardwerten (z. B. 0 oder eine Sequenz)\nvar dataArray = new Array(n).fill(0);  // Füllt das Array mit n Elementen, alle auf 0 gesetzt\n\n// Falls du das Array mit einer Sequenz befüllen möchtest, kannst du dies tun:\nfor (let i = 0; i < n; i++) {\n    dataArray[i] = msg.payload.data[i].estimated_passenger_count;  // Erzeugt ein Array [mit den Passagierdaten]\n}\n\n// Setze das Array als msg.payload\nmsg.payload = dataArray;\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 650,
            "y": 440,
            "wires": [
                [
                    "ua8k63ycht1w4itz",
                    "9wjjberhysip134d",
                    "z9sz38vejrcr0oum"
                ]
            ]
        },
        {
            "id": "ua8k63ycht1w4itz",
            "type": "debug",
            "z": "f60195a4aaa57393",
            "name": "debug 1",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "false",
            "statusVal": "",
            "statusType": "auto",
            "x": 1040,
            "y": 440,
            "wires": []
        },
        {
            "id": "9wjjberhysip134d",
            "type": "modbus-write",
            "z": "f60195a4aaa57393",
            "name": "AOP Data to Belimo",
            "showStatusActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "MHoldingRegisters",
            "adr": "200",
            "quantity": "5",
            "server": "6eyw9z9nydc0ovxa",
            "emptyMsgOnFail": false,
            "keepMsgProperties": false,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 1080,
            "y": 500,
            "wires": [
                [],
                []
            ]
        },
        {
            "id": "py7al8f8kcoqvx91",
            "type": "comment",
            "z": "f60195a4aaa57393",
            "name": "Get AOP PAX Data",
            "info": "",
            "x": 110,
            "y": 240,
            "wires": []
        },
        {
            "id": "8oyki1zgvluett6p",
            "type": "modbus-read",
            "z": "f60195a4aaa57393",
            "name": "Beckhoff Sensor Data",
            "topic": "Read Sensor Data from Beckhoff",
            "showStatusActivities": false,
            "logIOActivities": false,
            "showErrors": true,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "InputRegister",
            "adr": "32768",
            "quantity": "100",
            "rate": "1",
            "rateUnit": "s",
            "delayOnStart": false,
            "startDelayTime": "",
            "server": "j0ku6j4f874yvvta",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "x": 160,
            "y": 700,
            "wires": [
                [
                    "vnwjm5ewb3ace1ro",
                    "o5ee4t0sb8n2ypia",
                    "978pdl5djxh1n37s"
                ],
                []
            ]
        },
        {
            "id": "o5ee4t0sb8n2ypia",
            "type": "modbus-write",
            "z": "f60195a4aaa57393",
            "name": "Belimo Sensor Data",
            "showStatusActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "MHoldingRegisters",
            "adr": "0",
            "quantity": "100",
            "server": "6eyw9z9nydc0ovxa",
            "emptyMsgOnFail": false,
            "keepMsgProperties": false,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 480,
            "y": 760,
            "wires": [
                [],
                []
            ]
        },
        {
            "id": "vnwjm5ewb3ace1ro",
            "type": "debug",
            "z": "f60195a4aaa57393",
            "name": "Beckhoff Sensor Data",
            "active": false,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 480,
            "y": 700,
            "wires": []
        },
        {
            "id": "a57zgzh4rlozkhrc",
            "type": "comment",
            "z": "f60195a4aaa57393",
            "name": "Beckhoff -> Belimo",
            "info": "",
            "x": 110,
            "y": 640,
            "wires": []
        },
        {
            "id": "lwxwi1d6cpxlgkas",
            "type": "modbus-read",
            "z": "f60195a4aaa57393",
            "name": "Belimo Setpoints",
            "topic": "Read Setpoints from Belimo",
            "showStatusActivities": false,
            "logIOActivities": false,
            "showErrors": true,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "InputRegister",
            "adr": "1000",
            "quantity": "5",
            "rate": "1",
            "rateUnit": "s",
            "delayOnStart": false,
            "startDelayTime": "",
            "server": "6eyw9z9nydc0ovxa",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "x": 140,
            "y": 940,
            "wires": [
                [
                    "fn7ug9qjuqts255j",
                    "pmoclczqbq3tnsfa",
                    "6gk26ya8zs225l1a"
                ],
                []
            ]
        },
        {
            "id": "pmoclczqbq3tnsfa",
            "type": "modbus-write",
            "z": "f60195a4aaa57393",
            "name": "Beckhoff setpoints",
            "showStatusActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "MHoldingRegisters",
            "adr": "32768",
            "quantity": "5",
            "server": "j0ku6j4f874yvvta",
            "emptyMsgOnFail": false,
            "keepMsgProperties": false,
            "delayOnStart": true,
            "startDelayTime": "12",
            "x": 470,
            "y": 1000,
            "wires": [
                [],
                []
            ]
        },
        {
            "id": "fn7ug9qjuqts255j",
            "type": "debug",
            "z": "f60195a4aaa57393",
            "name": "Belimo Setpoints",
            "active": false,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 470,
            "y": 940,
            "wires": []
        },
        {
            "id": "rzz9jpkuxvb0c5bq",
            "type": "modbus-read",
            "z": "f60195a4aaa57393",
            "name": "Belimo Setpoints",
            "topic": "Read Setpoints from Belimo",
            "showStatusActivities": false,
            "logIOActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "InputRegister",
            "adr": "1040",
            "quantity": "8",
            "rate": "1",
            "rateUnit": "s",
            "delayOnStart": false,
            "startDelayTime": "",
            "server": "6eyw9z9nydc0ovxa",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "x": 140,
            "y": 1100,
            "wires": [
                [
                    "tfesn0ijnvqe7h8q",
                    "075t0yi7pfvlkwsl"
                ],
                []
            ]
        },
        {
            "id": "075t0yi7pfvlkwsl",
            "type": "modbus-write",
            "z": "f60195a4aaa57393",
            "name": "Beckhoff setpoints",
            "showStatusActivities": false,
            "showErrors": false,
            "showWarnings": true,
            "unitid": "1",
            "dataType": "MHoldingRegisters",
            "adr": "32808",
            "quantity": "8",
            "server": "j0ku6j4f874yvvta",
            "emptyMsgOnFail": false,
            "keepMsgProperties": false,
            "delayOnStart": true,
            "startDelayTime": "12",
            "x": 470,
            "y": 1160,
            "wires": [
                [],
                []
            ]
        },
        {
            "id": "tfesn0ijnvqe7h8q",
            "type": "debug",
            "z": "f60195a4aaa57393",
            "name": "Belimo Setpoints",
            "active": false,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 470,
            "y": 1100,
            "wires": []
        },
        {
            "id": "s3a9mf3w3rd9r4o9",
            "type": "comment",
            "z": "f60195a4aaa57393",
            "name": "Belimo -> Beckhoff ",
            "info": "",
            "x": 110,
            "y": 880,
            "wires": []
        },
        {
            "id": "uswtexh3jsudasmm",
            "type": "inject",
            "z": "f60195a4aaa57393",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 40,
            "wires": [
                [
                    "c0jl2x739stmdy4b",
                    "106uz0wbllvz379u"
                ]
            ]
        },
        {
            "id": "c0jl2x739stmdy4b",
            "type": "getflows",
            "z": "f60195a4aaa57393",
            "name": "",
            "x": 300,
            "y": 40,
            "wires": [
                [
                    "mps8wt1dihxz0qox"
                ]
            ]
        },
        {
            "id": "mps8wt1dihxz0qox",
            "type": "function",
            "z": "f60195a4aaa57393",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 40,
            "wires": [
                [
                    "yj4nwsquchxbjjye"
                ]
            ]
        },
        {
            "id": "yj4nwsquchxbjjye",
            "type": "switch",
            "z": "f60195a4aaa57393",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 580,
            "y": 40,
            "wires": [
                [
                    "o0ezk3bgy6mq4i7l"
                ]
            ]
        },
        {
            "id": "o0ezk3bgy6mq4i7l",
            "type": "function",
            "z": "f60195a4aaa57393",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 810,
            "y": 40,
            "wires": [
                []
            ]
        },
        {
            "id": "dl3zwkvqnimpxx6v",
            "type": "function",
            "z": "f60195a4aaa57393",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 800,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "fi5qf50d2d79tffn",
            "type": "inject",
            "z": "f60195a4aaa57393",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "30",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 200,
            "wires": [
                []
            ]
        },
        {
            "id": "106uz0wbllvz379u",
            "type": "change",
            "z": "f60195a4aaa57393",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"SYSTEM-0\":0,\"COMMUNICATION_ERROR\":false,\"BECKHOFF_COMMUNICATION_ERROR\":false,\"BELIMO_COMMUNICATION_ERROR\":false,\"AOP_COMMUNICATION_ERROR\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "dl3zwkvqnimpxx6v"
                ]
            ]
        },
        {
            "id": "6gk26ya8zs225l1a",
            "type": "change",
            "z": "f60195a4aaa57393",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"BELIMO_COMMUNICATION_ERROR\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 700,
            "y": 860,
            "wires": [
                [
                    "snraypz5gy3290fu"
                ]
            ]
        },
        {
            "id": "978pdl5djxh1n37s",
            "type": "change",
            "z": "f60195a4aaa57393",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"BECKHOFF_COMMUNICATION_ERROR\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 700,
            "y": 980,
            "wires": [
                [
                    "snraypz5gy3290fu"
                ]
            ]
        },
        {
            "id": "o32oknja06ksyg8r",
            "type": "link in",
            "z": "f60195a4aaa57393",
            "name": "Write Values",
            "links": [
                "snraypz5gy3290fu"
            ],
            "x": 385,
            "y": 120,
            "wires": [
                [
                    "dl3zwkvqnimpxx6v"
                ]
            ]
        },
        {
            "id": "snraypz5gy3290fu",
            "type": "link out",
            "z": "f60195a4aaa57393",
            "name": "link out 19",
            "mode": "link",
            "links": [
                "o32oknja06ksyg8r"
            ],
            "x": 915,
            "y": 840
        },
        {
            "id": "r34be80hspdqvp5t",
            "type": "catch",
            "z": "f60195a4aaa57393",
            "name": "",
            "scope": [
                "o5ee4t0sb8n2ypia",
                "lwxwi1d6cpxlgkas",
                "rzz9jpkuxvb0c5bq"
            ],
            "uncaught": false,
            "x": 530,
            "y": 820,
            "wires": [
                [
                    "bx7jk79veszvotpb"
                ]
            ]
        },
        {
            "id": "moz04dp06isxnj5d",
            "type": "catch",
            "z": "f60195a4aaa57393",
            "name": "",
            "scope": [
                "pmoclczqbq3tnsfa",
                "8oyki1zgvluett6p"
            ],
            "uncaught": false,
            "x": 510,
            "y": 1040,
            "wires": [
                [
                    "ak72fotj7uq9do48"
                ]
            ]
        },
        {
            "id": "ak72fotj7uq9do48",
            "type": "change",
            "z": "f60195a4aaa57393",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"BECKHOFF_COMMUNICATION_ERROR\":true}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 700,
            "y": 1040,
            "wires": [
                [
                    "snraypz5gy3290fu"
                ]
            ]
        },
        {
            "id": "bx7jk79veszvotpb",
            "type": "change",
            "z": "f60195a4aaa57393",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"BELIMO_COMMUNICATION_ERROR\":true}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 700,
            "y": 820,
            "wires": [
                [
                    "snraypz5gy3290fu"
                ]
            ]
        },
        {
            "id": "z9sz38vejrcr0oum",
            "type": "change",
            "z": "f60195a4aaa57393",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"AOP_COMMUNICATION_ERROR\":false}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1060,
            "y": 560,
            "wires": [
                [
                    "snraypz5gy3290fu"
                ]
            ]
        },
        {
            "id": "nqsha45e2pmfa2xl",
            "type": "catch",
            "z": "f60195a4aaa57393",
            "name": "",
            "scope": [
                "e7xyw9vgb16m2chq"
            ],
            "uncaught": false,
            "x": 810,
            "y": 600,
            "wires": [
                [
                    "fxhqr3o3e1hd36cs"
                ]
            ]
        },
        {
            "id": "fxhqr3o3e1hd36cs",
            "type": "change",
            "z": "f60195a4aaa57393",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "{\"AOP_COMMUNICATION_ERROR\":true}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1060,
            "y": 600,
            "wires": [
                [
                    "snraypz5gy3290fu"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "j0ku6j4f874yvvta",
            "type": "modbus-client",
            "z": "f60195a4aaa57393",
            "name": "Beckhoff",
            "clienttype": "tcp",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "192.168.1.50",
            "tcpPort": "502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "9600",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "100",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": true,
            "showErrors": true,
            "showWarnings": true,
            "showLogs": true
        },
        {
            "id": "6eyw9z9nydc0ovxa",
            "type": "modbus-client",
            "z": "f60195a4aaa57393",
            "name": "Belmo",
            "clienttype": "tcp",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "192.168.1.61",
            "tcpPort": "502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "9600",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "100",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": true,
            "showErrors": true,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}