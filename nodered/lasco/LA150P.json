{
    "id": "2c43cf6cc7734068",
    "label": "6524fcf72cee6969cbd400f4",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "kwavc6jq5jfkpb5m",
            "type": "mqtt in",
            "z": "2c43cf6cc7734068",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 130,
            "y": 1600,
            "wires": [
                [
                    "x09ppgz34tkcm2w6"
                ]
            ]
        },
        {
            "id": "ms67qtibem3o5ioa",
            "type": "mqtt out",
            "z": "2c43cf6cc7734068",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1240,
            "y": 1280,
            "wires": []
        },
        {
            "id": "50egh170bqx0b9s5",
            "type": "inject",
            "z": "2c43cf6cc7734068",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 150,
            "y": 1440,
            "wires": [
                [
                    "kgyfk7orzkoug89e"
                ]
            ]
        },
        {
            "id": "oktm73tv3tsuhq1r",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 190,
            "y": 1560,
            "wires": [
                [
                    "kwavc6jq5jfkpb5m"
                ]
            ]
        },
        {
            "id": "hhq8rtiihum67sky",
            "type": "inject",
            "z": "2c43cf6cc7734068",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "1",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "lx5aoer1dj2e5e3t"
                ]
            ]
        },
        {
            "id": "lx5aoer1dj2e5e3t",
            "type": "getflows",
            "z": "2c43cf6cc7734068",
            "name": "",
            "x": 300,
            "y": 80,
            "wires": [
                [
                    "8g1yj8uzi2i2n36m"
                ]
            ]
        },
        {
            "id": "8g1yj8uzi2i2n36m",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\nflow.set(\"data\", \"\");\nflow.set(\"edge\", {\"calculated\": {}});\nflow.set(\"responses\", {});\nflow.set(\"log\", \"\");\nflow.set(\"z\", \"\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 80,
            "wires": [
                [
                    "e0a9hplxix643oku"
                ]
            ]
        },
        {
            "id": "kgyfk7orzkoug89e",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 160,
            "y": 1480,
            "wires": [
                [
                    "dkx17570873v9t82"
                ],
                [
                    "lx2id3vkwlg4yie6"
                ]
            ]
        },
        {
            "id": "dkx17570873v9t82",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1480,
            "wires": []
        },
        {
            "id": "iu1xf2lhoyybmiq4",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Set active request",
            "func": "flow.set(\"acitveRequest\", msg.payload);\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 730,
            "y": 940,
            "wires": [
                [
                    "1981627ce04b1706"
                ]
            ]
        },
        {
            "id": "wobfjwgqeitlmo97",
            "type": "comment",
            "z": "2c43cf6cc7734068",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1380,
            "wires": []
        },
        {
            "id": "dfxs111l11b9oogh",
            "type": "comment",
            "z": "2c43cf6cc7734068",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "e0a9hplxix643oku",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 580,
            "y": 80,
            "wires": [
                [
                    "4eifkdz4nwstmn8y"
                ]
            ]
        },
        {
            "id": "mhd3l873ef35qj04",
            "type": "comment",
            "z": "2c43cf6cc7734068",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 780,
            "wires": []
        },
        {
            "id": "ir0yggy8fxrviwnw",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 180,
            "y": 860,
            "wires": [
                [
                    "b00c9c0d836a60c1"
                ]
            ]
        },
        {
            "id": "062zrjqlzv8bvg9s",
            "type": "delay",
            "z": "2c43cf6cc7734068",
            "name": "",
            "pauseType": "delay",
            "timeout": "10",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 780,
            "y": 1600,
            "wires": [
                [
                    "ms67qtibem3o5ioa"
                ]
            ]
        },
        {
            "id": "eguzmgwyf65sseug",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1260,
            "y": 1240,
            "wires": [
                [
                    "ms67qtibem3o5ioa"
                ]
            ]
        },
        {
            "id": "x09ppgz34tkcm2w6",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "send write data",
            "func": "if (msg.payload.protocol.type === \"bool\" && typeof msg.payload.value === \"boolean\") {\n    if (msg.payload.protocol.invert) {\n        msg.payload.value = !msg.payload.value;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 5,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": 1\n    }\n} else if (msg.payload.protocol.type === \"bool\" && typeof msg.payload.value !== \"boolean\") {\n    if (msg.payload.protocol.invert) {\n        msg.payload.value = msg.payload.value * -1;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 6,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": 1\n    }\n} else {\n    msg.payload = {\n        \"value\": parseInt(msg.payload.value) * (1 / msg.payload.protocol.scale),\n        \"fc\": 16,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": global.get(\"function.typeToRegisterLength\")(msg.payload.protocol.type)\n    }\n}\n\nnode.send(msg);\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 1600,
            "wires": [
                [
                    "iw8doy7w8nvou52l"
                ]
            ]
        },
        {
            "id": "uoqibgr14ydjeo0c",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1260,
            "y": 1160,
            "wires": [
                [
                    "h86h5wirpt7ci1t7"
                ]
            ]
        },
        {
            "id": "h86h5wirpt7ci1t7",
            "type": "mqtt out",
            "z": "2c43cf6cc7734068",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1240,
            "y": 1200,
            "wires": []
        },
        {
            "id": "iw8doy7w8nvou52l",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Channel 1",
            "property": "channel",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "1",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 560,
            "y": 1600,
            "wires": [
                [
                    "381fe6ff3f6e7c30",
                    "062zrjqlzv8bvg9s"
                ]
            ]
        },
        {
            "id": "ytp1kem40q2rsl0x",
            "type": "serial in",
            "z": "2c43cf6cc7734068",
            "name": "",
            "serial": "536ubhk87crdjavi",
            "x": 150,
            "y": 180,
            "wires": [
                [
                    "e2907a3f07da9901"
                ]
            ]
        },
        {
            "id": "1w3p6gt7v4xct5ry",
            "type": "serial out",
            "z": "2c43cf6cc7734068",
            "name": "",
            "serial": "536ubhk87crdjavi",
            "x": 1040,
            "y": 940,
            "wires": []
        },
        {
            "id": "hm9rgkpzgazoreie",
            "type": "change",
            "z": "2c43cf6cc7734068",
            "name": "set data from message",
            "rules": [
                {
                    "t": "set",
                    "p": "data",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 660,
            "y": 180,
            "wires": [
                [
                    "5a94f8ae6c375cd5"
                ]
            ]
        },
        {
            "id": "e2tazc05madzztev",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "send requests",
            "func": "function extractUniqueValues(jsonArray, property) {\n    var values = jsonArray.map(function (item) {\n        return item[property];\n    });\n\n    return values.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nconst requests = extractUniqueValues(flow.get(\"bridge.image.protocols\"), \"request\");\n\nrequests.forEach(request => {\n    if (request !== \"$app data_list_hs\"){\n        msg.payload = request;\n        node.send(msg);\n    }\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 360,
            "y": 940,
            "wires": [
                [
                    "6s651khapldxhvrw"
                ]
            ]
        },
        {
            "id": "6s651khapldxhvrw",
            "type": "delay",
            "z": "2c43cf6cc7734068",
            "name": "",
            "pauseType": "rate",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "5",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 540,
            "y": 940,
            "wires": [
                [
                    "iu1xf2lhoyybmiq4"
                ]
            ]
        },
        {
            "id": "c0l3f59ftwm7qkq9",
            "type": "flogger",
            "z": "2c43cf6cc7734068",
            "name": "Debug",
            "logfile": "${NR_FLOW_NAME}.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "DEBUG",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 910,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "4eifkdz4nwstmn8y",
            "type": "change",
            "z": "2c43cf6cc7734068",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "Bridge config found",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 760,
            "y": 80,
            "wires": [
                [
                    "c0l3f59ftwm7qkq9"
                ]
            ]
        },
        {
            "id": "qf9p929l4hkm19yu",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Set notified values",
            "func": "const data = flow.get(\"data\");\n\nfunction hex2bin(hex) {\n    return (parseInt(hex, 16).toString(2)).padStart(8, '0');\n}\n\nvar values = data.replace('pm ', '').split(\" \");\nvar dataPoints = {}\nmsg.sequences.forEach(sequence => {\n    if (values.length < sequence.address) {\n        node.warn(\"Value notification doesn't contain value: \" + sequence.id);\n    } else if (sequence.type === \"bit\") {\n        dataPoints[sequence.id] = parseInt(hex2bin(values[sequence.address]).charAt(sequence.offsetbit))\n    }\n    else{\n        dataPoints[sequence.id] = parseFloat(values[sequence.address]);\n    }\n});\n\nmsg.payload = dataPoints;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1430,
            "y": 180,
            "wires": [
                [
                    "acc2c2eecaa6f817"
                ]
            ]
        },
        {
            "id": "9zbthz117jepouhm",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "send bridge data processing",
            "func": "msg.sequences = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === msg.payload);\n\nif (msg.sequences.length > 0) {\n    return msg;\n}\n\nnode.done();",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 180,
            "wires": [
                [
                    "2fvorzjeug4yejmm"
                ]
            ]
        },
        {
            "id": "2fvorzjeug4yejmm",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "",
            "property": "data",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1270,
            "y": 180,
            "wires": [
                [
                    "qf9p929l4hkm19yu"
                ]
            ]
        },
        {
            "id": "gfv4l56zkyutjmxm",
            "type": "flogger",
            "z": "2c43cf6cc7734068",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 1820,
            "wires": [
                []
            ]
        },
        {
            "id": "8p13f695g3jbyomd",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 1820,
            "wires": [
                [
                    "pfk2o9tah0ctbbxa"
                ]
            ]
        },
        {
            "id": "yxtt73ke9a50md23",
            "type": "catch",
            "z": "2c43cf6cc7734068",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1820,
            "wires": [
                [
                    "8p13f695g3jbyomd"
                ]
            ]
        },
        {
            "id": "pfk2o9tah0ctbbxa",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1820,
            "wires": [
                [
                    "gfv4l56zkyutjmxm"
                ]
            ]
        },
        {
            "id": "lx2id3vkwlg4yie6",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 170,
            "y": 1520,
            "wires": [
                [
                    "oktm73tv3tsuhq1r"
                ]
            ]
        },
        {
            "id": "k6t0w973u06zaa0s",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 170,
            "y": 940,
            "wires": [
                [
                    "e2tazc05madzztev"
                ]
            ]
        },
        {
            "id": "5a94f8ae6c375cd5",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "send requests",
            "func": "function extractUniqueValues(jsonArray, property) {\n    var values = jsonArray.map(function (item) {\n        return item[property];\n    });\n\n    return values.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nconst requests = extractUniqueValues(flow.get(\"bridge.image.protocols\"), \"request\");\n\nrequests.forEach(request => {\n    if (request === \"$app data_list_hs\"){\n        msg.payload = request;\n        node.send(msg);\n    }\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 860,
            "y": 180,
            "wires": [
                [
                    "9zbthz117jepouhm"
                ]
            ]
        },
        {
            "id": "1981627ce04b1706",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "\\r\\n",
            "func": "msg.payload += Buffer.from(\"0D0A\", \"hex\");\nmsg.payload = Buffer.from(msg.payload, 'binary');\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 890,
            "y": 940,
            "wires": [
                [
                    "1w3p6gt7v4xct5ry"
                ]
            ]
        },
        {
            "id": "8d26c97eb6f1811d",
            "type": "inject",
            "z": "2c43cf6cc7734068",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "30",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 420,
            "wires": [
                [
                    "cb86a0068208077c"
                ]
            ]
        },
        {
            "id": "4d179d6f55b5f082",
            "type": "comment",
            "z": "2c43cf6cc7734068",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 480,
            "wires": []
        },
        {
            "id": "913e1e1172328552",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 560,
            "wires": [
                [
                    "218b5066107d19cd"
                ]
            ]
        },
        {
            "id": "414cd6e9e5db79d6",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "calculate virtual values",
            "func": "msg.payload = {};\n\nconst functions = {\n    \"kwh\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = flow.get(\"bridge.image.metrics\")[metricId];\n        }\n        msg.payload[metricId] = msg.payload[metricId] + (flow.get(\"bridge.image.metrics\")[parameterIds[0]] / 3600);\n    },\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = \"OK\";\n        } \n        parameterIds.forEach(id => {\n            if(flow.get(\"bridge.image.metrics\")[id] !== \"\" && flow.get(\"bridge.image.metrics\")[id] !== 0 && flow.get(\"bridge.image.metrics\")[id] !== false){\n                msg.payload[metricId] = \"ERROR\";\n            }\n        });\n    }\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calcuation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        functions[calc.func](sequence.dataPoint.id, calc.ids)\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 580,
            "y": 680,
            "wires": [
                [
                    "1f7a878e0ead7b48"
                ]
            ]
        },
        {
            "id": "f2c9638138743e65",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 680,
            "wires": [
                [
                    "414cd6e9e5db79d6"
                ]
            ]
        },
        {
            "id": "218b5066107d19cd",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 600,
            "wires": [
                [
                    "e6793503d9c1e217"
                ]
            ]
        },
        {
            "id": "8b8d51a31c2e3da1",
            "type": "link in",
            "z": "2c43cf6cc7734068",
            "name": "Virtual Read",
            "links": [
                "cb86a0068208077c",
                "381fe6ff3f6e7c30"
            ],
            "x": 55,
            "y": 560,
            "wires": [
                [
                    "913e1e1172328552"
                ]
            ]
        },
        {
            "id": "cb86a0068208077c",
            "type": "link out",
            "z": "2c43cf6cc7734068",
            "name": "link out 18",
            "mode": "link",
            "links": [
                "8b8d51a31c2e3da1",
                "7444c51dffe7725b"
            ],
            "x": 275,
            "y": 420
        },
        {
            "id": "b00c9c0d836a60c1",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 180,
            "y": 900,
            "wires": [
                [
                    "k6t0w973u06zaa0s"
                ]
            ]
        },
        {
            "id": "e6793503d9c1e217",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 190,
            "y": 640,
            "wires": [
                [
                    "1860e0c57b948112"
                ]
            ]
        },
        {
            "id": "7444c51dffe7725b",
            "type": "link in",
            "z": "2c43cf6cc7734068",
            "name": "Protocol Read",
            "links": [
                "381fe6ff3f6e7c30",
                "cb86a0068208077c"
            ],
            "x": 45,
            "y": 860,
            "wires": [
                [
                    "ir0yggy8fxrviwnw"
                ]
            ]
        },
        {
            "id": "1f5c373ff8779b0c",
            "type": "comment",
            "z": "2c43cf6cc7734068",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 1080,
            "wires": []
        },
        {
            "id": "3ngbgm7qjfb7vvfd",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var metricId in msg.payload) {\n    if (typeof msg.payload[metricId] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[metricId] = Math.round((msg.payload[metricId] + Number.EPSILON) * 100) / 100\n    }\n    if (flow.get(\"bridge\").image.protocols.find(protocol => protocol.id === metricId).topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[metricId] !== msg.payload[metricId]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (flow.get(\"bridge\").image.protocols.find(protocol => protocol.id === metricId).topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[metricId] !== msg.payload[metricId]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[metricId] = msg.payload[metricId];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 220,
            "y": 1160,
            "wires": [
                [
                    "eguzmgwyf65sseug",
                    "uoqibgr14ydjeo0c"
                ]
            ]
        },
        {
            "id": "d2b376673d979c67",
            "type": "link in",
            "z": "2c43cf6cc7734068",
            "name": "Update Metrics",
            "links": [
                "1f7a878e0ead7b48",
                "acc2c2eecaa6f817",
                "929caf2b8a974105"
            ],
            "x": 45,
            "y": 1160,
            "wires": [
                [
                    "3ngbgm7qjfb7vvfd"
                ]
            ]
        },
        {
            "id": "381fe6ff3f6e7c30",
            "type": "link out",
            "z": "2c43cf6cc7734068",
            "name": "link out 20",
            "mode": "link",
            "links": [
                "8b8d51a31c2e3da1",
                "7444c51dffe7725b"
            ],
            "x": 735,
            "y": 1560
        },
        {
            "id": "1f7a878e0ead7b48",
            "type": "link out",
            "z": "2c43cf6cc7734068",
            "name": "link out 21",
            "mode": "link",
            "links": [
                "d2b376673d979c67"
            ],
            "x": 715,
            "y": 680
        },
        {
            "id": "acc2c2eecaa6f817",
            "type": "link out",
            "z": "2c43cf6cc7734068",
            "name": "link out 22",
            "mode": "link",
            "links": [
                "d2b376673d979c67"
            ],
            "x": 1555,
            "y": 180
        },
        {
            "id": "e2907a3f07da9901",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "toString()",
            "func": "msg.payload = msg.payload.toString(\"binary\")\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 300,
            "y": 180,
            "wires": [
                [
                    "3efbf1acb4c0a589",
                    "51b41b4f5f0604bc",
                    "5ea3545989320540",
                    "e8fe83dab4db5a06"
                ]
            ]
        },
        {
            "id": "5792420b666f3d82",
            "type": "comment",
            "z": "2c43cf6cc7734068",
            "name": "----- Error Catch",
            "info": "",
            "x": 80,
            "y": 1780,
            "wires": []
        },
        {
            "id": "3efbf1acb4c0a589",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "PM String",
            "func": "if(msg.payload.startsWith(\"pm\")){\n    msg.payload = msg.payload.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, \"\").trim()\n    return msg;\n}\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 480,
            "y": 180,
            "wires": [
                [
                    "hm9rgkpzgazoreie"
                ]
            ]
        },
        {
            "id": "51b41b4f5f0604bc",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Log String",
            "func": "if(msg.payload.startsWith(\"LOG\")){\n    msg.payload = msg.payload.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, \"\").trim()\n    return msg;\n}\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 490,
            "y": 220,
            "wires": [
                [
                    "8b5cfb617fc79149"
                ]
            ]
        },
        {
            "id": "5ea3545989320540",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "z String",
            "func": "if(msg.payload.startsWith(\"z\")){\n    msg.payload = msg.payload.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, \"\").trim()\n    return msg;\n}\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 480,
            "y": 260,
            "wires": [
                [
                    "8260b0e4292c8d7f"
                ]
            ]
        },
        {
            "id": "e8fe83dab4db5a06",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Response String",
            "func": "if(!msg.payload.startsWith(\"z\") && !msg.payload.startsWith(\"LOG\") && !msg.payload.startsWith(\"pm\")){\n    msg.payload = msg.payload.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, \"\").trim()\n    return msg;\n}\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 510,
            "y": 300,
            "wires": [
                [
                    "b5468910174d1b22"
                ]
            ]
        },
        {
            "id": "fa553a18aa749bbb",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Process response",
            "func": "flow.get(\"responses\")[flow.get(\"acitveRequest\")] = msg.payload;\n\nlet objectTosend = {}\nif(flow.get(\"acitveRequest\") === \"$app par_list_hs\"){\n    const dataPoints = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === \"$app par_list_hs\");\n    const parameterList = msg.payload.split(\"\\n\");\n    dataPoints.forEach(protocol => {\n        const parameter = parameterList.find(param => param.split(\";\")[0].includes(protocol.address))\n        if (parameter) {\n            objectTosend[protocol.id] = parameter.split(\";\")[1];\n        }\n    });\n} else if (flow.get(\"acitveRequest\") === \"$app counter_list_hs\"){\n    const dataPoints = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === \"$app counter_list_hs\");\n    const counterList = msg.payload.split(\"\\n\");\n    dataPoints.forEach(protocol => {\n        objectTosend[protocol.id] = counterList[protocol.address].split(\";\")[1];\n    });\n} else if (flow.get(\"acitveRequest\") === \"$app err_list\") {\n    const dataPoints = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === \"$app err_list\");\n    const errorList = msg.payload.split(\"\\n\");\n    dataPoints.forEach(protocol => {\n        objectTosend[protocol.id] = errorList[protocol.address];\n    });\n}\n\nmsg.payload = objectTosend;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 300,
            "wires": [
                [
                    "929caf2b8a974105"
                ]
            ]
        },
        {
            "id": "b5468910174d1b22",
            "type": "join",
            "z": "2c43cf6cc7734068",
            "name": "",
            "mode": "custom",
            "build": "string",
            "property": "payload",
            "propertyType": "msg",
            "key": "topic",
            "joiner": "\\n",
            "joinerType": "str",
            "accumulate": false,
            "timeout": "2",
            "count": "",
            "reduceRight": false,
            "reduceExp": "",
            "reduceInit": "",
            "reduceInitType": "",
            "reduceFixup": "",
            "x": 670,
            "y": 300,
            "wires": [
                [
                    "fa553a18aa749bbb"
                ]
            ]
        },
        {
            "id": "6c87fa08642d02ef",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Process response",
            "func": "flow.set(\"log\", msg.payload);\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 220,
            "wires": [
                []
            ]
        },
        {
            "id": "8b5cfb617fc79149",
            "type": "join",
            "z": "2c43cf6cc7734068",
            "name": "",
            "mode": "custom",
            "build": "string",
            "property": "payload",
            "propertyType": "msg",
            "key": "topic",
            "joiner": "\\n",
            "joinerType": "str",
            "accumulate": false,
            "timeout": "2",
            "count": "",
            "reduceRight": false,
            "reduceExp": "",
            "reduceInit": "",
            "reduceInitType": "",
            "reduceFixup": "",
            "x": 670,
            "y": 220,
            "wires": [
                [
                    "6c87fa08642d02ef"
                ]
            ]
        },
        {
            "id": "2ad5c176f254705b",
            "type": "function",
            "z": "2c43cf6cc7734068",
            "name": "Process response",
            "func": "flow.set(\"z\", msg.payload);\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 260,
            "wires": [
                []
            ]
        },
        {
            "id": "8260b0e4292c8d7f",
            "type": "join",
            "z": "2c43cf6cc7734068",
            "name": "",
            "mode": "custom",
            "build": "string",
            "property": "payload",
            "propertyType": "msg",
            "key": "topic",
            "joiner": "\\n",
            "joinerType": "str",
            "accumulate": false,
            "timeout": "2",
            "count": "",
            "reduceRight": false,
            "reduceExp": "",
            "reduceInit": "",
            "reduceInitType": "",
            "reduceFixup": "",
            "x": 670,
            "y": 260,
            "wires": [
                [
                    "2ad5c176f254705b"
                ]
            ]
        },
        {
            "id": "929caf2b8a974105",
            "type": "link out",
            "z": "2c43cf6cc7734068",
            "name": "link out 23",
            "mode": "link",
            "links": [
                "d2b376673d979c67"
            ],
            "x": 1555,
            "y": 300
        },
        {
            "id": "1860e0c57b948112",
            "type": "switch",
            "z": "2c43cf6cc7734068",
            "name": "Check data",
            "property": "data",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 190,
            "y": 680,
            "wires": [
                [
                    "f2c9638138743e65"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "536ubhk87crdjavi",
            "type": "serial-port",
            "z": "2c43cf6cc7734068",
            "serialport": "/dev/rfcomm0",
            "serialbaud": "19200",
            "databits": "8",
            "parity": "none",
            "stopbits": "1",
            "waitfor": "",
            "dtr": "none",
            "rts": "none",
            "cts": "none",
            "dsr": "none",
            "newline": "\\n",
            "bin": "bin",
            "out": "char",
            "addchar": "\\r\\n",
            "responsetimeout": "2000"
        }
    ]
}