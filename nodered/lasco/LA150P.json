{
    "id": "6b0c29418e1a67ee",
    "label": "653a3ab6023cf87ca14dbe64",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "7vi9eatjvrxrmex6",
            "type": "mqtt in",
            "z": "6b0c29418e1a67ee",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 130,
            "y": 1600,
            "wires": [
                [
                    "e7oabax4uomjtpw3"
                ]
            ]
        },
        {
            "id": "xog6ves6bqn8p5hq",
            "type": "mqtt out",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1240,
            "y": 1280,
            "wires": []
        },
        {
            "id": "1ggy88wehwqe1kkr",
            "type": "inject",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 150,
            "y": 1440,
            "wires": [
                [
                    "p3473zdhguqt0pqb"
                ]
            ]
        },
        {
            "id": "kxxs8tk7o7r0l777",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 190,
            "y": 1560,
            "wires": [
                [
                    "7vi9eatjvrxrmex6"
                ]
            ]
        },
        {
            "id": "3zmju258mxraxhfv",
            "type": "inject",
            "z": "6b0c29418e1a67ee",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "1",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "uw1cfyqdos5o6nd0"
                ]
            ]
        },
        {
            "id": "uw1cfyqdos5o6nd0",
            "type": "getflows",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "x": 300,
            "y": 80,
            "wires": [
                [
                    "7s4os90m0fu0hsmm"
                ]
            ]
        },
        {
            "id": "7s4os90m0fu0hsmm",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\nflow.set(\"data\", \"\");\nflow.set(\"edge\", {\"calculated\": {}});\nflow.set(\"responses\", {});\nflow.set(\"log\", \"\");\nflow.set(\"z\", \"\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 80,
            "wires": [
                [
                    "0r0bmv61lkydjzk4"
                ]
            ]
        },
        {
            "id": "p3473zdhguqt0pqb",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 160,
            "y": 1480,
            "wires": [
                [
                    "9ivhm3b39bo08u51"
                ],
                [
                    "75dszclgiuimszco"
                ]
            ]
        },
        {
            "id": "9ivhm3b39bo08u51",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1480,
            "wires": []
        },
        {
            "id": "dy6tk99sbk7nrgep",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Set active request",
            "func": "flow.set(\"activeRequest\", msg.payload);\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 730,
            "y": 940,
            "wires": [
                [
                    "wrsju87hcmfjy97i"
                ]
            ]
        },
        {
            "id": "3ftjkfyp9avvloxf",
            "type": "comment",
            "z": "6b0c29418e1a67ee",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1380,
            "wires": []
        },
        {
            "id": "vi98l1uypu7c6g67",
            "type": "comment",
            "z": "6b0c29418e1a67ee",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "0r0bmv61lkydjzk4",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 580,
            "y": 80,
            "wires": [
                [
                    "rvb728o508a6mpu2"
                ]
            ]
        },
        {
            "id": "lvuzuil2lsr2345r",
            "type": "comment",
            "z": "6b0c29418e1a67ee",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 780,
            "wires": []
        },
        {
            "id": "i93gx13z5n6sx9ey",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 180,
            "y": 860,
            "wires": [
                [
                    "sillla9z07k0oz7c"
                ]
            ]
        },
        {
            "id": "mtu0x1yw28qp83jq",
            "type": "delay",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "pauseType": "delay",
            "timeout": "10",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 780,
            "y": 1600,
            "wires": [
                [
                    "xog6ves6bqn8p5hq"
                ]
            ]
        },
        {
            "id": "65k1kgfwtom4n6bu",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1260,
            "y": 1240,
            "wires": [
                [
                    "xog6ves6bqn8p5hq"
                ]
            ]
        },
        {
            "id": "e7oabax4uomjtpw3",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "send write data",
            "func": "if (msg.payload.protocol.type === \"bool\" && typeof msg.payload.value === \"boolean\") {\n    if (msg.payload.protocol.invert) {\n        msg.payload.value = !msg.payload.value;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 5,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": 1\n    }\n} else if (msg.payload.protocol.type === \"bool\" && typeof msg.payload.value !== \"boolean\") {\n    if (msg.payload.protocol.invert) {\n        msg.payload.value = msg.payload.value * -1;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 6,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": 1\n    }\n} else {\n    msg.payload = {\n        \"value\": parseInt(msg.payload.value) * (1 / msg.payload.protocol.scale),\n        \"fc\": 16,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": global.get(\"function.typeToRegisterLength\")(msg.payload.protocol.type)\n    }\n}\n\nnode.send(msg);\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 1600,
            "wires": [
                [
                    "t2yc733hdp6c1t4w"
                ]
            ]
        },
        {
            "id": "1fha34poqt8mjxhe",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1260,
            "y": 1160,
            "wires": [
                [
                    "ta05pd1e05v7xbaf"
                ]
            ]
        },
        {
            "id": "ta05pd1e05v7xbaf",
            "type": "mqtt out",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1240,
            "y": 1200,
            "wires": []
        },
        {
            "id": "t2yc733hdp6c1t4w",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Channel 1",
            "property": "channel",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "1",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 560,
            "y": 1600,
            "wires": [
                [
                    "cmcicl3xnsab4pis",
                    "mtu0x1yw28qp83jq"
                ]
            ]
        },
        {
            "id": "nuqm95szzklwjbd5",
            "type": "serial in",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "serial": "u2yoii8gazsirscd",
            "x": 150,
            "y": 180,
            "wires": [
                [
                    "lw7mox9ed07jtxvf"
                ]
            ]
        },
        {
            "id": "wb6wvnv73vbrgn00",
            "type": "serial out",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "serial": "u2yoii8gazsirscd",
            "x": 1040,
            "y": 940,
            "wires": []
        },
        {
            "id": "6tgs9qfurukm6hib",
            "type": "change",
            "z": "6b0c29418e1a67ee",
            "name": "set data from message",
            "rules": [
                {
                    "t": "set",
                    "p": "data",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 660,
            "y": 180,
            "wires": [
                [
                    "to8gahtrakm7v363"
                ]
            ]
        },
        {
            "id": "qnh1xkaeb4bemhdn",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "send requests",
            "func": "function extractUniqueValues(jsonArray, property) {\n    var values = jsonArray.map(function (item) {\n        return item[property];\n    });\n\n    return values.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nconst requests = extractUniqueValues(flow.get(\"bridge.image.protocols\"), \"request\");\n\nrequests.forEach(request => {\n    if (request !== \"$app data_list_hs\"){\n        msg.payload = request;\n        node.send(msg);\n    }\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 360,
            "y": 940,
            "wires": [
                [
                    "2jrjnq64jib0jwc7"
                ]
            ]
        },
        {
            "id": "2jrjnq64jib0jwc7",
            "type": "delay",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "pauseType": "rate",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "5",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 540,
            "y": 940,
            "wires": [
                [
                    "dy6tk99sbk7nrgep"
                ]
            ]
        },
        {
            "id": "w5ddzfximq371x5a",
            "type": "flogger",
            "z": "6b0c29418e1a67ee",
            "name": "Debug",
            "logfile": "${NR_FLOW_NAME}.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "DEBUG",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 910,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "rvb728o508a6mpu2",
            "type": "change",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "Bridge config found",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 760,
            "y": 80,
            "wires": [
                [
                    "w5ddzfximq371x5a"
                ]
            ]
        },
        {
            "id": "jlvupz0eqs0rei3g",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Set notified values",
            "func": "const data = flow.get(\"data\");\n\nfunction hex2bin(hex) {\n    return (parseInt(hex, 16).toString(2)).padStart(16, '0');\n}\n\nvar values = data.replace('pm ', '').split(\" \");\nvar dataPoints = {}\nmsg.sequences.forEach(sequence => {\n    if (values.length < sequence.address) {\n        node.warn(\"Value notification doesn't contain value: \" + sequence.id);\n    } else if (sequence.type === \"bit\") {\n        let binaryData = hex2bin(values[sequence.address]);\n        dataPoints[sequence.id] = parseInt(binaryData.charAt(binaryData.length - 1 - sequence.offsetbit))\n    }\n    else{\n        dataPoints[sequence.id] = parseFloat(values[sequence.address]);\n    }\n});\n\nmsg.payload = dataPoints;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1430,
            "y": 180,
            "wires": [
                [
                    "dfc539f331ac10ed"
                ]
            ]
        },
        {
            "id": "np3jtkqyzyg2d3rh",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "send bridge data processing",
            "func": "msg.sequences = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === msg.payload);\n\nif (msg.sequences.length > 0) {\n    return msg;\n}\n\nnode.done();",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1080,
            "y": 180,
            "wires": [
                [
                    "tfqoczqwrzz1a5ln"
                ]
            ]
        },
        {
            "id": "tfqoczqwrzz1a5ln",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "property": "data",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1270,
            "y": 180,
            "wires": [
                [
                    "jlvupz0eqs0rei3g"
                ]
            ]
        },
        {
            "id": "55k2q6zlbvzxu89n",
            "type": "flogger",
            "z": "6b0c29418e1a67ee",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 1820,
            "wires": [
                []
            ]
        },
        {
            "id": "85zhyjqxf3tn1681",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 1820,
            "wires": [
                [
                    "p879k0cisn2ecjwb"
                ]
            ]
        },
        {
            "id": "24yjm850si9diayj",
            "type": "catch",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1820,
            "wires": [
                [
                    "85zhyjqxf3tn1681"
                ]
            ]
        },
        {
            "id": "p879k0cisn2ecjwb",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1820,
            "wires": [
                [
                    "55k2q6zlbvzxu89n"
                ]
            ]
        },
        {
            "id": "75dszclgiuimszco",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 170,
            "y": 1520,
            "wires": [
                [
                    "kxxs8tk7o7r0l777"
                ]
            ]
        },
        {
            "id": "n5m7qzafakgdks3t",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 170,
            "y": 940,
            "wires": [
                [
                    "qnh1xkaeb4bemhdn"
                ]
            ]
        },
        {
            "id": "to8gahtrakm7v363",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "send requests",
            "func": "function extractUniqueValues(jsonArray, property) {\n    var values = jsonArray.map(function (item) {\n        return item[property];\n    });\n\n    return values.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nconst requests = extractUniqueValues(flow.get(\"bridge.image.protocols\"), \"request\");\n\nrequests.forEach(request => {\n    if (request === \"$app data_list_hs\"){\n        msg.payload = request;\n        node.send(msg);\n    }\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 860,
            "y": 180,
            "wires": [
                [
                    "np3jtkqyzyg2d3rh"
                ]
            ]
        },
        {
            "id": "wrsju87hcmfjy97i",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "\\r\\n",
            "func": "msg.payload += Buffer.from(\"0D0A\", \"hex\");\nmsg.payload = Buffer.from(msg.payload, 'binary');\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 890,
            "y": 940,
            "wires": [
                [
                    "wb6wvnv73vbrgn00"
                ]
            ]
        },
        {
            "id": "c1xjq4hledkzrbu0",
            "type": "inject",
            "z": "6b0c29418e1a67ee",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "30",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 140,
            "y": 420,
            "wires": [
                [
                    "lzd2qvox92e0wmve"
                ]
            ]
        },
        {
            "id": "aalrdjxhrzd0an2h",
            "type": "comment",
            "z": "6b0c29418e1a67ee",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 480,
            "wires": []
        },
        {
            "id": "dtbdc1h8i4xbezvq",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 560,
            "wires": [
                [
                    "s8b1fke3r6g9vnck"
                ]
            ]
        },
        {
            "id": "hkikfite7koxyp05",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"kwh\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = flow.get(\"bridge.image.metrics\")[metricId];\n        }\n        msg.payload[metricId] = msg.payload[metricId] + (flow.get(\"bridge.image.metrics\")[parameterIds[0]] / 3600);\n    },\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        functions[calc.func](sequence.dataPoint.id, calc.ids)\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 580,
            "y": 680,
            "wires": [
                [
                    "ylqq1j3y6j6zuyx5"
                ]
            ]
        },
        {
            "id": "e9uulrti8nhbteq9",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 380,
            "y": 680,
            "wires": [
                [
                    "hkikfite7koxyp05"
                ]
            ]
        },
        {
            "id": "s8b1fke3r6g9vnck",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 600,
            "wires": [
                [
                    "ypnxrcjjbzgcvhd8"
                ]
            ]
        },
        {
            "id": "9x88bpbpkrqdskqm",
            "type": "link in",
            "z": "6b0c29418e1a67ee",
            "name": "Virtual Read",
            "links": [
                "lzd2qvox92e0wmve",
                "cmcicl3xnsab4pis"
            ],
            "x": 55,
            "y": 560,
            "wires": [
                [
                    "dtbdc1h8i4xbezvq"
                ]
            ]
        },
        {
            "id": "lzd2qvox92e0wmve",
            "type": "link out",
            "z": "6b0c29418e1a67ee",
            "name": "link out 18",
            "mode": "link",
            "links": [
                "9x88bpbpkrqdskqm",
                "m2kaf2pucshhqle3"
            ],
            "x": 275,
            "y": 420
        },
        {
            "id": "sillla9z07k0oz7c",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 180,
            "y": 900,
            "wires": [
                [
                    "n5m7qzafakgdks3t"
                ]
            ]
        },
        {
            "id": "ypnxrcjjbzgcvhd8",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 190,
            "y": 640,
            "wires": [
                [
                    "b2q0xt6mqpjlroar"
                ]
            ]
        },
        {
            "id": "m2kaf2pucshhqle3",
            "type": "link in",
            "z": "6b0c29418e1a67ee",
            "name": "Protocol Read",
            "links": [
                "cmcicl3xnsab4pis",
                "lzd2qvox92e0wmve"
            ],
            "x": 45,
            "y": 860,
            "wires": [
                [
                    "i93gx13z5n6sx9ey"
                ]
            ]
        },
        {
            "id": "dcrypfj655a8f60s",
            "type": "comment",
            "z": "6b0c29418e1a67ee",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 1080,
            "wires": []
        },
        {
            "id": "3duq9ymiibrt1yic",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var metricId in msg.payload) {\n    if (typeof msg.payload[metricId] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[metricId] = Math.round((msg.payload[metricId] + Number.EPSILON) * 100) / 100\n    }\n    if (flow.get(\"bridge\").image.protocols.find(protocol => protocol.id === metricId).topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[metricId] !== msg.payload[metricId]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (flow.get(\"bridge\").image.protocols.find(protocol => protocol.id === metricId).topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[metricId] !== msg.payload[metricId]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[metricId] = msg.payload[metricId];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 220,
            "y": 1160,
            "wires": [
                [
                    "65k1kgfwtom4n6bu",
                    "1fha34poqt8mjxhe"
                ]
            ]
        },
        {
            "id": "u19anxprfjwgl557",
            "type": "link in",
            "z": "6b0c29418e1a67ee",
            "name": "Update Metrics",
            "links": [
                "skrm6bmaln3zzpue",
                "bex8q817rholftvz",
                "1uqm0p3l1igog389"
            ],
            "x": 45,
            "y": 1160,
            "wires": [
                [
                    "3duq9ymiibrt1yic"
                ]
            ]
        },
        {
            "id": "cmcicl3xnsab4pis",
            "type": "link out",
            "z": "6b0c29418e1a67ee",
            "name": "link out 20",
            "mode": "link",
            "links": [
                "9x88bpbpkrqdskqm",
                "m2kaf2pucshhqle3"
            ],
            "x": 735,
            "y": 1560
        },
        {
            "id": "bex8q817rholftvz",
            "type": "link out",
            "z": "6b0c29418e1a67ee",
            "name": "link out 22",
            "mode": "link",
            "links": [
                "u19anxprfjwgl557"
            ],
            "x": 1755,
            "y": 180
        },
        {
            "id": "lw7mox9ed07jtxvf",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "toString()",
            "func": "msg.payload = msg.payload.toString(\"binary\")\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 300,
            "y": 180,
            "wires": [
                [
                    "oab0tk58sk0oel7o",
                    "wjz3r6bgcbhw6pdy",
                    "sgiam0lryuwmdz21",
                    "kv9da98v4kvbemy1"
                ]
            ]
        },
        {
            "id": "yev3rtzmomfczzew",
            "type": "comment",
            "z": "6b0c29418e1a67ee",
            "name": "----- Error Catch",
            "info": "",
            "x": 80,
            "y": 1780,
            "wires": []
        },
        {
            "id": "oab0tk58sk0oel7o",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "PM String",
            "func": "if(msg.payload.startsWith(\"pm\")){\n    msg.payload = msg.payload.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, \"\").trim()\n    return msg;\n}\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 480,
            "y": 180,
            "wires": [
                [
                    "6tgs9qfurukm6hib"
                ]
            ]
        },
        {
            "id": "wjz3r6bgcbhw6pdy",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Log String",
            "func": "if(msg.payload.startsWith(\"LOG\")){\n    msg.payload = msg.payload.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, \"\").trim()\n    return msg;\n}\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 490,
            "y": 220,
            "wires": [
                [
                    "52qknzmfg3pfdubj"
                ]
            ]
        },
        {
            "id": "sgiam0lryuwmdz21",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "z String",
            "func": "if(msg.payload.startsWith(\"z\")){\n    msg.payload = msg.payload.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, \"\").trim()\n    return msg;\n}\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 480,
            "y": 260,
            "wires": [
                [
                    "f37ieu8cwp9zhxco"
                ]
            ]
        },
        {
            "id": "kv9da98v4kvbemy1",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Response String",
            "func": "if(!msg.payload.startsWith(\"z\") && !msg.payload.startsWith(\"LOG\") && !msg.payload.startsWith(\"pm\")){\n    msg.payload = msg.payload.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, \"\").trim()\n    return msg;\n}\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 510,
            "y": 300,
            "wires": [
                [
                    "hng1ztig5kbg5mq6"
                ]
            ]
        },
        {
            "id": "8pz3o6iimevqcx1a",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Process response",
            "func": "flow.get(\"responses\")[flow.get(\"activeRequest\")] = msg.payload;\n\nif (!msg.payload.includes(\";\")){\n    node.warn(\"Invalid response: \" + msg.payload + \" for request: \" + flow.get(\"activeRequest\"));\n} else {\n    let objectTosend = {}\n    if (flow.get(\"activeRequest\") === \"$app par_list_hs\") {\n        const dataPoints = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === \"$app par_list_hs\");\n        const parameterList = msg.payload.split(\"\\n\");\n        dataPoints.forEach(protocol => {\n            const parameter = parameterList.find(param => param.split(\";\")[0].includes(protocol.address))\n            if (parameter) {\n                objectTosend[protocol.id] = parseFloat(parameter.split(\";\")[1]);\n            }\n        });\n    } else if (flow.get(\"activeRequest\") === \"$app counter_list_hs\") {\n        const dataPoints = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === \"$app counter_list_hs\");\n        const counterList = msg.payload.split(\"\\n\");\n        dataPoints.forEach(protocol => {\n            objectTosend[protocol.id] = parseFloat(counterList[protocol.address].split(\";\")[1]);\n        });\n    } else if (flow.get(\"activeRequest\") === \"$app err_list\") {\n        const dataPoints = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === \"$app err_list\");\n        const errorList = msg.payload.split(\"\\n\");\n        dataPoints.forEach(protocol => {\n            objectTosend[protocol.id] = errorList[protocol.address].split(\";\").pop();\n        });\n    }\n\n    msg.payload = objectTosend;\n\n    return msg;\n}\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 300,
            "wires": [
                [
                    "1uqm0p3l1igog389"
                ]
            ]
        },
        {
            "id": "hng1ztig5kbg5mq6",
            "type": "join",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "mode": "custom",
            "build": "string",
            "property": "payload",
            "propertyType": "msg",
            "key": "topic",
            "joiner": "\\n",
            "joinerType": "str",
            "accumulate": false,
            "timeout": "2",
            "count": "",
            "reduceRight": false,
            "reduceExp": "",
            "reduceInit": "",
            "reduceInitType": "",
            "reduceFixup": "",
            "x": 670,
            "y": 300,
            "wires": [
                [
                    "8pz3o6iimevqcx1a"
                ]
            ]
        },
        {
            "id": "rr83igia8hxwh5nb",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Process response",
            "func": "flow.set(\"log\", msg.payload);\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 220,
            "wires": [
                []
            ]
        },
        {
            "id": "52qknzmfg3pfdubj",
            "type": "join",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "mode": "custom",
            "build": "string",
            "property": "payload",
            "propertyType": "msg",
            "key": "topic",
            "joiner": "\\n",
            "joinerType": "str",
            "accumulate": false,
            "timeout": "2",
            "count": "",
            "reduceRight": false,
            "reduceExp": "",
            "reduceInit": "",
            "reduceInitType": "",
            "reduceFixup": "",
            "x": 670,
            "y": 220,
            "wires": [
                [
                    "rr83igia8hxwh5nb"
                ]
            ]
        },
        {
            "id": "p3fxtxdpzjdvtly6",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Process response",
            "func": "flow.set(\"z\", msg.payload);\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 260,
            "wires": [
                []
            ]
        },
        {
            "id": "f37ieu8cwp9zhxco",
            "type": "join",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "mode": "custom",
            "build": "string",
            "property": "payload",
            "propertyType": "msg",
            "key": "topic",
            "joiner": "\\n",
            "joinerType": "str",
            "accumulate": false,
            "timeout": "2",
            "count": "",
            "reduceRight": false,
            "reduceExp": "",
            "reduceInit": "",
            "reduceInitType": "",
            "reduceFixup": "",
            "x": 670,
            "y": 260,
            "wires": [
                [
                    "p3fxtxdpzjdvtly6"
                ]
            ]
        },
        {
            "id": "1uqm0p3l1igog389",
            "type": "link out",
            "z": "6b0c29418e1a67ee",
            "name": "link out 23",
            "mode": "link",
            "links": [
                "u19anxprfjwgl557"
            ],
            "x": 1755,
            "y": 300
        },
        {
            "id": "b2q0xt6mqpjlroar",
            "type": "switch",
            "z": "6b0c29418e1a67ee",
            "name": "Check data",
            "property": "data",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 190,
            "y": 680,
            "wires": [
                [
                    "e9uulrti8nhbteq9"
                ]
            ]
        },
        {
            "id": "ylqq1j3y6j6zuyx5",
            "type": "function",
            "z": "6b0c29418e1a67ee",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nfor (var metricId in msg.payload) {\n    flow.get(\"bridge\").image.metrics[metricId] = msg.payload[metricId];\n    cloudBridge.image.metrics[metricId] = msg.payload[metricId];\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 820,
            "y": 680,
            "wires": [
                []
            ]
        },
        {
            "id": "dfc539f331ac10ed",
            "type": "delay",
            "z": "6b0c29418e1a67ee",
            "name": "",
            "pauseType": "rate",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "30",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": true,
            "allowrate": false,
            "outputs": 1,
            "x": 1640,
            "y": 180,
            "wires": [
                [
                    "bex8q817rholftvz"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "u2yoii8gazsirscd",
            "type": "serial-port",
            "z": "6b0c29418e1a67ee",
            "serialport": "/dev/rfcomm0",
            "serialbaud": "19200",
            "databits": "8",
            "parity": "none",
            "stopbits": "1",
            "waitfor": "",
            "dtr": "none",
            "rts": "none",
            "cts": "none",
            "dsr": "none",
            "newline": "\\n",
            "bin": "bin",
            "out": "char",
            "addchar": "\\r\\n",
            "responsetimeout": "2000"
        }
    ]
}