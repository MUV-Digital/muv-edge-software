{
    "id": "29335d45ab70ed0d",
    "label": "6524fcf72cee6969cbd400f4",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "pucfktitf3ghv83h",
            "type": "mqtt in",
            "z": "29335d45ab70ed0d",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 110,
            "y": 940,
            "wires": [
                [
                    "o2uxbbjfzfnx5pcf"
                ]
            ]
        },
        {
            "id": "mfttv3nc86fp9c1h",
            "type": "mqtt out",
            "z": "29335d45ab70ed0d",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1140,
            "y": 900,
            "wires": []
        },
        {
            "id": "z682e063tlniiap4",
            "type": "inject",
            "z": "29335d45ab70ed0d",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 780,
            "wires": [
                [
                    "vo7qfw9pvilxzr5g"
                ]
            ]
        },
        {
            "id": "dfrnosi1bibsc1vz",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 170,
            "y": 900,
            "wires": [
                [
                    "pucfktitf3ghv83h"
                ]
            ]
        },
        {
            "id": "46sveav2mm0yzg2f",
            "type": "inject",
            "z": "29335d45ab70ed0d",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "mfecg98wwjjnwk3o"
                ]
            ]
        },
        {
            "id": "mfecg98wwjjnwk3o",
            "type": "getflows",
            "z": "29335d45ab70ed0d",
            "name": "",
            "x": 300,
            "y": 80,
            "wires": [
                [
                    "miwhcowre1vlimxs"
                ]
            ]
        },
        {
            "id": "miwhcowre1vlimxs",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\nflow.set(\"data\", \"\");\nflow.set(\"edge\", {\"calculated\": {}});\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 80,
            "wires": [
                [
                    "9817wqjczlnqwojl"
                ]
            ]
        },
        {
            "id": "vo7qfw9pvilxzr5g",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 820,
            "wires": [
                [
                    "5rdc5pym1huhr9gk"
                ],
                [
                    "uppx842t4ps2v0dx"
                ]
            ]
        },
        {
            "id": "5rdc5pym1huhr9gk",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 820,
            "wires": []
        },
        {
            "id": "9w3c7s7057q5dlmq",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "send bridge data request",
            "func": "msg.sequences = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === msg.payload);\n\nif (msg.payload !== \"$app data_list_hs\" && msg.sequences.length > 0) {\n    return msg;\n}\n\nnode.done();",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 730,
            "y": 440,
            "wires": [
                [
                    "z0qob7jo1en93i4d"
                ]
            ]
        },
        {
            "id": "b7hgetxzxtxj4u2f",
            "type": "comment",
            "z": "29335d45ab70ed0d",
            "name": "----- Register for commands from cloud",
            "info": "",
            "x": 150,
            "y": 720,
            "wires": []
        },
        {
            "id": "heqy3xvnquc28stc",
            "type": "comment",
            "z": "29335d45ab70ed0d",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "9817wqjczlnqwojl",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 580,
            "y": 80,
            "wires": [
                [
                    "blna7gfnsx0cxhby"
                ]
            ]
        },
        {
            "id": "6vrn37lk98wm8xlg",
            "type": "comment",
            "z": "29335d45ab70ed0d",
            "name": "---- Data",
            "info": "",
            "x": 60,
            "y": 320,
            "wires": []
        },
        {
            "id": "aw30033mp3t9dzh2",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 160,
            "y": 400,
            "wires": [
                [
                    "ah3y5egwjaz25b7n"
                ]
            ]
        },
        {
            "id": "dyzibblhob9ad0qq",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var metricId in msg.payload) {\n    if (typeof msg.payload[metricId] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[metricId] = Math.round((msg.payload[metricId] + Number.EPSILON) * 100) / 100\n    }\n    if (flow.get(\"bridge\").image.protocols.find(protocol => protocol.id === metricId).topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[metricId] !== msg.payload[metricId]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (flow.get(\"bridge\").image.protocols.find(protocol => protocol.id === metricId).topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[metricId] !== msg.payload[metricId]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[metricId] = msg.payload[metricId];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1740,
            "y": 440,
            "wires": [
                [
                    "j7cbisa36mq9pvrk",
                    "441dxkwex7pje7xp"
                ]
            ]
        },
        {
            "id": "ogxxr8s37452p930",
            "type": "inject",
            "z": "29335d45ab70ed0d",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 360,
            "wires": [
                [
                    "aw30033mp3t9dzh2"
                ]
            ]
        },
        {
            "id": "lbbeu1lcntjuu5sp",
            "type": "delay",
            "z": "29335d45ab70ed0d",
            "name": "",
            "pauseType": "delay",
            "timeout": "10",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 940,
            "y": 900,
            "wires": [
                [
                    "mfttv3nc86fp9c1h"
                ]
            ]
        },
        {
            "id": "j7cbisa36mq9pvrk",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1160,
            "y": 860,
            "wires": [
                [
                    "mfttv3nc86fp9c1h"
                ]
            ]
        },
        {
            "id": "o2uxbbjfzfnx5pcf",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "send write data",
            "func": "if (msg.payload.protocol.type === \"bool\" && typeof msg.payload.value === \"boolean\") {\n    if (msg.payload.protocol.invert) {\n        msg.payload.value = !msg.payload.value;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 5,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": 1\n    }\n} else if (msg.payload.protocol.type === \"bool\" && typeof msg.payload.value !== \"boolean\") {\n    if (msg.payload.protocol.invert) {\n        msg.payload.value = msg.payload.value * -1;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 6,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": 1\n    }\n} else {\n    msg.payload = {\n        \"value\": parseInt(msg.payload.value) * (1 / msg.payload.protocol.scale),\n        \"fc\": 16,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": global.get(\"function.typeToRegisterLength\")(msg.payload.protocol.type)\n    }\n}\n\nnode.send(msg);\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 310,
            "y": 940,
            "wires": [
                [
                    "mo04xedb0lz47zw3"
                ]
            ]
        },
        {
            "id": "441dxkwex7pje7xp",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1160,
            "y": 780,
            "wires": [
                [
                    "ro6ox4q2ig4u2b5e"
                ]
            ]
        },
        {
            "id": "ro6ox4q2ig4u2b5e",
            "type": "mqtt out",
            "z": "29335d45ab70ed0d",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1140,
            "y": 820,
            "wires": []
        },
        {
            "id": "mo04xedb0lz47zw3",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Channel 1",
            "property": "channel",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "1",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 540,
            "y": 940,
            "wires": [
                []
            ]
        },
        {
            "id": "bbx9cg9a3p8odg9r",
            "type": "serial in",
            "z": "29335d45ab70ed0d",
            "name": "",
            "serial": "lorr79ftsy9b9o3j",
            "x": 150,
            "y": 180,
            "wires": [
                [
                    "d672yadfedz24okr"
                ]
            ]
        },
        {
            "id": "4kbzj73swgnutay6",
            "type": "serial out",
            "z": "29335d45ab70ed0d",
            "name": "",
            "serial": "lorr79ftsy9b9o3j",
            "x": 1080,
            "y": 380,
            "wires": []
        },
        {
            "id": "gv1h76ni953c4251",
            "type": "change",
            "z": "29335d45ab70ed0d",
            "name": "set data from message",
            "rules": [
                {
                    "t": "set",
                    "p": "data",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 460,
            "y": 180,
            "wires": [
                []
            ]
        },
        {
            "id": "l20d7ywqs7eqjcyy",
            "type": "serial request",
            "z": "29335d45ab70ed0d",
            "name": "",
            "serial": "lorr79ftsy9b9o3j",
            "x": 1080,
            "y": 440,
            "wires": [
                [
                    "kwx1intmehnrpdfw"
                ]
            ]
        },
        {
            "id": "z0qob7jo1en93i4d",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "\\n",
            "func": "msg.payload += Buffer.from(\"0D\", \"hex\");\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 910,
            "y": 440,
            "wires": [
                [
                    "l20d7ywqs7eqjcyy"
                ]
            ]
        },
        {
            "id": "d672yadfedz24okr",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "cont",
                    "v": "pm ",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 290,
            "y": 180,
            "wires": [
                [
                    "gv1h76ni953c4251"
                ]
            ]
        },
        {
            "id": "bojb78bgbd8bfvpd",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "send requests",
            "func": "function extractUniqueValues(jsonArray, property) {\n    var values = jsonArray.map(function (item) {\n        return item[property];\n    });\n\n    return values.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nconst requests = extractUniqueValues(flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.operations === \"R\" || dataPoint.operations === \"R/W\"), \"request\");\n\nrequests.forEach(request => {\n    msg.payload = request;\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 340,
            "y": 440,
            "wires": [
                [
                    "0di8b7z2h57vxo5y",
                    "nuzfsmip8d3mll47"
                ]
            ]
        },
        {
            "id": "0di8b7z2h57vxo5y",
            "type": "delay",
            "z": "29335d45ab70ed0d",
            "name": "",
            "pauseType": "rate",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "2",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 520,
            "y": 440,
            "wires": [
                []
            ]
        },
        {
            "id": "bg96w3msh6xhlqpp",
            "type": "inject",
            "z": "29335d45ab70ed0d",
            "name": "Sumalted Data",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "pm 50.0 50.0 0.0 400.0 8.3 28.5 82.1 141.1 540.9 141.1 24.0 106.3 32.6 100 70 0 0 0.0 0.0 0 0 0 0 0 7 11 1000.0 3007 0 0 0 0 0 0 0",
            "payloadType": "str",
            "x": 180,
            "y": 240,
            "wires": [
                [
                    "ajf11sdx08wf82hr"
                ]
            ]
        },
        {
            "id": "ajf11sdx08wf82hr",
            "type": "change",
            "z": "29335d45ab70ed0d",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "data",
                    "pt": "flow",
                    "to": "pm 50.0 50.0 0.0 400.0 8.3 28.5 82.1 141.1 540.9 141.1 24.0 106.3 32.6 100 70 0 0 0.0 0.0 0 0 0 0 0 7 0 1000.0 3007 0 0 0 0 0 0 0",
                    "tot": "str"
                },
                {
                    "t": "set",
                    "p": "edge",
                    "pt": "flow",
                    "to": "{\"calculated\": {}}",
                    "tot": "json"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 360,
            "y": 240,
            "wires": [
                []
            ]
        },
        {
            "id": "7kiyuidaxwi9g6v6",
            "type": "flogger",
            "z": "29335d45ab70ed0d",
            "name": "Debug",
            "logfile": "${NR_FLOW_NAME}.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "DEBUG",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 910,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "blna7gfnsx0cxhby",
            "type": "change",
            "z": "29335d45ab70ed0d",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "Bridge config found",
                    "tot": "str"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 760,
            "y": 80,
            "wires": [
                [
                    "7kiyuidaxwi9g6v6"
                ]
            ]
        },
        {
            "id": "68uudm822bmprtz7",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "Set data point values",
            "func": "const data = msg.payload\nif (data.includes(\"pm \")) {\n    node.done();\n}\n\nfunction hex2bin(hex) {\n    return (parseInt(hex, 16).toString(2)).padStart(8, '0');\n}\n\nvar dataPoints = {}\nvar values = data.split(Buffer.from(\"0D\", \"hex\").toString());\nmsg.sequences.forEach(sequence => {\n    if (values.length < sequence.address) {\n        node.warn(\"Response doesn't contain value: \" + sequence.id);\n    } else if (sequence.type === \"bit\") {\n        dataPoints[sequence.id] = parseInt(hex2bin(values[sequence.address]).charAt(sequence.offsetbit))\n    }\n    else {\n        dataPoints[sequence.id] = parseInt(values[sequence.address]);\n    }\n});\n\nmsg.payload = dataPoints;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1420,
            "y": 440,
            "wires": [
                [
                    "dyzibblhob9ad0qq"
                ]
            ]
        },
        {
            "id": "23hc070shrja2k4w",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "Set notified values",
            "func": "const data = flow.get(\"data\");\nif (!data.includes(\"pm \")) {\n    node.warn(\"Value notification invalid!\");\n    node.done();\n}\n\nfunction hex2bin(hex) {\n    return (parseInt(hex, 16).toString(2)).padStart(8, '0');\n}\n\nvar values = data.replace('pm ', '').split(\" \");\nvar dataPoints = {}\nmsg.sequences.forEach(sequence => {\n    if (values.length < sequence.address) {\n        node.warn(\"Value notification doesn't contain value: \" + sequence.id);\n    } else if (sequence.type === \"bit\") {\n        dataPoints[sequence.id] = parseInt(hex2bin(values[sequence.address]).charAt(sequence.offsetbit))\n    }\n    else{\n        dataPoints[sequence.id] = parseFloat(values[sequence.address]);\n    }\n});\n\nmsg.payload = dataPoints;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1430,
            "y": 480,
            "wires": [
                [
                    "dyzibblhob9ad0qq"
                ]
            ]
        },
        {
            "id": "nuzfsmip8d3mll47",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "send bridge data processing",
            "func": "msg.sequences = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.request === msg.payload);\n\nif (msg.payload === \"$app data_list_hs\" && msg.sequences.length > 0) {\n    return msg;\n}\n\nnode.done();",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 740,
            "y": 480,
            "wires": [
                [
                    "jg1u3ib0syq4rjsn"
                ]
            ]
        },
        {
            "id": "kwx1intmehnrpdfw",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1250,
            "y": 440,
            "wires": [
                [
                    "68uudm822bmprtz7"
                ]
            ]
        },
        {
            "id": "jg1u3ib0syq4rjsn",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "",
            "property": "data",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1250,
            "y": 480,
            "wires": [
                [
                    "23hc070shrja2k4w"
                ]
            ]
        },
        {
            "id": "3evc4hmfbak9yyi8",
            "type": "flogger",
            "z": "29335d45ab70ed0d",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 600,
            "y": 1140,
            "wires": [
                []
            ]
        },
        {
            "id": "hw9yepwqcg4k1lx3",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 270,
            "y": 1140,
            "wires": [
                [
                    "jzl1touoli1ut93u"
                ]
            ]
        },
        {
            "id": "i6bo7771l1eted4f",
            "type": "catch",
            "z": "29335d45ab70ed0d",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 130,
            "y": 1140,
            "wires": [
                [
                    "hw9yepwqcg4k1lx3"
                ]
            ]
        },
        {
            "id": "jzl1touoli1ut93u",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 440,
            "y": 1140,
            "wires": [
                [
                    "3evc4hmfbak9yyi8"
                ]
            ]
        },
        {
            "id": "2dx474ozredc8jmm",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "send edge requests",
            "func": "msg.sequences = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.operations === \"EDGE_READ\" && dataPoint.type === \"calculated\");\nmsg.payload = {};\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1150,
            "y": 540,
            "wires": [
                [
                    "w93lcib4ksl093ag"
                ]
            ]
        },
        {
            "id": "w93lcib4ksl093ag",
            "type": "function",
            "z": "29335d45ab70ed0d",
            "name": "set calculated edge values",
            "func": "const functions = {\n    \"kwh\" : (metricId, valueId) => {\n        if (!flow.get(\"edge.calculated\").hasOwnProperty(metricId)){\n            flow.get(\"edge.calculated\")[metricId] = 0;\n        }\n        flow.get(\"edge.calculated\")[metricId] = flow.get(\"edge.calculated\")[metricId] + (flow.get(\"bridge.image.metrics\")[valueId] / 3600);\n    }\n}\n\nmsg.sequences.forEach(sequence => {\n    let calc = sequence.calcuation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if(metricsExist){\n        functions[calc.func](sequence.id, ...calc.ids)\n    }\n});\n\nmsg.payload = flow.get(\"edge.calculated\");\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1400,
            "y": 540,
            "wires": [
                [
                    "dyzibblhob9ad0qq"
                ]
            ]
        },
        {
            "id": "6a2xjcxobq6lbmcd",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 190,
            "y": 660,
            "wires": [
                [
                    "2dx474ozredc8jmm"
                ]
            ]
        },
        {
            "id": "sy8mx45aea1hn963",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 180,
            "y": 620,
            "wires": [
                [
                    "6a2xjcxobq6lbmcd"
                ]
            ]
        },
        {
            "id": "k5ogawtqn78nx82s",
            "type": "inject",
            "z": "29335d45ab70ed0d",
            "name": "Calculation intervall",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 200,
            "y": 580,
            "wires": [
                [
                    "sy8mx45aea1hn963"
                ]
            ]
        },
        {
            "id": "uppx842t4ps2v0dx",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 150,
            "y": 860,
            "wires": [
                [
                    "dfrnosi1bibsc1vz"
                ]
            ]
        },
        {
            "id": "ah3y5egwjaz25b7n",
            "type": "switch",
            "z": "29335d45ab70ed0d",
            "name": "Check BLE",
            "property": "hardware.ble",
            "propertyType": "global",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 170,
            "y": 440,
            "wires": [
                [
                    "bojb78bgbd8bfvpd"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "lorr79ftsy9b9o3j",
            "type": "serial-port",
            "z": "29335d45ab70ed0d",
            "serialport": "/dev/rfcomm0",
            "serialbaud": "19200",
            "databits": "8",
            "parity": "none",
            "stopbits": "1",
            "waitfor": "",
            "dtr": "none",
            "rts": "none",
            "cts": "none",
            "dsr": "none",
            "newline": "\\n",
            "bin": "false",
            "out": "char",
            "addchar": "",
            "responsetimeout": "2000"
        }
    ]
}