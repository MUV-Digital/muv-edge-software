{
    "id": "9a1dfed890436e6b",
    "label": "123123123123",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "g91h56454svjmazs",
            "type": "tcp in",
            "z": "9a1dfed890436e6b",
            "name": "Receive raw XML alarm",
            "server": "server",
            "host": "",
            "port": "4000",
            "datamode": "stream",
            "datatype": "utf8",
            "newline": "",
            "topic": "",
            "trim": false,
            "base64": false,
            "tls": "",
            "x": 180,
            "y": 480,
            "wires": [
                [
                    "kopwsxrow3coq8pj"
                ]
            ]
        },
        {
            "id": "kopwsxrow3coq8pj",
            "type": "xml",
            "z": "9a1dfed890436e6b",
            "name": "Parse XML",
            "property": "payload",
            "attr": "",
            "chr": "",
            "x": 400,
            "y": 480,
            "wires": [
                [
                    "dxqv78o5xtidj2rw"
                ]
            ]
        },
        {
            "id": "dxqv78o5xtidj2rw",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "Extract values",
            "func": "const a = msg.payload.alarm;\n\nfunction parseDateTime(dateStr, timeStr) {\n    if (!dateStr || !timeStr) return null;\n    const [day, month, year] = dateStr.split(\"/\").map(s => s.trim());\n    const [hour, minute] = timeStr.trim().split(\":\");\n    return `${\"20\" + year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}T${hour}:${minute}:00`;\n}\n\nmsg.payload = {\n    ref: a.ref?.[0],\n    store: a.storeName?.[0],\n    unit: a.unitName?.[0],\n    device: a.deviceName?.[0]?.trim(),\n    name: a.name?.[0],\n    status: a.status?.[0],\n    action: a.action?.[0],\n    severity: a.severity?.[0],\n    setting: a.setting?.[0],\n    occurred: parseDateTime(a.occurDate?.[0], a.occurTime?.[0]),\n    cleared: parseDateTime(a.clearDate?.[0], a.clearTime?.[0]),\n    acknowledged: parseDateTime(a.ackDate?.[0], a.ackTime?.[0]),\n    ackUser: a.ackUserAcct?.[0],\n    value: a.value?.[0]?._,\n    parval: a.value?.[0]?.$?.parval,\n    ip: msg.ip?.replace(\"::ffff:\", \"\")\n};\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 600,
            "y": 480,
            "wires": [
                [
                    "ixchnyhd683ycg90",
                    "ii4555gzajwaqgzv",
                    "tap1k3ckqdbj2zon"
                ]
            ]
        },
        {
            "id": "onymdoebqy5p0ch6",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "Send ack",
            "func": "const ref = msg.payload.ref\nif (ref !== undefined && ref !== null) {\n    msg.payload = `<ack ref=\"${ref}\"/>`;\n\n    return msg;\n}\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1240,
            "y": 480,
            "wires": [
                [
                    "z4t1k99vja4sl16y",
                    "hw0ardwr0w51onne"
                ]
            ]
        },
        {
            "id": "z4t1k99vja4sl16y",
            "type": "tcp out",
            "z": "9a1dfed890436e6b",
            "name": "",
            "host": "",
            "port": "",
            "beserver": "reply",
            "base64": false,
            "end": false,
            "tls": "",
            "x": 1390,
            "y": 480,
            "wires": []
        },
        {
            "id": "5tv869vzyn8hl9d5",
            "type": "comment",
            "z": "9a1dfed890436e6b",
            "name": "Interface Docu",
            "info": "# ðŸ“˜ Danfoss Alarm XML Format\n\nEach alarm is represented by an `<alarm>` element with the following structure:\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `alarm`             | â€”                 | Identifies this message as an alarm |\n\n## Alarm Metadata\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `ref`               | int               | Unique alarm reference number (range 1â€“2,147,483,647); resets after alarm log is cleared |\n| `storeName`         | string            | Configured name of store (max 16 chars) |\n| `unitNumber`        | int               | System Manager unit number (0â€“9, 0 = master) |\n| `unitName`          | string            | Name of System Manager unit (max 16 chars) |\n| `deviceName`        | string            | Name of device (e.g. AKC55, EKC204A) |\n| `deviceModel`       | string            | Model number (e.g. 084B8520) |\n| `nodetype`          | int               | Number identifying the device type (see \"Node Types\") |\n| `addr`              | string            | Board and point number in display format (e.g. \" 20\") |\n| `class`             | string            | Alarm class name (used for routing) |\n| `class_id`          | int               | ID for alarm class |\n| `level_id`          | int               | ID for alarm severity/type (e.g. Hi_Temp) |\n| `name`              | string            | Alarm name |\n| `name_id`           | int               | ID for generic alarm name (0-based index from EDF) |\n| `device_id`         | string            | Composed of `<MODEL>_<VERSION>` from EDF file (e.g. `080Z0124_012x`) |\n\n## Alarm State\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `status`            | string            | \"active\" or \"cleared\" |\n| `action`            | string            | \"Critical\", \"Normal\", \"Log only\", or \"Disabled\" |\n| `acked_clearable`   | int               | `1` = can be cleared, `0` = not clearable |\n| `value`             | string / decimal  | Value when alarm tripped (e.g. \"Trip\", \"OK\", or numeric) |\n| `current_value`     | string            | Current value (may match `value`) |\n| `parval`            | int / decimal     | Raw numeric value (may be `null`) |\n| `units`             | string            | Units of the value |\n| `units_index`       | int               | Index for the units |\n| `setting`           | string            | Alarm description or trigger setting |\n| `acknowledgement`   | string            | \"Yes\" if acknowledged, \"No\" if not |\n\n## Timestamps\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `occurDate`         | date              | Date when alarm occurred |\n| `occurTime`         | time              | Time when alarm occurred |\n| `clearDate`         | date              | Date when alarm was cleared |\n| `clearTime`         | time              | Time when alarm was cleared |\n| `epoch`             | int               | Epoch timestamp when alarm occurred |\n| `epoch_cleared`     | int               | Epoch timestamp when alarm was cleared |\n| `ackDate`           | string            | Date when alarm was acknowledged |\n| `ackTime`           | string            | Time when alarm was acknowledged |\n| `epoch_acked`       | int               | Epoch timestamp of acknowledgement |\n| `inactiveDate`      | string            | Date when alarm became inactive |\n| `inactiveTime`      | string            | Time when alarm became inactive |\n| `epoch_inactive`    | int               | Epoch timestamp when alarm became inactive |\n\n## Networking & Identity\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `ipAddr`            | string            | IP address of System Manager (e.g. `192.168.1.51`) |\n| `macAddr`           | string            | MAC address of System Manager (e.g. `00-0B-2D-0D-17-7E`) |\n| `storeId1`          | string            | Store ID (8 characters, left-justified with spaces if short) |\n| `storeId2`          | string            | Secondary store ID (8 characters) |\n\n## Transmission Info\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `xmitNum`           | int               | Retransmission counter (starts at 1) |\n| `routingAction`     | int               | Routing action (range: 1â€“15) |\n\n## State Flags\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `active_state`      | int               | `1` = alarm active, `0` = condition returned to normal |\n| `acked_state`       | int               | `1` = acknowledged; may be forced depending on firmware |\n| `cleared_state`     | int               | `1` = cleared manually; may be forced depending on firmware |\n\n## User Info\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `ackUserAcct`       | string            | User account (e.g. `99-99`) that acknowledged the alarm |\n| `clearUserAcct`     | string            | User account that cleared the alarm |\n\n## System View\n\n| Element             | Data Type         | Definition |\n|---------------------|-------------------|------------|\n| `listed_as`         | int               | Display list: `1` = active, `2` = acknowledged, `3` = cleared |",
            "x": 600,
            "y": 440,
            "wires": []
        },
        {
            "id": "a3se8dru9l4bm9p7",
            "type": "inject",
            "z": "9a1dfed890436e6b",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 60,
            "wires": [
                [
                    "5smd195k7e1kh4je"
                ]
            ]
        },
        {
            "id": "5smd195k7e1kh4je",
            "type": "getflows",
            "z": "9a1dfed890436e6b",
            "name": "",
            "x": 320,
            "y": 60,
            "wires": [
                [
                    "ymhw7wbpsngsc8d6"
                ]
            ]
        },
        {
            "id": "ymhw7wbpsngsc8d6",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\nbridge.error = false;\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 60,
            "wires": [
                [
                    "ilyjuv7ie7wvf8lu"
                ]
            ]
        },
        {
            "id": "ilyjuv7ie7wvf8lu",
            "type": "switch",
            "z": "9a1dfed890436e6b",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 60,
            "wires": [
                [
                    "cpqkbwdeilew4aue"
                ]
            ]
        },
        {
            "id": "1mftjg547txb08jb",
            "type": "switch",
            "z": "9a1dfed890436e6b",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 280,
            "y": 320,
            "wires": [
                [
                    "j5q8n5taigkf0wua"
                ]
            ]
        },
        {
            "id": "5c0y9pwvwd0lvoeg",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nconst executor = (metricId, func, parameterIds) => {\n    msg.payload[metricId] = eval(\"(\" + func + \")\")(...parameterIds.map(x => flow.get(\"bridge.image.metrics\")[x]))\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        if (functions.hasOwnProperty(calc.func)){\n            functions[calc.func](sequence.dataPoint.id, calc.ids)\n        } else {\n            executor(sequence.dataPoint.id, calc.func, calc.ids);\n        }\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 700,
            "y": 320,
            "wires": [
                [
                    "oavkqdch06ojpy5b"
                ]
            ]
        },
        {
            "id": "dm8zks4k163wz2hq",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 500,
            "y": 320,
            "wires": [
                [
                    "5c0y9pwvwd0lvoeg"
                ]
            ]
        },
        {
            "id": "j5q8n5taigkf0wua",
            "type": "switch",
            "z": "9a1dfed890436e6b",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 280,
            "y": 360,
            "wires": [
                [
                    "dm8zks4k163wz2hq"
                ]
            ]
        },
        {
            "id": "l3cjkod3ll6z8hru",
            "type": "comment",
            "z": "9a1dfed890436e6b",
            "name": "---- Virtual Read",
            "info": "",
            "x": 160,
            "y": 260,
            "wires": []
        },
        {
            "id": "i1r8uh6ew74x1dm5",
            "type": "inject",
            "z": "9a1dfed890436e6b",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "30",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 160,
            "wires": [
                [
                    "r02lxudy7qi7dwd6"
                ]
            ]
        },
        {
            "id": "r02lxudy7qi7dwd6",
            "type": "link out",
            "z": "9a1dfed890436e6b",
            "name": "link out 28",
            "mode": "link",
            "links": [
                "8u3k3nand8ed6y70"
            ],
            "x": 365,
            "y": 160
        },
        {
            "id": "oavkqdch06ojpy5b",
            "type": "link out",
            "z": "9a1dfed890436e6b",
            "name": "link out 29",
            "mode": "link",
            "links": [
                "n26njuoem64119vy"
            ],
            "x": 1045,
            "y": 320
        },
        {
            "id": "8u3k3nand8ed6y70",
            "type": "link in",
            "z": "9a1dfed890436e6b",
            "name": "Virtual read",
            "links": [
                "r02lxudy7qi7dwd6"
            ],
            "x": 95,
            "y": 320,
            "wires": [
                [
                    "1mftjg547txb08jb"
                ]
            ]
        },
        {
            "id": "23k4swthtesb73ke",
            "type": "mqtt out",
            "z": "9a1dfed890436e6b",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 780,
            "wires": []
        },
        {
            "id": "ox5ts0gag2rtb6k9",
            "type": "switch",
            "z": "9a1dfed890436e6b",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 920,
            "y": 780,
            "wires": [
                [
                    "23k4swthtesb73ke"
                ]
            ]
        },
        {
            "id": "ik29n88k21eo4noa",
            "type": "switch",
            "z": "9a1dfed890436e6b",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 920,
            "y": 740,
            "wires": [
                [
                    "6igcnr220db0v7iz"
                ]
            ]
        },
        {
            "id": "6igcnr220db0v7iz",
            "type": "mqtt out",
            "z": "9a1dfed890436e6b",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 720,
            "wires": []
        },
        {
            "id": "odeoupnnkg0edkhl",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 640,
            "y": 740,
            "wires": [
                [
                    "ox5ts0gag2rtb6k9",
                    "ik29n88k21eo4noa",
                    "4e5fc2101466fc36"
                ]
            ]
        },
        {
            "id": "n26njuoem64119vy",
            "type": "link in",
            "z": "9a1dfed890436e6b",
            "name": "Set values on bridge",
            "links": [
                "oavkqdch06ojpy5b",
                "qxjhvs6eppf5d3mk"
            ],
            "x": 95,
            "y": 700,
            "wires": [
                [
                    "li6l0omevtosyvrd"
                ]
            ]
        },
        {
            "id": "fcfc6kl3wgmmvbcn",
            "type": "flogger",
            "z": "9a1dfed890436e6b",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 610,
            "y": 1480,
            "wires": [
                []
            ]
        },
        {
            "id": "xyiw4c2a7j827inw",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 280,
            "y": 1480,
            "wires": [
                [
                    "ysf36n6j10f598hp"
                ]
            ]
        },
        {
            "id": "jyyg4i4qv6ppwjhn",
            "type": "catch",
            "z": "9a1dfed890436e6b",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 140,
            "y": 1480,
            "wires": [
                [
                    "xyiw4c2a7j827inw"
                ]
            ]
        },
        {
            "id": "ysf36n6j10f598hp",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 1480,
            "wires": [
                [
                    "fcfc6kl3wgmmvbcn"
                ]
            ]
        },
        {
            "id": "7d6ui03uoch0a6i9",
            "type": "comment",
            "z": "9a1dfed890436e6b",
            "name": "---- Handle errors",
            "info": "",
            "x": 100,
            "y": 1440,
            "wires": []
        },
        {
            "id": "ii4555gzajwaqgzv",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "send alarm data",
            "func": "msg.sequences = flow.get(\"bridge.image.protocols\").filter(protocol => protocol.topic[0] === \"error\" || protocol.topic[0] === \"state\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 780,
            "y": 540,
            "wires": [
                [
                    "wrz904203js52zil"
                ]
            ]
        },
        {
            "id": "wrz904203js52zil",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "set alarm values",
            "func": "const alarmMessage = msg.payload;\nconst name = alarmMessage.name;\nconst status = alarmMessage.status;\nconst action = alarmMessage.action;\nconst sequences = Object.assign(msg.sequences);\nvar sendMessage = false;\n\nif (action === \"Disabled\") {\n    msg = sequences.find(x => x.dataPoint.id === \"ALARM_DISABLED\");\n    // no message\n} else if (action === \"Log only\") {\n    msg = sequences.find(x => x.dataPoint.id === \"ALARM_LOG\");\n    // no message\n} else if (action === \"Normal\") {\n    msg = sequences.find(x => x.dataPoint.id === \"ALARM_NORMAL\");\n    sendMessage = true;\n} else {\n    // Critical\n    msg = sequences.find(x => x.dataPoint.id === \"ALARM_CRITICAL\");\n    sendMessage = true;\n}\n\nif(sendMessage){\n    // Set alarm state\n    msg.payload = {};\n    msg.payload[msg.dataPoint.id] = status.toLowerCase() === \"aktiv\" || status.toLowerCase() === \"active\" ? true : false;\n    node.send(msg);\n\n    // Set alarm message\n    msg = sequences.find(x => x.dataPoint.id === \"ALARM_MESSAGE\");\n    msg.payload = {};\n    msg.payload[msg.dataPoint.id] = status.toLowerCase() === \"aktiv\" || status.toLowerCase() === \"active\" ? name : name;\n    node.send(msg);\n}\n\nnode.done()",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 780,
            "y": 580,
            "wires": [
                [
                    "qxjhvs6eppf5d3mk"
                ]
            ]
        },
        {
            "id": "ixchnyhd683ycg90",
            "type": "delay",
            "z": "9a1dfed890436e6b",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1080,
            "y": 480,
            "wires": [
                [
                    "onymdoebqy5p0ch6"
                ]
            ]
        },
        {
            "id": "qxjhvs6eppf5d3mk",
            "type": "link out",
            "z": "9a1dfed890436e6b",
            "name": "link out 30",
            "mode": "link",
            "links": [
                "n26njuoem64119vy"
            ],
            "x": 1345,
            "y": 580
        },
        {
            "id": "pn0qxpvrmn6nlo9a",
            "type": "switch",
            "z": "9a1dfed890436e6b",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 240,
            "y": 740,
            "wires": [
                [
                    "odeoupnnkg0edkhl"
                ]
            ]
        },
        {
            "id": "li6l0omevtosyvrd",
            "type": "switch",
            "z": "9a1dfed890436e6b",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 240,
            "y": 700,
            "wires": [
                [
                    "pn0qxpvrmn6nlo9a"
                ]
            ]
        },
        {
            "id": "jenotva5uzlfuz32",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "Init error values",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nflow.get(\"bridge\").image.metrics[\"ALARM_CRITICAL\"] = false;\nflow.get(\"bridge\").image.metrics[\"ALARM_NORMAL\"] = false;\nflow.get(\"bridge\").image.metrics[\"ALARM_MESSAGE\"] = \"\";\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 600,
            "y": 1160,
            "wires": [
                []
            ]
        },
        {
            "id": "q1p0d0mqwzbm9y2z",
            "type": "file",
            "z": "9a1dfed890436e6b",
            "name": "Persist States",
            "filename": "/data/danfoss-ak-sm-800a.json",
            "filenameType": "str",
            "appendNewline": true,
            "createDir": true,
            "overwriteFile": "true",
            "encoding": "utf8",
            "x": 600,
            "y": 1340,
            "wires": [
                []
            ]
        },
        {
            "id": "fhfnd49wm0len4sp",
            "type": "file in",
            "z": "9a1dfed890436e6b",
            "name": "Read States",
            "filename": "/data/danfoss-ak-sm-800a.json",
            "filenameType": "str",
            "format": "utf8",
            "chunk": false,
            "sendError": false,
            "encoding": "utf8",
            "allProps": false,
            "x": 150,
            "y": 1200,
            "wires": [
                [
                    "0hww4yokjgjlsuf0"
                ]
            ]
        },
        {
            "id": "42o8p57b2f0w7yz2",
            "type": "catch",
            "z": "9a1dfed890436e6b",
            "name": "",
            "scope": [
                "fhfnd49wm0len4sp"
            ],
            "uncaught": false,
            "x": 130,
            "y": 1160,
            "wires": [
                [
                    "jenotva5uzlfuz32"
                ]
            ]
        },
        {
            "id": "rrv1gpdt6bwgwqnq",
            "type": "change",
            "z": "9a1dfed890436e6b",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "bridge.image.metrics",
                    "tot": "flow"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 360,
            "y": 1340,
            "wires": [
                [
                    "q1p0d0mqwzbm9y2z"
                ]
            ]
        },
        {
            "id": "0hww4yokjgjlsuf0",
            "type": "json",
            "z": "9a1dfed890436e6b",
            "name": "",
            "property": "payload",
            "action": "",
            "pretty": false,
            "x": 290,
            "y": 1200,
            "wires": [
                [
                    "875bh77rwceoq9gf"
                ]
            ]
        },
        {
            "id": "875bh77rwceoq9gf",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "Set persisted values",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nflow.get(\"bridge\").image.metrics = msg.payload;\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 1200,
            "wires": [
                []
            ]
        },
        {
            "id": "tap1k3ckqdbj2zon",
            "type": "debug",
            "z": "9a1dfed890436e6b",
            "name": "Alarm message",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload.name",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 820,
            "y": 420,
            "wires": []
        },
        {
            "id": "hw0ardwr0w51onne",
            "type": "debug",
            "z": "9a1dfed890436e6b",
            "name": "Ack message",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload.name",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1420,
            "y": 440,
            "wires": []
        },
        {
            "id": "9e9b3eb52d749b99",
            "type": "delay",
            "z": "9a1dfed890436e6b",
            "name": "",
            "pauseType": "rate",
            "timeout": "30",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "30",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": true,
            "allowrate": false,
            "outputs": 1,
            "x": 180,
            "y": 1340,
            "wires": [
                [
                    "rrv1gpdt6bwgwqnq"
                ]
            ]
        },
        {
            "id": "55c67d6ce2cc5a43",
            "type": "comment",
            "z": "9a1dfed890436e6b",
            "name": "---- Persistence",
            "info": "",
            "x": 100,
            "y": 1120,
            "wires": []
        },
        {
            "id": "441d619d42ab54a8",
            "type": "link in",
            "z": "9a1dfed890436e6b",
            "name": "Load persisted values",
            "links": [
                "b40cb119ad26ae2a"
            ],
            "x": 45,
            "y": 1200,
            "wires": [
                [
                    "fhfnd49wm0len4sp"
                ]
            ]
        },
        {
            "id": "b40cb119ad26ae2a",
            "type": "link out",
            "z": "9a1dfed890436e6b",
            "name": "link out 31",
            "mode": "link",
            "links": [
                "441d619d42ab54a8"
            ],
            "x": 1015,
            "y": 60
        },
        {
            "id": "cpqkbwdeilew4aue",
            "type": "function",
            "z": "9a1dfed890436e6b",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 60,
            "wires": [
                [
                    "b40cb119ad26ae2a"
                ]
            ]
        },
        {
            "id": "5379e9e84bd7d1c7",
            "type": "link in",
            "z": "9a1dfed890436e6b",
            "name": "Persist values",
            "links": [
                "4e5fc2101466fc36"
            ],
            "x": 45,
            "y": 1340,
            "wires": [
                [
                    "9e9b3eb52d749b99"
                ]
            ]
        },
        {
            "id": "4e5fc2101466fc36",
            "type": "link out",
            "z": "9a1dfed890436e6b",
            "name": "link out 32",
            "mode": "link",
            "links": [
                "5379e9e84bd7d1c7"
            ],
            "x": 815,
            "y": 820
        }
    ]
}