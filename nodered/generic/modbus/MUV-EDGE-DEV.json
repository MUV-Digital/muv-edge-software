{
    "id": "c1fb2cf1a662031d",
    "label": "65bb4ec138cc4e9f937827f1",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "0nv1vkbzgd93h9tp",
            "type": "mqtt out",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 780,
            "wires": []
        },
        {
            "id": "sszkirz7aqquf8r4",
            "type": "inject",
            "z": "c1fb2cf1a662031d",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "dw5vb41p4bxxctx5"
                ]
            ]
        },
        {
            "id": "dw5vb41p4bxxctx5",
            "type": "getflows",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "6qslnw4mioyh7jht"
                ]
            ]
        },
        {
            "id": "6qslnw4mioyh7jht",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "ck90o1v56er0vmr3"
                ]
            ]
        },
        {
            "id": "buvh29soa3z9jfl6",
            "type": "modbus-flex-sequencer",
            "z": "c1fb2cf1a662031d",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "g4dhnohd45lzuigk",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 640,
            "y": 480,
            "wires": [
                [
                    "s3gxpu1jztg9epiw",
                    "ro142c1fjtw6trra",
                    "1wqhzi8h2wuxd5i4"
                ],
                []
            ]
        },
        {
            "id": "u95la724r7m8meuu",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "send bridge data",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"bridge.image.protocols\").filter(protocol => protocol.type !== \"virtual\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint,\n        name: dataPoint.id,\n        fc: dataPoint.fc,\n        address: dataPoint.address,\n        unitid: flow.get(\"bridge.image.controller.unitId\"),\n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.type)\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 480,
            "wires": [
                [
                    "buvh29soa3z9jfl6"
                ]
            ]
        },
        {
            "id": "720stnn1fcynpteh",
            "type": "comment",
            "z": "c1fb2cf1a662031d",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1020,
            "wires": []
        },
        {
            "id": "4bz5bjhobv9roewa",
            "type": "comment",
            "z": "c1fb2cf1a662031d",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "ck90o1v56er0vmr3",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "cvea60nanp43kaf9"
                ]
            ]
        },
        {
            "id": "xstul72aeklp8am7",
            "type": "comment",
            "z": "c1fb2cf1a662031d",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 360,
            "wires": []
        },
        {
            "id": "s3gxpu1jztg9epiw",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Set number data point values",
            "func": "if (!msg.dataPoint.type.includes(\"bool\") || (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\")) {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": msg.dataPoint.type.includes(\"bool\"),\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.type.includes(\"bool\") ? \"bool\" : msg.dataPoint.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.offsetbit,\n            \"scale\": msg.dataPoint.scale.toString(),\n            \"mask\": msg.dataPoint.mask\n        }\n    ];\n\n    if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\" && msg.dataPoint.invert) {\n        msg.payload[0] = Math.abs(msg.payload[0] - 1)\n    }\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 900,
            "y": 480,
            "wires": [
                [
                    "w9y7q1uhk67s9v4h"
                ]
            ]
        },
        {
            "id": "w9y7q1uhk67s9v4h",
            "type": "buffer-parser",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1110,
            "y": 480,
            "wires": [
                [
                    "ahnt1uvmvuxbf8ns"
                ]
            ]
        },
        {
            "id": "npp1e4bsw9a41r4v",
            "type": "inject",
            "z": "c1fb2cf1a662031d",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "2mlzuepikqz64ms1"
                ]
            ]
        },
        {
            "id": "7jouipgwlq8t8owe",
            "type": "modbus-flex-write",
            "z": "c1fb2cf1a662031d",
            "name": "Channel Write",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "server": "g4dhnohd45lzuigk",
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 1000,
            "y": 1160,
            "wires": [
                [
                    "dkv2x0r35c220vvj",
                    "4lpo0h5ig2pvg3sh",
                    "a59inohx30yamlag"
                ],
                []
            ]
        },
        {
            "id": "ro142c1fjtw6trra",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Set boolean data point values",
            "func": "if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] === \"boolean\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.offsetbit];\n\n    if (msg.dataPoint.invert) {\n        payload[msg.name] = !payload[msg.name];\n    }\n\n    msg.payload = payload;\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 910,
            "y": 520,
            "wires": [
                [
                    "ahnt1uvmvuxbf8ns"
                ]
            ]
        },
        {
            "id": "dkv2x0r35c220vvj",
            "type": "delay",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1320,
            "y": 1180,
            "wires": [
                [
                    "0nv1vkbzgd93h9tp"
                ]
            ]
        },
        {
            "id": "9p0xq0tpni71ra1j",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 780,
            "wires": [
                [
                    "0nv1vkbzgd93h9tp"
                ]
            ]
        },
        {
            "id": "cvea60nanp43kaf9",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "jytufc8obuqd07al"
                ]
            ]
        },
        {
            "id": "avre5axf1xjxgg6n",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 740,
            "wires": [
                [
                    "ttplsnggmya8u0up"
                ]
            ]
        },
        {
            "id": "ttplsnggmya8u0up",
            "type": "mqtt out",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 720,
            "wires": []
        },
        {
            "id": "jytufc8obuqd07al",
            "type": "modbus-flex-connector",
            "z": "c1fb2cf1a662031d",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "g4dhnohd45lzuigk",
            "x": 1070,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "pq7g5nb9pv472rtl",
            "type": "comment",
            "z": "c1fb2cf1a662031d",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "2mlzuepikqz64ms1",
            "type": "link out",
            "z": "c1fb2cf1a662031d",
            "name": "link out 14",
            "mode": "link",
            "links": [
                "olz4jiagj0hh69yg",
                "c0av62z5vi6uz8tt"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "olz4jiagj0hh69yg",
            "type": "link in",
            "z": "c1fb2cf1a662031d",
            "name": "Protocol Read",
            "links": [
                "2mlzuepikqz64ms1",
                "4lpo0h5ig2pvg3sh"
            ],
            "x": 75,
            "y": 480,
            "wires": [
                [
                    "uy99vorz8wj9d4d0"
                ]
            ]
        },
        {
            "id": "uy99vorz8wj9d4d0",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 480,
            "wires": [
                [
                    "xsnxq85tucq1erle"
                ]
            ]
        },
        {
            "id": "4lpo0h5ig2pvg3sh",
            "type": "link out",
            "z": "c1fb2cf1a662031d",
            "name": "link out 15",
            "mode": "link",
            "links": [
                "olz4jiagj0hh69yg"
            ],
            "x": 1275,
            "y": 1140
        },
        {
            "id": "c0av62z5vi6uz8tt",
            "type": "link in",
            "z": "c1fb2cf1a662031d",
            "name": "Virtual Read",
            "links": [
                "2mlzuepikqz64ms1"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "deo5p1mbsqviy2gg"
                ]
            ]
        },
        {
            "id": "deo5p1mbsqviy2gg",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "ii2twb9pfvzanj4s"
                ]
            ]
        },
        {
            "id": "768gtenno09d9kc3",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nconst executor = (metricId, func, parameterIds) => {\n    msg.payload[metricId] = eval(\"(\" + func + \")\")(...parameterIds.map(x => flow.get(\"bridge.image.metrics\")[x]))\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        if (functions.hasOwnProperty(calc.func)){\n            functions[calc.func](sequence.dataPoint.id, calc.ids)\n        } else {\n            executor(sequence.dataPoint.id, calc.func, calc.ids);\n        }\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "55m185g0vpv6v9l9"
                ]
            ]
        },
        {
            "id": "ush1hxf6r6ibnix7",
            "type": "comment",
            "z": "c1fb2cf1a662031d",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 640,
            "wires": []
        },
        {
            "id": "t04zne1i29r7ybv5",
            "type": "link in",
            "z": "c1fb2cf1a662031d",
            "name": "Update Metrics",
            "links": [
                "55m185g0vpv6v9l9",
                "ahnt1uvmvuxbf8ns"
            ],
            "x": 75,
            "y": 740,
            "wires": [
                [
                    "lrizs3m355373mvt"
                ]
            ]
        },
        {
            "id": "lrizs3m355373mvt",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 320,
            "y": 740,
            "wires": [
                [
                    "9p0xq0tpni71ra1j",
                    "avre5axf1xjxgg6n"
                ]
            ]
        },
        {
            "id": "ahnt1uvmvuxbf8ns",
            "type": "link out",
            "z": "c1fb2cf1a662031d",
            "name": "link out 17",
            "mode": "link",
            "links": [
                "t04zne1i29r7ybv5"
            ],
            "x": 1275,
            "y": 480
        },
        {
            "id": "h9muzt1ivqml4jjw",
            "type": "flogger",
            "z": "c1fb2cf1a662031d",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 1520,
            "wires": [
                []
            ]
        },
        {
            "id": "if8nod6hpi7pt720",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 1520,
            "wires": [
                [
                    "37mt7olpsbiff1m0"
                ]
            ]
        },
        {
            "id": "m4jporp5pzlhq9rz",
            "type": "catch",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1520,
            "wires": [
                [
                    "if8nod6hpi7pt720"
                ]
            ]
        },
        {
            "id": "37mt7olpsbiff1m0",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1520,
            "wires": [
                [
                    "h9muzt1ivqml4jjw"
                ]
            ]
        },
        {
            "id": "55m185g0vpv6v9l9",
            "type": "link out",
            "z": "c1fb2cf1a662031d",
            "name": "link out 16",
            "mode": "link",
            "links": [
                "t04zne1i29r7ybv5"
            ],
            "x": 1275,
            "y": 260
        },
        {
            "id": "al2mbos1wmzppxtt",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "768gtenno09d9kc3"
                ]
            ]
        },
        {
            "id": "ii2twb9pfvzanj4s",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "al2mbos1wmzppxtt"
                ]
            ]
        },
        {
            "id": "xsnxq85tucq1erle",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 520,
            "wires": [
                [
                    "u95la724r7m8meuu",
                    "fix6j8kcwan4nbgn"
                ]
            ]
        },
        {
            "id": "j60truijxfmfs64r",
            "type": "mqtt in",
            "z": "c1fb2cf1a662031d",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 110,
            "y": 1260,
            "wires": [
                [
                    "5pyevtg35vilrz4t"
                ]
            ]
        },
        {
            "id": "8ijcidfx5wtbs97l",
            "type": "inject",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 110,
            "y": 1080,
            "wires": [
                [
                    "a4qhflq8mgpmtmzl"
                ]
            ]
        },
        {
            "id": "okjd6uvyw0tj51b3",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 290,
            "y": 1200,
            "wires": [
                [
                    "j60truijxfmfs64r"
                ]
            ]
        },
        {
            "id": "a4qhflq8mgpmtmzl",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 1140,
            "wires": [
                [
                    "nyzcr8z8cpkixcko"
                ],
                [
                    "okjd6uvyw0tj51b3"
                ]
            ]
        },
        {
            "id": "nyzcr8z8cpkixcko",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 310,
            "y": 1140,
            "wires": []
        },
        {
            "id": "5pyevtg35vilrz4t",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1260,
            "wires": [
                [
                    "rs7412ld59nspp6r"
                ],
                [
                    "7yropaojbdh7z3n8"
                ]
            ]
        },
        {
            "id": "vx699vhl4ki19v3p",
            "type": "mqtt out",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1370,
            "y": 1260,
            "wires": []
        },
        {
            "id": "rs7412ld59nspp6r",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 570,
            "y": 1240,
            "wires": [
                [
                    "p2bg59yoczf360rp"
                ],
                [
                    "7hx7yf8jdvwycjjh"
                ]
            ]
        },
        {
            "id": "sfoaivvf27rnffvw",
            "type": "debug",
            "z": "c1fb2cf1a662031d",
            "name": "Execute Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1020,
            "y": 1120,
            "wires": []
        },
        {
            "id": "p2bg59yoczf360rp",
            "type": "switch",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1220,
            "wires": [
                [
                    "um259akzn5ytmhwl"
                ],
                [
                    "7jouipgwlq8t8owe",
                    "sfoaivvf27rnffvw"
                ]
            ]
        },
        {
            "id": "um259akzn5ytmhwl",
            "type": "debug",
            "z": "c1fb2cf1a662031d",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1070,
            "y": 1080,
            "wires": []
        },
        {
            "id": "52l5vqp25j2ueeuq",
            "type": "comment",
            "z": "c1fb2cf1a662031d",
            "name": "---- Handle errors",
            "info": "",
            "x": 80,
            "y": 1480,
            "wires": []
        },
        {
            "id": "1nr0ilvpkgx8rxw9",
            "type": "catch",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "scope": [
                "7jouipgwlq8t8owe"
            ],
            "uncaught": false,
            "x": 590,
            "y": 1320,
            "wires": [
                [
                    "u6c7hj6n75xr96eq"
                ]
            ]
        },
        {
            "id": "7yropaojbdh7z3n8",
            "type": "delay",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1260,
            "wires": [
                [
                    "vx699vhl4ki19v3p"
                ]
            ]
        },
        {
            "id": "a59inohx30yamlag",
            "type": "change",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1220,
            "wires": [
                [
                    "7yropaojbdh7z3n8"
                ]
            ]
        },
        {
            "id": "7hx7yf8jdvwycjjh",
            "type": "delay",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1360,
            "wires": [
                [
                    "vx699vhl4ki19v3p"
                ]
            ]
        },
        {
            "id": "u6c7hj6n75xr96eq",
            "type": "change",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1320,
            "wires": [
                [
                    "7hx7yf8jdvwycjjh"
                ]
            ]
        },
        {
            "id": "mle4j4h9psx0fj2n",
            "type": "delay",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "pauseType": "delay",
            "timeout": "30",
            "timeoutUnits": "minutes",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 970,
            "y": 640,
            "wires": [
                [
                    "wfnvzzpxpecslghy"
                ]
            ]
        },
        {
            "id": "fix6j8kcwan4nbgn",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "send virtual data",
            "func": "flow.get(\"bridge.image.protocols\").filter(protocol => protocol.type === \"virtual\").forEach(dataPoint => {\n    if(dataPoint.id === \"COMMUNICATION_ERROR\") {\n        msg.dataPoint = dataPoint;\n        msg.name = dataPoint.id;\n        msg.payload = false;\n        node.send(msg);\n    }\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 580,
            "wires": [
                [
                    "mle4j4h9psx0fj2n",
                    "g14z0x5boz8rm5x2"
                ]
            ]
        },
        {
            "id": "g14z0x5boz8rm5x2",
            "type": "function",
            "z": "c1fb2cf1a662031d",
            "name": "set virtual value",
            "func": "var updatedPayload = {};\nupdatedPayload[msg.name] = msg.payload;\nmsg.payload = updatedPayload;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 960,
            "y": 560,
            "wires": [
                [
                    "ahnt1uvmvuxbf8ns"
                ]
            ]
        },
        {
            "id": "wfnvzzpxpecslghy",
            "type": "change",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 960,
            "y": 600,
            "wires": [
                [
                    "g14z0x5boz8rm5x2"
                ]
            ]
        },
        {
            "id": "1wqhzi8h2wuxd5i4",
            "type": "change",
            "z": "c1fb2cf1a662031d",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 800,
            "y": 660,
            "wires": [
                [
                    "mle4j4h9psx0fj2n"
                ]
            ]
        }
    ],
    "configs": [
        {
            "id": "g4dhnohd45lzuigk",
            "type": "modbus-client",
            "z": "c1fb2cf1a662031d",
            "name": "Flexible Channel",
            "clienttype": "tcp",
            "bufferCommands": true,
            "stateLogEnabled": false,
            "queueLogEnabled": false,
            "failureLogEnabled": true,
            "tcpHost": "127.0.0.1",
            "tcpPort": "10502",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "9600",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "serialAsciiResponseStartDelimiter": "0x3A",
            "unit_id": "1",
            "commandDelay": "1",
            "clientTimeout": "1000",
            "reconnectOnTimeout": true,
            "reconnectTimeout": "2000",
            "parallelUnitIdsAllowed": true,
            "showWarnings": true,
            "showLogs": true
        }
    ]
}