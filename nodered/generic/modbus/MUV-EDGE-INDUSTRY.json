{
    "id": "7e411a7e8ded7f07",
    "label": "64f6cf54ed53db08db10fcd8",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "dv1m2u89fs95zuf3",
            "type": "mqtt in",
            "z": "7e411a7e8ded7f07",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 120,
            "y": 680,
            "wires": [
                [
                    "ayyklygyynq4uipk"
                ]
            ]
        },
        {
            "id": "6k1n68aqlfkuapvq",
            "type": "mqtt out",
            "z": "7e411a7e8ded7f07",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1140,
            "y": 680,
            "wires": []
        },
        {
            "id": "mhyvnv90ddqrwuaw",
            "type": "inject",
            "z": "7e411a7e8ded7f07",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 560,
            "wires": [
                [
                    "g1wlmzva1sq01g44"
                ]
            ]
        },
        {
            "id": "l7262wpgd9yz31sw",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "Set Command for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 180,
            "y": 640,
            "wires": [
                [
                    "dv1m2u89fs95zuf3"
                ]
            ]
        },
        {
            "id": "e55bdfdtd6hnjx1y",
            "type": "inject",
            "z": "7e411a7e8ded7f07",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "sb0r02iywxv9mgcj"
                ]
            ]
        },
        {
            "id": "sb0r02iywxv9mgcj",
            "type": "getflows",
            "z": "7e411a7e8ded7f07",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "bvcrwxbv4mhsfjyy"
                ]
            ]
        },
        {
            "id": "bvcrwxbv4mhsfjyy",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "8insatwwuhos8w9h"
                ]
            ]
        },
        {
            "id": "g1wlmzva1sq01g44",
            "type": "switch",
            "z": "7e411a7e8ded7f07",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 600,
            "wires": [
                [
                    "2bpw7scqyn7mxwg7"
                ],
                [
                    "l7262wpgd9yz31sw"
                ]
            ]
        },
        {
            "id": "2bpw7scqyn7mxwg7",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 600,
            "wires": []
        },
        {
            "id": "ff97p69bwcjpzvb1",
            "type": "modbus-flex-connector",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 1 Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "9abf7e2bfa6562a0",
            "x": 1080,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "axzh6orkn2gwh3k4",
            "type": "modbus-flex-sequencer",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 1 Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "9abf7e2bfa6562a0",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 740,
            "y": 320,
            "wires": [
                [
                    "g78zcwdfo624sk0l",
                    "fgenqtwdmq3wks06"
                ],
                []
            ]
        },
        {
            "id": "q13k6vqaordd019a",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "send data based on bridge channel 1",
            "func": "msg.payload = \"\";\n\nif (flow.get(\"bridge.image.controller.channel\") === 1) {\n    msg.sequences = flow.get(\"bridge.image.protocols\").map(dataPoint => {\n        return {\n            dataPoint: dataPoint,\n            name: dataPoint.id,\n            fc: dataPoint.protocol.fc,\n            address: dataPoint.protocol.address,\n            unitid: flow.get(\"bridge.image.controller.unitId\"),\n            quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.protocol.type)\n        };\n    });\n\n    if (msg.sequences.length > 0) {\n        node.send(msg);\n    }\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 320,
            "wires": [
                [
                    "axzh6orkn2gwh3k4"
                ]
            ]
        },
        {
            "id": "r5fr8hnp5uw3j7aw",
            "type": "comment",
            "z": "7e411a7e8ded7f07",
            "name": "----- Register for commands from cloud",
            "info": "",
            "x": 150,
            "y": 500,
            "wires": []
        },
        {
            "id": "kwqqh3sj8vlgrb78",
            "type": "comment",
            "z": "7e411a7e8ded7f07",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "8insatwwuhos8w9h",
            "type": "switch",
            "z": "7e411a7e8ded7f07",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "v647260sx3amork7",
                    "m93veoepaqx4u3ua"
                ]
            ]
        },
        {
            "id": "b3rb8bihozhd36qv",
            "type": "comment",
            "z": "7e411a7e8ded7f07",
            "name": "---- Data",
            "info": "",
            "x": 60,
            "y": 200,
            "wires": []
        },
        {
            "id": "g78zcwdfo624sk0l",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "Set number data point values",
            "func": "if (msg.dataPoint.protocol.type !== \"bool\" || (msg.dataPoint.protocol.type === \"bool\" && typeof msg.payload[0] !== \"boolean\")) {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": false,\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.protocol.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.protocol.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.protocol.offsetbit,\n            \"scale\": msg.dataPoint.protocol.scale.toString(),\n            \"mask\": msg.dataPoint.protocol.mask\n        }\n    ];\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1040,
            "y": 340,
            "wires": [
                [
                    "2re01kerjjameh6b"
                ]
            ]
        },
        {
            "id": "2re01kerjjameh6b",
            "type": "buffer-parser",
            "z": "7e411a7e8ded7f07",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1370,
            "y": 340,
            "wires": [
                [
                    "yd7vhcw6tles9ga3"
                ]
            ]
        },
        {
            "id": "ij3dsvjzldcm57yy",
            "type": "switch",
            "z": "7e411a7e8ded7f07",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 160,
            "y": 320,
            "wires": [
                [
                    "q13k6vqaordd019a",
                    "g4te36hv3b7mkxnw"
                ]
            ]
        },
        {
            "id": "yd7vhcw6tles9ga3",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.protocol.topic.find(topic => topic === \"error\")) {\n        if (flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n        }\n    } else if (msg.dataPoint.protocol.topic.find(topic => topic === \"state\")) {\n        if (flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.stateUpstreamRequired = true;\n        }\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1600,
            "y": 380,
            "wires": [
                [
                    "y7hj97f8brd9mj45",
                    "hfso8q1k5q12sw53"
                ]
            ]
        },
        {
            "id": "8gyfsoinn2qsoqu7",
            "type": "inject",
            "z": "7e411a7e8ded7f07",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "20",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 260,
            "wires": [
                [
                    "ij3dsvjzldcm57yy"
                ]
            ]
        },
        {
            "id": "0j508xsjlkvjsgxp",
            "type": "modbus-flex-write",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 1 Write",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "server": "9abf7e2bfa6562a0",
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 760,
            "y": 680,
            "wires": [
                [
                    "ij3dsvjzldcm57yy",
                    "402ny4w16z2ye3iv"
                ],
                []
            ]
        },
        {
            "id": "fgenqtwdmq3wks06",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "Set boolean data point values",
            "func": "if (msg.dataPoint.protocol.type === \"bool\" && typeof msg.payload[0] === \"boolean\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.protocol.offsetbit];\n\n    if (msg.dataPoint.protocol.invert) {\n        payload[msg.name] = !payload[msg.name];\n    }\n\n    msg.payload = payload;\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1050,
            "y": 380,
            "wires": [
                [
                    "yd7vhcw6tles9ga3"
                ]
            ]
        },
        {
            "id": "402ny4w16z2ye3iv",
            "type": "delay",
            "z": "7e411a7e8ded7f07",
            "name": "",
            "pauseType": "delay",
            "timeout": "10",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 960,
            "y": 680,
            "wires": [
                [
                    "6k1n68aqlfkuapvq"
                ]
            ]
        },
        {
            "id": "y7hj97f8brd9mj45",
            "type": "switch",
            "z": "7e411a7e8ded7f07",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1160,
            "y": 640,
            "wires": [
                [
                    "6k1n68aqlfkuapvq"
                ]
            ]
        },
        {
            "id": "05yu235jtq3aqxem",
            "type": "modbus-flex-connector",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 10 Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "b3aea7855b156b44",
            "x": 1080,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "g4te36hv3b7mkxnw",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "send data based on config channel 10",
            "func": "msg.payload = \"\";\n\nif (flow.get(\"bridge.image.controller.channel\") === 10) {\n    msg.sequences = flow.get(\"bridge.image.protocols\").map(dataPoint => {\n        return {\n            dataPoint: dataPoint,\n            name: dataPoint.id,\n            fc: dataPoint.protocol.fc,\n            address: dataPoint.protocol.address,\n            unitid: flow.get(\"bridge.image.controller.unitId\"),\n            quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.protocol.type)\n        };\n    });\n\n    if (msg.sequences.length > 0) {\n        node.send(msg);\n    }\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 380,
            "wires": [
                [
                    "f5qdwu3299v8bq8k"
                ]
            ]
        },
        {
            "id": "f5qdwu3299v8bq8k",
            "type": "modbus-flex-sequencer",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 10 Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "b3aea7855b156b44",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 750,
            "y": 380,
            "wires": [
                [
                    "g78zcwdfo624sk0l",
                    "fgenqtwdmq3wks06"
                ],
                []
            ]
        },
        {
            "id": "vy2yjt44kfehi9lx",
            "type": "modbus-flex-write",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 10 Write",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "server": "b3aea7855b156b44",
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 770,
            "y": 720,
            "wires": [
                [
                    "402ny4w16z2ye3iv",
                    "ij3dsvjzldcm57yy"
                ],
                []
            ]
        },
        {
            "id": "cuu8rgy0q93d5flc",
            "type": "switch",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 1",
            "property": "channel",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "1",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 550,
            "y": 680,
            "wires": [
                [
                    "0j508xsjlkvjsgxp"
                ]
            ]
        },
        {
            "id": "tb2ro44yn8h4zsl4",
            "type": "switch",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 2",
            "property": "channel",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "2",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 550,
            "y": 760,
            "wires": [
                [
                    "yyebqgs1q9pbab31"
                ]
            ]
        },
        {
            "id": "vctlei41r11vj7ba",
            "type": "switch",
            "z": "7e411a7e8ded7f07",
            "name": "Channel 10",
            "property": "channel",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "10",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 550,
            "y": 720,
            "wires": [
                [
                    "vy2yjt44kfehi9lx"
                ]
            ]
        },
        {
            "id": "ayyklygyynq4uipk",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "send write data",
            "func": "msg.channel = msg.payload.dataPoint.protocol.channel;\n\nif (msg.payload.dataPoint.protocol.type === \"bool\" && typeof msg.payload.value === \"boolean\") {\n    if (msg.payload.dataPoint.protocol.invert) {\n        msg.payload.value = !msg.payload.value;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 5,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.dataPoint.protocol.address,\n        \"quantity\": 1\n    }\n} else if (msg.payload.dataPoint.protocol.type === \"bool\" && typeof msg.payload.value !== \"boolean\") {\n    if (msg.payload.dataPoint.protocol.invert) {\n        msg.payload.value = msg.payload.value * -1;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 6,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.dataPoint.protocol.address,\n        \"quantity\": 1\n    }\n} else {\n    msg.payload = {\n        \"value\": parseInt(msg.payload.value) * (1 / msg.payload.dataPoint.protocol.scale),\n        \"fc\": 16,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.dataPoint.protocol.address,\n        \"quantity\": global.get(\"function.typeToRegisterLength\")(msg.payload.dataPoint.protocol.type)\n    }\n}\n\nnode.send(msg);\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 320,
            "y": 680,
            "wires": [
                [
                    "cuu8rgy0q93d5flc",
                    "tb2ro44yn8h4zsl4",
                    "vctlei41r11vj7ba"
                ]
            ]
        },
        {
            "id": "yyebqgs1q9pbab31",
            "type": "debug",
            "z": "7e411a7e8ded7f07",
            "name": "Channel not supported!",
            "active": true,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 790,
            "y": 780,
            "wires": []
        },
        {
            "id": "v647260sx3amork7",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "Set parameters channel 1",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nconst channel = global.get(\"hardware.interface.serial.channels\").find(channel => channel.id === 1);\n\nif (channel && controllerParameter && protocols) {\n    msg.payload = {\n        \"connectorType\": channel.connectorType,\n        \"serialPort\": channel.serialPort,\n        \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n        \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n        \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n        \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n        \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n        \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n        \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n        \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n        \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n        \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n    };\n\n    node.send(msg);\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "ff97p69bwcjpzvb1"
                ]
            ]
        },
        {
            "id": "m93veoepaqx4u3ua",
            "type": "function",
            "z": "7e411a7e8ded7f07",
            "name": "Set parameters channel 10",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nconst channel = global.get(\"hardware.interface.serial.channels\").find(channel => channel.id === 10);\n\nif (channel && controllerParameter && protocols) {\n    msg.payload = {\n        \"connectorType\": channel.connectorType,\n        \"serialPort\": channel.serialPort,\n        \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n        \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n        \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n        \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n        \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n        \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n        \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n        \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n        \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n        \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n    };\n\n    node.send(msg);\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 840,
            "y": 120,
            "wires": [
                [
                    "05yu235jtq3aqxem"
                ]
            ]
        },
        {
            "id": "hfso8q1k5q12sw53",
            "type": "switch",
            "z": "7e411a7e8ded7f07",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1160,
            "y": 560,
            "wires": [
                [
                    "014uyearm5fv959q"
                ]
            ]
        },
        {
            "id": "014uyearm5fv959q",
            "type": "mqtt out",
            "z": "7e411a7e8ded7f07",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1140,
            "y": 600,
            "wires": []
        }
    ]
}