{
    "id": "60c52f8f947a5218",
    "label": "123123123123",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "03e842cdcbe5e0bf",
            "type": "mqtt out",
            "z": "60c52f8f947a5218",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1120,
            "y": 800,
            "wires": []
        },
        {
            "id": "33b84cea3032ec5a",
            "type": "inject",
            "z": "60c52f8f947a5218",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "6a6434003c4a112a"
                ]
            ]
        },
        {
            "id": "6a6434003c4a112a",
            "type": "getflows",
            "z": "60c52f8f947a5218",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "9c30e87f4667211c"
                ]
            ]
        },
        {
            "id": "9c30e87f4667211c",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "91f9d044e221815e"
                ]
            ]
        },
        {
            "id": "086e0e2a228227a9",
            "type": "modbus-flex-sequencer",
            "z": "60c52f8f947a5218",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "ay0nsn138kfojd5u",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 680,
            "y": 520,
            "wires": [
                [
                    "6cbac5682255258b",
                    "b5c8589d8f4b224e"
                ],
                []
            ]
        },
        {
            "id": "528e3b5ae08898f6",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "send bridge data",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"bridge.image.protocols\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint,\n        name: dataPoint.id,\n        fc: dataPoint.fc,\n        address: dataPoint.address,\n        unitid: flow.get(\"bridge.image.controller.unitId\"),\n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.type)\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 480,
            "wires": [
                [
                    "6a1c18703b01afdc"
                ]
            ]
        },
        {
            "id": "7ef295b9e099718d",
            "type": "comment",
            "z": "60c52f8f947a5218",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "91f9d044e221815e",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "ef951c55f252194d"
                ]
            ]
        },
        {
            "id": "f31238b3cedff6a5",
            "type": "comment",
            "z": "60c52f8f947a5218",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 360,
            "wires": []
        },
        {
            "id": "6cbac5682255258b",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "Set number data point values",
            "func": "if (!msg.dataPoint.type.includes(\"bool\") || (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\")) {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": msg.dataPoint.type.includes(\"bool\"),\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.type.includes(\"bool\") ? \"bool\" : msg.dataPoint.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.offsetbit,\n            \"scale\": msg.dataPoint.scale.toString(),\n            \"mask\": msg.dataPoint.mask\n        }\n    ];\n\n    if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\" && msg.dataPoint.invert) {\n        msg.payload[0] = Math.abs(msg.payload[0] - 1)\n    }\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 940,
            "y": 520,
            "wires": [
                [
                    "61ce97b8864b774f"
                ]
            ]
        },
        {
            "id": "61ce97b8864b774f",
            "type": "buffer-parser",
            "z": "60c52f8f947a5218",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1150,
            "y": 520,
            "wires": [
                [
                    "f3d3e3cfb0325b01"
                ]
            ]
        },
        {
            "id": "61ac135f45869cd6",
            "type": "inject",
            "z": "60c52f8f947a5218",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "60",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "2078e7beabfd12ab"
                ]
            ]
        },
        {
            "id": "b5c8589d8f4b224e",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "Set boolean data point values",
            "func": "if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] === \"boolean\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.offsetbit];\n\n    if (msg.dataPoint.invert) {\n        payload[msg.name] = !payload[msg.name];\n    }\n\n    msg.payload = payload;\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 950,
            "y": 560,
            "wires": [
                [
                    "f3d3e3cfb0325b01"
                ]
            ]
        },
        {
            "id": "94c00373f8280201",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 780,
            "wires": [
                [
                    "03e842cdcbe5e0bf"
                ]
            ]
        },
        {
            "id": "ef951c55f252194d",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nconst channel = global.get(\"hardware.interface.serial.channels\").find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "6c52d217d73bcb0d"
                ]
            ]
        },
        {
            "id": "688625a785b18735",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 740,
            "wires": [
                [
                    "1f6913ac6aae5c00"
                ]
            ]
        },
        {
            "id": "1f6913ac6aae5c00",
            "type": "mqtt out",
            "z": "60c52f8f947a5218",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1120,
            "y": 740,
            "wires": []
        },
        {
            "id": "d1d581719cd6f1f3",
            "type": "modbus-flex-connector",
            "z": "60c52f8f947a5218",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "ay0nsn138kfojd5u",
            "x": 1230,
            "y": 40,
            "wires": [
                []
            ]
        },
        {
            "id": "fa6462ce8c6ead8d",
            "type": "comment",
            "z": "60c52f8f947a5218",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "2078e7beabfd12ab",
            "type": "link out",
            "z": "60c52f8f947a5218",
            "name": "link out 14",
            "mode": "link",
            "links": [
                "85af075bbcff394d",
                "2a351658ee6a35c6"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "85af075bbcff394d",
            "type": "link in",
            "z": "60c52f8f947a5218",
            "name": "Protocol Read",
            "links": [
                "2078e7beabfd12ab",
                "8892wv2zxtbeek6o",
                "4srf1lj0me31a7ph"
            ],
            "x": 75,
            "y": 480,
            "wires": [
                [
                    "71e6b6f614a4aefe"
                ]
            ]
        },
        {
            "id": "71e6b6f614a4aefe",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 480,
            "wires": [
                [
                    "3610a6370240dd67"
                ]
            ]
        },
        {
            "id": "2a351658ee6a35c6",
            "type": "link in",
            "z": "60c52f8f947a5218",
            "name": "Virtual Read",
            "links": [
                "8892wv2zxtbeek6o",
                "2078e7beabfd12ab"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "b059912b0cd3bd96"
                ]
            ]
        },
        {
            "id": "b059912b0cd3bd96",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "8f57eeddeab6f6b8"
                ]
            ]
        },
        {
            "id": "3f463a5931597f10",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"kwh\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = flow.get(\"bridge.image.metrics\")[metricId];\n        }\n        msg.payload[metricId] = msg.payload[metricId] + (flow.get(\"bridge.image.metrics\")[parameterIds[0]] / 3600);\n    },\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        functions[calc.func](sequence.dataPoint.id, calc.ids)\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "9d8a45ff157bd0e9"
                ]
            ]
        },
        {
            "id": "0859fc4984fa8d51",
            "type": "comment",
            "z": "60c52f8f947a5218",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 640,
            "wires": []
        },
        {
            "id": "2831638627421479",
            "type": "link in",
            "z": "60c52f8f947a5218",
            "name": "Update Metrics",
            "links": [
                "9d8a45ff157bd0e9",
                "f3d3e3cfb0325b01"
            ],
            "x": 75,
            "y": 740,
            "wires": [
                [
                    "ddc2c381bc720758"
                ]
            ]
        },
        {
            "id": "ddc2c381bc720758",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 320,
            "y": 740,
            "wires": [
                [
                    "94c00373f8280201",
                    "688625a785b18735"
                ]
            ]
        },
        {
            "id": "f3d3e3cfb0325b01",
            "type": "link out",
            "z": "60c52f8f947a5218",
            "name": "link out 17",
            "mode": "link",
            "links": [
                "2831638627421479"
            ],
            "x": 1285,
            "y": 540
        },
        {
            "id": "9d8a45ff157bd0e9",
            "type": "link out",
            "z": "60c52f8f947a5218",
            "name": "link out 16",
            "mode": "link",
            "links": [
                "2831638627421479"
            ],
            "x": 1265,
            "y": 260
        },
        {
            "id": "e5d5e9829b0ab432",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "3f463a5931597f10"
                ]
            ]
        },
        {
            "id": "8f57eeddeab6f6b8",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "e5d5e9829b0ab432"
                ]
            ]
        },
        {
            "id": "3610a6370240dd67",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 520,
            "wires": [
                [
                    "528e3b5ae08898f6"
                ]
            ]
        },
        {
            "id": "674efb1dc905b3da",
            "type": "flogger",
            "z": "60c52f8f947a5218",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 940,
            "wires": [
                []
            ]
        },
        {
            "id": "03f5ae381dc767da",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 940,
            "wires": [
                [
                    "02aa80fabe049841"
                ]
            ]
        },
        {
            "id": "f6fe01ee27f74237",
            "type": "catch",
            "z": "60c52f8f947a5218",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 940,
            "wires": [
                [
                    "03f5ae381dc767da"
                ]
            ]
        },
        {
            "id": "02aa80fabe049841",
            "type": "function",
            "z": "60c52f8f947a5218",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 940,
            "wires": [
                [
                    "674efb1dc905b3da"
                ]
            ]
        },
        {
            "id": "16f9648b8dee34c0",
            "type": "comment",
            "z": "60c52f8f947a5218",
            "name": "---- Handle errors",
            "info": "",
            "x": 80,
            "y": 900,
            "wires": []
        },
        {
            "id": "1a4f94afe59dbac6",
            "type": "modbus-flex-connector",
            "z": "60c52f8f947a5218",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "a57c986b0d869192",
            "x": 1230,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "6d4f8f4a8f624109",
            "type": "modbus-flex-connector",
            "z": "60c52f8f947a5218",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "645f9d0037486156",
            "x": 1230,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "79c9115dd0067e26",
            "type": "modbus-flex-connector",
            "z": "60c52f8f947a5218",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "cbbf14513c6eea26",
            "x": 1230,
            "y": 160,
            "wires": [
                []
            ]
        },
        {
            "id": "6c52d217d73bcb0d",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "",
            "property": "bridge.image.controller.channel",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "eq",
                    "v": "1",
                    "vt": "num"
                },
                {
                    "t": "eq",
                    "v": "2",
                    "vt": "num"
                },
                {
                    "t": "eq",
                    "v": "3",
                    "vt": "num"
                },
                {
                    "t": "eq",
                    "v": "4",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 4,
            "x": 1010,
            "y": 80,
            "wires": [
                [
                    "d1d581719cd6f1f3"
                ],
                [
                    "6d4f8f4a8f624109"
                ],
                [
                    "1a4f94afe59dbac6"
                ],
                [
                    "79c9115dd0067e26"
                ]
            ]
        },
        {
            "id": "1234313db117925d",
            "type": "modbus-flex-sequencer",
            "z": "60c52f8f947a5218",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "645f9d0037486156",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 680,
            "y": 560,
            "wires": [
                [
                    "6cbac5682255258b",
                    "b5c8589d8f4b224e"
                ],
                []
            ]
        },
        {
            "id": "cecd89eaec878aff",
            "type": "modbus-flex-sequencer",
            "z": "60c52f8f947a5218",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "a57c986b0d869192",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 680,
            "y": 600,
            "wires": [
                [
                    "6cbac5682255258b",
                    "b5c8589d8f4b224e"
                ],
                []
            ]
        },
        {
            "id": "cce964a160e6d013",
            "type": "modbus-flex-sequencer",
            "z": "60c52f8f947a5218",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "cbbf14513c6eea26",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 680,
            "y": 640,
            "wires": [
                [
                    "6cbac5682255258b",
                    "b5c8589d8f4b224e"
                ],
                []
            ]
        },
        {
            "id": "6a1c18703b01afdc",
            "type": "switch",
            "z": "60c52f8f947a5218",
            "name": "",
            "property": "bridge.image.controller.channel",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "eq",
                    "v": "1",
                    "vt": "num"
                },
                {
                    "t": "eq",
                    "v": "2",
                    "vt": "num"
                },
                {
                    "t": "eq",
                    "v": "3",
                    "vt": "num"
                },
                {
                    "t": "eq",
                    "v": "4",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 4,
            "x": 390,
            "y": 540,
            "wires": [
                [
                    "086e0e2a228227a9"
                ],
                [
                    "1234313db117925d"
                ],
                [
                    "cecd89eaec878aff"
                ],
                [
                    "cce964a160e6d013"
                ]
            ]
        }
    ]
}