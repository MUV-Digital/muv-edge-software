{
    "id": "c033503474f93672",
    "label": "123123123123",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "2xj9d6cc0f579f5c",
            "type": "mqtt out",
            "z": "c033503474f93672",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 880,
            "wires": []
        },
        {
            "id": "e6cdq2s9zeix79w5",
            "type": "inject",
            "z": "c033503474f93672",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "e4lhj3j9qmfhnk4i"
                ]
            ]
        },
        {
            "id": "e4lhj3j9qmfhnk4i",
            "type": "getflows",
            "z": "c033503474f93672",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "ez8vdd128mlsuhke"
                ]
            ]
        },
        {
            "id": "ez8vdd128mlsuhke",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "pghqnk1swzreubnk"
                ]
            ]
        },
        {
            "id": "xh2wmw42gdrmmtcn",
            "type": "modbus-flex-sequencer",
            "z": "c033503474f93672",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "ay0nsn138kfojd5u",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 660,
            "y": 480,
            "wires": [
                [
                    "dbg8j7uwovo68c3r",
                    "uzd250rj7c9vy4dc",
                    "6fcd318a96d4b1b9"
                ],
                []
            ]
        },
        {
            "id": "nrxh0qoixfaosyql",
            "type": "function",
            "z": "c033503474f93672",
            "name": "send bridge data",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"bridge.image.protocols\").filter(protocol => protocol.type !== \"virtual\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint,\n        name: dataPoint.id,\n        fc: dataPoint.fc,\n        address: dataPoint.address,\n        unitid: flow.get(\"bridge.image.controller.unitId\"),\n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.type)\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 480,
            "wires": [
                [
                    "367pwfwumr76nltx"
                ]
            ]
        },
        {
            "id": "1111ipf5fi7ftnys",
            "type": "comment",
            "z": "c033503474f93672",
            "name": "----- Execute Commands",
            "info": "",
            "x": 110,
            "y": 1020,
            "wires": []
        },
        {
            "id": "qhe0wuv3itgsqtw6",
            "type": "comment",
            "z": "c033503474f93672",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "pghqnk1swzreubnk",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "jehb2k8dmq6czrhu"
                ]
            ]
        },
        {
            "id": "vwory4ffwxqjcfyq",
            "type": "comment",
            "z": "c033503474f93672",
            "name": "---- Protocol Read",
            "info": "",
            "x": 90,
            "y": 360,
            "wires": []
        },
        {
            "id": "dbg8j7uwovo68c3r",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Set number data point values",
            "func": "if (!msg.dataPoint.type.includes(\"bool\") || (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\")) {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": msg.dataPoint.type.includes(\"bool\"),\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.type.includes(\"bool\") ? \"bool\" : msg.dataPoint.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.offsetbit,\n            \"scale\": msg.dataPoint.scale.toString(),\n            \"mask\": msg.dataPoint.mask\n        }\n    ];\n\n    if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] !== \"boolean\" && msg.dataPoint.invert) {\n        msg.payload[0] = Math.abs(msg.payload[0] - 1)\n    }\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 920,
            "y": 480,
            "wires": [
                [
                    "828dw1b0rplvoxep"
                ]
            ]
        },
        {
            "id": "828dw1b0rplvoxep",
            "type": "buffer-parser",
            "z": "c033503474f93672",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1130,
            "y": 480,
            "wires": [
                [
                    "l9ysqdqqnxga1gyw"
                ]
            ]
        },
        {
            "id": "6ghk11axque95be1",
            "type": "inject",
            "z": "c033503474f93672",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "150",
            "crontab": "",
            "once": true,
            "onceDelay": "30",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 180,
            "y": 120,
            "wires": [
                [
                    "gyqpokg2dtvo64ok"
                ]
            ]
        },
        {
            "id": "4lsomypaely87ji5",
            "type": "modbus-flex-write",
            "z": "c033503474f93672",
            "name": "Channel Write",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "server": "ay0nsn138kfojd5u",
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 1000,
            "y": 1160,
            "wires": [
                [
                    "kmbonj6g3mftaqdi",
                    "u48110k3o8zzonmj",
                    "ffl6o87j38z16q1f"
                ],
                []
            ]
        },
        {
            "id": "uzd250rj7c9vy4dc",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Set boolean data point values",
            "func": "if (msg.dataPoint.type.includes(\"bool\") && typeof msg.payload[0] === \"boolean\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.offsetbit];\n\n    if (msg.dataPoint.invert) {\n        payload[msg.name] = !payload[msg.name];\n    }\n\n    msg.payload = payload;\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 930,
            "y": 520,
            "wires": [
                [
                    "l9ysqdqqnxga1gyw"
                ]
            ]
        },
        {
            "id": "kmbonj6g3mftaqdi",
            "type": "delay",
            "z": "c033503474f93672",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1320,
            "y": 1180,
            "wires": [
                [
                    "2xj9d6cc0f579f5c"
                ]
            ]
        },
        {
            "id": "t4vpxb5kxzy1ar3h",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 880,
            "wires": [
                [
                    "2xj9d6cc0f579f5c"
                ]
            ]
        },
        {
            "id": "jehb2k8dmq6czrhu",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nvar channel = global.get(\"hardware.interface.serial.channels\").concat(global.get(\"hardware.interface.tcp.channels\")).find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": controllerParameter.connectorType ? controllerParameter.connectorType : channel.connectorType,\n            \"serialPort\": controllerParameter.serialPort ? controllerParameter.serialPort : channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "h93kjwv7dp0ccghz"
                ]
            ]
        },
        {
            "id": "17jv8urrpux7n06j",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 680,
            "y": 840,
            "wires": [
                [
                    "gitqr3vqyonxt4ec"
                ]
            ]
        },
        {
            "id": "gitqr3vqyonxt4ec",
            "type": "mqtt out",
            "z": "c033503474f93672",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1360,
            "y": 820,
            "wires": []
        },
        {
            "id": "h93kjwv7dp0ccghz",
            "type": "modbus-flex-connector",
            "z": "c033503474f93672",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "ay0nsn138kfojd5u",
            "x": 1070,
            "y": 80,
            "wires": [
                []
            ]
        },
        {
            "id": "0bozq097azi92dlq",
            "type": "comment",
            "z": "c033503474f93672",
            "name": "---- Virtual Read",
            "info": "",
            "x": 80,
            "y": 180,
            "wires": []
        },
        {
            "id": "gyqpokg2dtvo64ok",
            "type": "link out",
            "z": "c033503474f93672",
            "name": "link out 23",
            "mode": "link",
            "links": [
                "2rre3bnh2lkm54vi",
                "hfansttof6wx02t3"
            ],
            "x": 295,
            "y": 120
        },
        {
            "id": "2rre3bnh2lkm54vi",
            "type": "link in",
            "z": "c033503474f93672",
            "name": "Protocol Read",
            "links": [
                "gyqpokg2dtvo64ok",
                "u48110k3o8zzonmj"
            ],
            "x": 75,
            "y": 480,
            "wires": [
                [
                    "o8tv7pzibtiwphp2"
                ]
            ]
        },
        {
            "id": "o8tv7pzibtiwphp2",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 480,
            "wires": [
                [
                    "4xb8y2zelckw4lkm"
                ]
            ]
        },
        {
            "id": "u48110k3o8zzonmj",
            "type": "link out",
            "z": "c033503474f93672",
            "name": "link out 24",
            "mode": "link",
            "links": [
                "2rre3bnh2lkm54vi"
            ],
            "x": 1275,
            "y": 1140
        },
        {
            "id": "hfansttof6wx02t3",
            "type": "link in",
            "z": "c033503474f93672",
            "name": "Virtual Read",
            "links": [
                "gyqpokg2dtvo64ok"
            ],
            "x": 75,
            "y": 260,
            "wires": [
                [
                    "0l72i6ewfsrp6vb6"
                ]
            ]
        },
        {
            "id": "0l72i6ewfsrp6vb6",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 260,
            "wires": [
                [
                    "9a585auuyy95t88z"
                ]
            ]
        },
        {
            "id": "b27pimo45745bw3r",
            "type": "function",
            "z": "c033503474f93672",
            "name": "calculate virtual values",
            "func": "const functions = {\n    \"deviceState\": (metricId, parameterIds) => {\n        if (!flow.get(\"bridge.image.metrics\").hasOwnProperty(metricId)) {\n            msg.payload[metricId] = 0;\n        }\n        if (parameterIds.length === 0) {\n            parameterIds = flow.get(\"bridge.image.protocols\").filter(dataPoint => {\n                return dataPoint.topic.includes(\"error\")\n            }).map(dataPoint => {\n                return dataPoint.id;\n            });\n        }\n\n        const ok = Object.keys(flow.get(\"bridge.image.metrics\")).filter(key => {\n            return parameterIds.includes(key)\n        }).reduce((accumulator, id) => accumulator && (flow.get(\"bridge.image.metrics\")[id] === \"\" || flow.get(\"bridge.image.metrics\")[id] === 0 || flow.get(\"bridge.image.metrics\")[id] === false), true)\n        \n        if (ok) {\n            msg.payload[metricId] = 0;\n        } else {\n            msg.payload[metricId] = 2;\n        }\n    }\n}\n\nconst executor = (metricId, func, parameterIds) => {\n    msg.payload[metricId] = eval(\"(\" + func + \")\")(...parameterIds.map(x => flow.get(\"bridge.image.metrics\")[x]))\n}\n\nmsg.sequences.forEach(sequence => {\n    msg = sequence;\n    msg.payload = {};\n    let calc = sequence.dataPoint.calculation\n    let metricsExist = calc.ids.reduce((accumulator, currentValue) => accumulator && flow.get(\"bridge.image.metrics\").hasOwnProperty(currentValue), true)\n    if (metricsExist) {\n        if (functions.hasOwnProperty(calc.func)){\n            functions[calc.func](sequence.dataPoint.id, calc.ids)\n        } else {\n            executor(sequence.dataPoint.id, calc.func, calc.ids);\n        }\n    } else {\n        throw \"Parameter IDs: \" + calc.ids + \" is missing for calculation\";\n    }\n    node.send(msg);\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 260,
            "wires": [
                [
                    "0ujgutqmde1i9kg5"
                ]
            ]
        },
        {
            "id": "3c5yhywt3ip6ypoa",
            "type": "comment",
            "z": "c033503474f93672",
            "name": "---- Update Metrics",
            "info": "",
            "x": 90,
            "y": 760,
            "wires": []
        },
        {
            "id": "sczpidmiuzwy7hu2",
            "type": "link in",
            "z": "c033503474f93672",
            "name": "Update Metrics",
            "links": [
                "0ujgutqmde1i9kg5",
                "l9ysqdqqnxga1gyw"
            ],
            "x": 75,
            "y": 840,
            "wires": [
                [
                    "17a1jl4fh82yjex3"
                ]
            ]
        },
        {
            "id": "17a1jl4fh82yjex3",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== undefined && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 320,
            "y": 840,
            "wires": [
                [
                    "t4vpxb5kxzy1ar3h",
                    "17jv8urrpux7n06j"
                ]
            ]
        },
        {
            "id": "l9ysqdqqnxga1gyw",
            "type": "link out",
            "z": "c033503474f93672",
            "name": "link out 25",
            "mode": "link",
            "links": [
                "sczpidmiuzwy7hu2"
            ],
            "x": 1435,
            "y": 480
        },
        {
            "id": "nqcgoyoskgeylkg2",
            "type": "flogger",
            "z": "c033503474f93672",
            "name": "Error",
            "logfile": "bridge.log",
            "inputchoice": "fullmsg",
            "inputobject": "payload",
            "inputobjectType": "msg",
            "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
            "loglevel": "ERROR",
            "logconfig": "2c6b06edb20118d0",
            "sendpane": true,
            "x": 590,
            "y": 1520,
            "wires": [
                []
            ]
        },
        {
            "id": "bisb8o8xeo7zk3qo",
            "type": "function",
            "z": "c033503474f93672",
            "name": "set error",
            "func": "msg.payload = {\n    \"payload\" : msg.payload,\n    \"error\" : msg.error\n};\n\nif (msg._error){\n    msg.payload._error = msg._error;\n}\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 260,
            "y": 1520,
            "wires": [
                [
                    "9vdarwufie1bvmc9"
                ]
            ]
        },
        {
            "id": "i644xh5xyf8uvop6",
            "type": "catch",
            "z": "c033503474f93672",
            "name": "",
            "scope": null,
            "uncaught": false,
            "x": 120,
            "y": 1520,
            "wires": [
                [
                    "bisb8o8xeo7zk3qo"
                ]
            ]
        },
        {
            "id": "9vdarwufie1bvmc9",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Set log file name",
            "func": "msg.logfile = \"bridge-\" + env.get(\"NR_FLOW_NAME\") + \".log\"\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 430,
            "y": 1520,
            "wires": [
                [
                    "nqcgoyoskgeylkg2"
                ]
            ]
        },
        {
            "id": "0ujgutqmde1i9kg5",
            "type": "link out",
            "z": "c033503474f93672",
            "name": "link out 26",
            "mode": "link",
            "links": [
                "sczpidmiuzwy7hu2"
            ],
            "x": 1435,
            "y": 260
        },
        {
            "id": "htf4g5t4avc8lzzi",
            "type": "function",
            "z": "c033503474f93672",
            "name": "send virtual data",
            "func": "msg.sequences = flow.get(\"bridge.image.virtuals\").map(dataPoint => {\n    return {\n        dataPoint: dataPoint\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 420,
            "y": 260,
            "wires": [
                [
                    "b27pimo45745bw3r"
                ]
            ]
        },
        {
            "id": "9a585auuyy95t88z",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "Config correct",
            "property": "bridge.image.virtuals",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 300,
            "wires": [
                [
                    "htf4g5t4avc8lzzi"
                ]
            ]
        },
        {
            "id": "4xb8y2zelckw4lkm",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "Config correct",
            "property": "bridge.image.protocols",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "array",
                    "vt": "array"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 200,
            "y": 520,
            "wires": [
                [
                    "nrxh0qoixfaosyql"
                ]
            ]
        },
        {
            "id": "jq57wmb54kyi3wqo",
            "type": "mqtt in",
            "z": "c033503474f93672",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 110,
            "y": 1260,
            "wires": [
                [
                    "k5515rxxw3npvagx"
                ]
            ]
        },
        {
            "id": "s71ab242mfu2g5l5",
            "type": "inject",
            "z": "c033503474f93672",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 110,
            "y": 1080,
            "wires": [
                [
                    "d08gwcll6ngo0ry7"
                ]
            ]
        },
        {
            "id": "s9uvi0agehftinto",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Subscribe to commands for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id + \"/#\"\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 290,
            "y": 1200,
            "wires": [
                [
                    "jq57wmb54kyi3wqo"
                ]
            ]
        },
        {
            "id": "d08gwcll6ngo0ry7",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 1140,
            "wires": [
                [
                    "40prq9bgphixot5f"
                ],
                [
                    "s9uvi0agehftinto"
                ]
            ]
        },
        {
            "id": "40prq9bgphixot5f",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 310,
            "y": 1140,
            "wires": []
        },
        {
            "id": "k5515rxxw3npvagx",
            "type": "function",
            "z": "c033503474f93672",
            "name": "prepare write data",
            "func": "const command = msg.payload.command;\nconst response = msg.payload.response;\nconst matchingCommand = flow.get(\"bridge.image.commands\").find(bridgeCommand => bridgeCommand.id === command.id)\nconst matchingProtocol = matchingCommand ? flow.get(\"bridge.image.protocols\").find(protocol => protocol.id === matchingCommand.protocolId) : undefined;\n\nif (matchingProtocol && matchingCommand) {\n    response.value = {\n        \"actual\": flow.get(\"bridge.image.metrics\")[matchingProtocol.id],\n        \"target\": command.value\n    }\n    msg.protocolCommand = matchingCommand;\n    msg.response = response;\n    \n    if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"boolean\") {\n        if (matchingProtocol.invert) {\n            command.value = !command.value;\n        }\n        if(matchingCommand.fc === 6) {\n            const protocolBits = flow.get(\"bridge.image.protocols\").filter(protocol => protocol.address === matchingProtocol.address);\n            var registerValue = 0;\n            protocolBits.forEach(protocolBit => {\n                if (flow.get(\"bridge.image.metrics\")[protocolBit.id] === true){\n                    registerValue += Math.pow(2, protocolBit.offsetbit);\n                }\n            });\n            if (command.value === true){\n                registerValue += Math.pow(2, matchingProtocol.offsetbit)\n            }\n            command.value = registerValue;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (matchingProtocol.type.includes(\"bool\") && typeof command.value === \"number\") {\n        if (matchingProtocol.invert) {\n            command.value = Math.abs(command.value - 1);\n        }\n        if (matchingCommand.fc === 6) {\n            const protocolBits = flow.get(\"bridge.image.protocols\").filter(protocol => protocol.address === matchingProtocol.address);\n            var registerValue = 0;\n            protocolBits.forEach(protocolBit => {\n                if (flow.get(\"bridge.image.metrics\")[protocolBit.id] === true) {\n                    registerValue += Math.pow(2, protocolBit.offsetbit);\n                }\n            });\n            if (command.value === 1) {\n                registerValue += Math.pow(2, matchingProtocol.offsetbit)\n            }\n            command.value = registerValue;\n        }\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else if (typeof command.value === \"number\") {\n        msg.payload = {\n            \"value\": matchingProtocol.type.startsWith(\"int16\") && command.value < 0 ? 65536 + command.value * (1 / matchingProtocol.scale) : command.value * (1 / matchingProtocol.scale),\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    } else {\n        msg.payload = {\n            \"value\": command.value,\n            \"fc\": matchingCommand.fc,\n            \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n            \"address\": matchingProtocol.address,\n            \"quantity\": global.get(\"function.typeToRegisterLength\")(matchingProtocol.type)\n        }\n    }\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_EXECUTION\";\n\n    return [msg, responseMessage]\n} else {\n    node.warn(\"Command configuration wrong!\");\n    let responseMessage = { payload: { response: response } };\n    responseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\n    responseMessage.payload.response.status = \"ERROR\";\n    responseMessage.payload.response.error = \"ERROR_BRIDGE_COMMAND_CONFIG\";\n    \n    return [null, responseMessage];\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 350,
            "y": 1260,
            "wires": [
                [
                    "sjadygxeppypv4pa"
                ],
                [
                    "0d0tubzb4264rdz8"
                ]
            ]
        },
        {
            "id": "ctxmj2jbva3ynk4s",
            "type": "mqtt out",
            "z": "c033503474f93672",
            "name": "",
            "topic": "cloud/upstream/response",
            "qos": "2",
            "retain": "false",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1370,
            "y": 1260,
            "wires": []
        },
        {
            "id": "sjadygxeppypv4pa",
            "type": "function",
            "z": "c033503474f93672",
            "name": "Write data",
            "func": "let writeMessage = { payload:  msg.payload };\nwriteMessage.protocolCommand = msg.protocolCommand;\n\nlet responseMessage = { payload: { response: msg.response } };\nresponseMessage.payload.topic = flow.get(\"bridge\").uplink.endpoint.url + \"/command/response\";\nresponseMessage.payload.response.status = \"OK\";\nresponseMessage.payload.response.error = \"\";\n\nreturn [writeMessage, responseMessage];",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 570,
            "y": 1240,
            "wires": [
                [
                    "3or9tdz7gqhgp582"
                ],
                [
                    "5uto1nlq44nv7cyj"
                ]
            ]
        },
        {
            "id": "t5q0z2ojzod3izpx",
            "type": "debug",
            "z": "c033503474f93672",
            "name": "Execute Command",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1020,
            "y": 1120,
            "wires": []
        },
        {
            "id": "3or9tdz7gqhgp582",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "",
            "property": "protocolCommand.type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "virtual",
                    "vt": "str"
                },
                {
                    "t": "eq",
                    "v": "setpoint",
                    "vt": "str"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 750,
            "y": 1220,
            "wires": [
                [
                    "irj7pzskmkr3eldp"
                ],
                [
                    "4lsomypaely87ji5",
                    "t5q0z2ojzod3izpx"
                ]
            ]
        },
        {
            "id": "irj7pzskmkr3eldp",
            "type": "debug",
            "z": "c033503474f93672",
            "name": "Command type not yet implemented",
            "active": true,
            "tosidebar": true,
            "console": true,
            "tostatus": false,
            "complete": "payload",
            "targetType": "msg",
            "statusVal": "",
            "statusType": "auto",
            "x": 1070,
            "y": 1080,
            "wires": []
        },
        {
            "id": "6b8ujt75du3tll5b",
            "type": "comment",
            "z": "c033503474f93672",
            "name": "---- Handle errors",
            "info": "",
            "x": 80,
            "y": 1480,
            "wires": []
        },
        {
            "id": "c3p1pul27r645s3s",
            "type": "catch",
            "z": "c033503474f93672",
            "name": "",
            "scope": [
                "4lsomypaely87ji5"
            ],
            "uncaught": false,
            "x": 590,
            "y": 1320,
            "wires": [
                [
                    "3s9q1x1ztw43snvo"
                ]
            ]
        },
        {
            "id": "0d0tubzb4264rdz8",
            "type": "delay",
            "z": "c033503474f93672",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1260,
            "wires": [
                [
                    "ctxmj2jbva3ynk4s"
                ]
            ]
        },
        {
            "id": "ffl6o87j38z16q1f",
            "type": "change",
            "z": "c033503474f93672",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1220,
            "wires": [
                [
                    "0d0tubzb4264rdz8"
                ]
            ]
        },
        {
            "id": "5uto1nlq44nv7cyj",
            "type": "delay",
            "z": "c033503474f93672",
            "name": "",
            "pauseType": "delay",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 980,
            "y": 1360,
            "wires": [
                [
                    "ctxmj2jbva3ynk4s"
                ]
            ]
        },
        {
            "id": "3s9q1x1ztw43snvo",
            "type": "change",
            "z": "c033503474f93672",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1000,
            "y": 1320,
            "wires": [
                [
                    "5uto1nlq44nv7cyj"
                ]
            ]
        },
        {
            "id": "jisf3knqfypmq1mh",
            "type": "delay",
            "z": "c033503474f93672",
            "name": "",
            "pauseType": "delay",
            "timeout": "30",
            "timeoutUnits": "minutes",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 1070,
            "y": 680,
            "wires": [
                [
                    "g90kkrujfkg2hfi6"
                ]
            ]
        },
        {
            "id": "id11xhk5k5qnyuwf",
            "type": "function",
            "z": "c033503474f93672",
            "name": "COMMUNICATION_ERROR - OK",
            "func": "flow.get(\"bridge.image.protocols\").filter(protocol => protocol.type === \"virtual\").forEach(dataPoint => {\n    if(dataPoint.id === \"COMMUNICATION_ERROR\") {\n        msg.dataPoint = dataPoint;\n        msg.name = dataPoint.id;\n        msg.payload = false;\n        node.send(msg);\n    }\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 940,
            "y": 600,
            "wires": [
                [
                    "749pkgzqgzel6bkv"
                ]
            ]
        },
        {
            "id": "749pkgzqgzel6bkv",
            "type": "function",
            "z": "c033503474f93672",
            "name": "set virtual value",
            "func": "var updatedPayload = {};\nupdatedPayload[msg.name] = msg.payload;\nmsg.payload = updatedPayload;\n\nreturn msg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1260,
            "y": 560,
            "wires": [
                [
                    "l9ysqdqqnxga1gyw"
                ]
            ]
        },
        {
            "id": "a2kfd9mdvrmwn9eh",
            "type": "change",
            "z": "c033503474f93672",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "reset",
                    "pt": "msg",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 880,
            "y": 640,
            "wires": [
                [
                    "jisf3knqfypmq1mh"
                ]
            ]
        },
        {
            "id": "g90kkrujfkg2hfi6",
            "type": "function",
            "z": "c033503474f93672",
            "name": "COMMUNICATION_ERROR - ERROR",
            "func": "flow.set(\"bridge.image.metrics\", {});\n\nflow.get(\"bridge.image.protocols\").filter(protocol => protocol.type === \"virtual\").forEach(dataPoint => {\n    if(dataPoint.id === \"COMMUNICATION_ERROR\") {\n        msg.dataPoint = dataPoint;\n        msg.name = dataPoint.id;\n        msg.payload = true;\n        node.send(msg);\n    }\n});\n\nnode.done();",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 990,
            "y": 720,
            "wires": [
                [
                    "749pkgzqgzel6bkv"
                ]
            ]
        },
        {
            "id": "cch3wdvmevc8s4f3",
            "type": "catch",
            "z": "c033503474f93672",
            "name": "",
            "scope": [
                "xh2wmw42gdrmmtcn"
            ],
            "uncaught": false,
            "x": 690,
            "y": 680,
            "wires": [
                [
                    "4lhx57m9axs6a4m8",
                    "8hzth016np0xe6pn"
                ]
            ]
        },
        {
            "id": "4lhx57m9axs6a4m8",
            "type": "change",
            "z": "c033503474f93672",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "bridge.error",
                    "pt": "flow",
                    "to": "true",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 890,
            "y": 680,
            "wires": [
                [
                    "jisf3knqfypmq1mh"
                ]
            ]
        },
        {
            "id": "367pwfwumr76nltx",
            "type": "switch",
            "z": "c033503474f93672",
            "name": "",
            "property": "bridge.error",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "false"
                },
                {
                    "t": "null"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 2,
            "x": 470,
            "y": 540,
            "wires": [
                [
                    "xh2wmw42gdrmmtcn"
                ],
                [
                    "xh2wmw42gdrmmtcn"
                ]
            ]
        },
        {
            "id": "8hzth016np0xe6pn",
            "type": "delay",
            "z": "c033503474f93672",
            "name": "",
            "pauseType": "delay",
            "timeout": "15",
            "timeoutUnits": "minutes",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 870,
            "y": 760,
            "wires": [
                [
                    "8ub2hpjdl6w3dgs0"
                ]
            ]
        },
        {
            "id": "8ub2hpjdl6w3dgs0",
            "type": "change",
            "z": "c033503474f93672",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "bridge.error",
                    "pt": "flow",
                    "to": "false",
                    "tot": "bool"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 1050,
            "y": 760,
            "wires": [
                []
            ]
        },
        {
            "id": "6fcd318a96d4b1b9",
            "type": "delay",
            "z": "c033503474f93672",
            "name": "",
            "pauseType": "rate",
            "timeout": "5",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "30",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": true,
            "allowrate": false,
            "outputs": 1,
            "x": 880,
            "y": 560,
            "wires": [
                [
                    "id11xhk5k5qnyuwf",
                    "a2kfd9mdvrmwn9eh"
                ]
            ]
        }
    ]
}