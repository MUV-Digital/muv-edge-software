{
    "id": "277da81970794923",
    "label": "64f6cf54ed53db08db10fcd8",
    "disabled": false,
    "info": "",
    "env": [],
    "nodes": [
        {
            "id": "c19wa4583ho4ahrp",
            "type": "mqtt in",
            "z": "277da81970794923",
            "name": "Command",
            "topic": "",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "de96f526d294fb46",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 1,
            "x": 120,
            "y": 680,
            "wires": [
                [
                    "4hg25oi30c82z659"
                ]
            ]
        },
        {
            "id": "b2d0mxsfjwaiyj06",
            "type": "mqtt out",
            "z": "277da81970794923",
            "name": "",
            "topic": "cloud/upstream/data",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1140,
            "y": 680,
            "wires": []
        },
        {
            "id": "2y9ycss8u2rwwu0b",
            "type": "inject",
            "z": "277da81970794923",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "1800",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "{}",
            "payloadType": "json",
            "x": 130,
            "y": 560,
            "wires": [
                [
                    "8f4xncjdxvods9tj"
                ]
            ]
        },
        {
            "id": "u8mnsgsst0luopd8",
            "type": "function",
            "z": "277da81970794923",
            "name": "Set Command for this bridge",
            "func": "msg.action = \"subscribe\";\nmsg.topic = {\n    \"qos\": 2,\n    \"topic\": \"bridge/command/\" + flow.get(\"bridge\").id\n}\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 180,
            "y": 640,
            "wires": [
                [
                    "c19wa4583ho4ahrp"
                ]
            ]
        },
        {
            "id": "jth8n35botvnp4eg",
            "type": "inject",
            "z": "277da81970794923",
            "name": "Startup",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 80,
            "wires": [
                [
                    "es0uiso8xr9xokjk"
                ]
            ]
        },
        {
            "id": "es0uiso8xr9xokjk",
            "type": "getflows",
            "z": "277da81970794923",
            "name": "",
            "x": 320,
            "y": 80,
            "wires": [
                [
                    "bjept73454dl1xjl"
                ]
            ]
        },
        {
            "id": "bjept73454dl1xjl",
            "type": "function",
            "z": "277da81970794923",
            "name": "Init",
            "func": "var bridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === msg.payload.find(flow => flow.id === msg.thisflow).label;\n})\nbridge.image.metrics = {};\n\nflow.set(\"bridge\", bridge);\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 450,
            "y": 80,
            "wires": [
                [
                    "onk7b7ltc853jlh9"
                ]
            ]
        },
        {
            "id": "8f4xncjdxvods9tj",
            "type": "switch",
            "z": "277da81970794923",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "null"
                },
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 140,
            "y": 600,
            "wires": [
                [
                    "r20jjkt1zf3c4hi3"
                ],
                [
                    "u8mnsgsst0luopd8"
                ]
            ]
        },
        {
            "id": "r20jjkt1zf3c4hi3",
            "type": "function",
            "z": "277da81970794923",
            "name": "Error",
            "func": "node.warn(\"The bridge configuration is wrong!\")\nnode.done()",
            "outputs": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 330,
            "y": 600,
            "wires": []
        },
        {
            "id": "uyiedhwgjfxx97tp",
            "type": "modbus-flex-sequencer",
            "z": "277da81970794923",
            "name": "Channel Read",
            "sequences": [
                {
                    "name": "Test",
                    "unitid": "1",
                    "fc": "FC3",
                    "address": "1",
                    "quantity": "1"
                }
            ],
            "server": "b3aea7855b156b44",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "logIOActivities": false,
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 740,
            "y": 320,
            "wires": [
                [
                    "uf7vdn51bil70fde",
                    "99f6p5i1z5lrnkd3"
                ],
                []
            ]
        },
        {
            "id": "vtpxk4im4h0emq3n",
            "type": "function",
            "z": "277da81970794923",
            "name": "send bridge data",
            "func": "msg.payload = \"\";\n\nmsg.sequences = flow.get(\"bridge.image.protocols\").filter(dataPoint => dataPoint.operations.includes(\"R\")).map(dataPoint => {\n    return {\n        dataPoint: dataPoint,\n        name: dataPoint.id,\n        fc: dataPoint.fc,\n        address: dataPoint.address,\n        unitid: flow.get(\"bridge.image.controller.unitId\"),\n        quantity: global.get(\"function.typeToRegisterLength\")(dataPoint.type)\n    };\n});\n\nif (msg.sequences.length > 0) {\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 370,
            "y": 320,
            "wires": [
                [
                    "uyiedhwgjfxx97tp"
                ]
            ]
        },
        {
            "id": "sx1oit9eb0xptgs6",
            "type": "comment",
            "z": "277da81970794923",
            "name": "----- Register for commands from cloud",
            "info": "",
            "x": 150,
            "y": 500,
            "wires": []
        },
        {
            "id": "9awdtvqkpgb21ewn",
            "type": "comment",
            "z": "277da81970794923",
            "name": "---- Connections initialization",
            "info": "",
            "x": 120,
            "y": 20,
            "wires": []
        },
        {
            "id": "onk7b7ltc853jlh9",
            "type": "switch",
            "z": "277da81970794923",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 600,
            "y": 80,
            "wires": [
                [
                    "99tzbs14etuam5lz"
                ]
            ]
        },
        {
            "id": "xwvkz0u6unm5edqs",
            "type": "comment",
            "z": "277da81970794923",
            "name": "---- Data",
            "info": "",
            "x": 60,
            "y": 200,
            "wires": []
        },
        {
            "id": "uf7vdn51bil70fde",
            "type": "function",
            "z": "277da81970794923",
            "name": "Set number data point values",
            "func": "if (msg.dataPoint.type !== \"bool\" || (msg.dataPoint.type === \"bool\" && typeof msg.payload[0] !== \"boolean\")) {\n    msg.spec = {\n        \"options\":\n        {\n            \"byteSwap\": false,\n            \"resultType\": \"keyvalue\",\n            \"singleResult\": true,\n            \"setTopic\": true,\n            \"msgProperty\": \"payload\",\n        },\n        \"items\": []\n    }\n\n    msg.spec.items = [\n        {\n            \"name\": msg.name,\n            \"type\": msg.dataPoint.type,\n            \"length \": global.get(\"function.typeToRegisterLength\")(msg.dataPoint.type),\n            \"offset\": 0,\n            \"offsetbit\": msg.dataPoint.offsetbit,\n            \"scale\": msg.dataPoint.scale.toString(),\n            \"mask\": msg.dataPoint.mask\n        }\n    ];\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1040,
            "y": 340,
            "wires": [
                [
                    "4533xdulii3n6j7p"
                ]
            ]
        },
        {
            "id": "4533xdulii3n6j7p",
            "type": "buffer-parser",
            "z": "277da81970794923",
            "name": "",
            "data": "payload",
            "dataType": "msg",
            "specification": "spec",
            "specificationType": "msg",
            "items": [
                {
                    "type": "int16be",
                    "name": "item1",
                    "offset": 0,
                    "length": 1,
                    "offsetbit": 0,
                    "scale": "0.1",
                    "mask": ""
                }
            ],
            "swap1": "",
            "swap2": "",
            "swap3": "",
            "swap1Type": "swap",
            "swap2Type": "swap",
            "swap3Type": "swap",
            "msgProperty": "payload",
            "msgPropertyType": "str",
            "resultType": "keyvalue",
            "resultTypeType": "return",
            "multipleResult": false,
            "fanOutMultipleResult": false,
            "setTopic": true,
            "outputs": 1,
            "x": 1370,
            "y": 340,
            "wires": [
                [
                    "jnw1pyduqblg9xds"
                ]
            ]
        },
        {
            "id": "18rd22sme8ee2r23",
            "type": "switch",
            "z": "277da81970794923",
            "name": "Config correct",
            "property": "bridge.image.controller",
            "propertyType": "flow",
            "rules": [
                {
                    "t": "istype",
                    "v": "object",
                    "vt": "object"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 160,
            "y": 320,
            "wires": [
                [
                    "vtpxk4im4h0emq3n"
                ]
            ]
        },
        {
            "id": "jnw1pyduqblg9xds",
            "type": "function",
            "z": "277da81970794923",
            "name": "Set sensor value on bridge",
            "func": "var cloudBridge = global.get(\"cloud.bridges\").find(bridge => {\n    return bridge.id === flow.get(\"bridge\").id\n})\n\nmsg.stateUpstreamRequired = false;\nmsg.errorUpstreamRequired = false;\nfor (var propertyName in msg.payload) {\n    if (typeof msg.payload[propertyName] === \"number\") {\n        // Round to 2 decimal\n        msg.payload[propertyName] = Math.round((msg.payload[propertyName] + Number.EPSILON) * 100) / 100\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"error\") && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n            msg.errorUpstreamRequired = true;\n    }\n    if (msg.dataPoint.topic.find(topic => topic === \"state\") && flow.get(\"bridge\").image.metrics[propertyName] !== msg.payload[propertyName]) {\n        msg.stateUpstreamRequired = true;\n    }\n    flow.get(\"bridge\").image.metrics[propertyName] = msg.payload[propertyName];\n}\n\ncloudBridge.image.metrics = flow.get(\"bridge\").image.metrics;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1600,
            "y": 380,
            "wires": [
                [
                    "1br45l8bacayfp2x",
                    "3b5g8vipynb4ohp8"
                ]
            ]
        },
        {
            "id": "cg7qgg9dmp2xc3yk",
            "type": "inject",
            "z": "277da81970794923",
            "name": "Read intervall",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "60",
            "crontab": "",
            "once": true,
            "onceDelay": "10",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 160,
            "y": 260,
            "wires": [
                [
                    "18rd22sme8ee2r23"
                ]
            ]
        },
        {
            "id": "a5hi9mmsa8bq3qii",
            "type": "modbus-flex-write",
            "z": "277da81970794923",
            "name": "Channel Write",
            "showStatusActivities": true,
            "showErrors": true,
            "showWarnings": true,
            "server": "b3aea7855b156b44",
            "emptyMsgOnFail": false,
            "keepMsgProperties": true,
            "delayOnStart": false,
            "startDelayTime": "",
            "x": 760,
            "y": 680,
            "wires": [
                [
                    "18rd22sme8ee2r23",
                    "u73cf57h2p79tabf"
                ],
                []
            ]
        },
        {
            "id": "99f6p5i1z5lrnkd3",
            "type": "function",
            "z": "277da81970794923",
            "name": "Set boolean data point values",
            "func": "if (msg.dataPoint.type === \"bool\" && typeof msg.payload[0] === \"boolean\") {\n    var payload = {};\n    payload[msg.name] = msg.payload[msg.dataPoint.offsetbit];\n\n    if (msg.dataPoint.invert) {\n        payload[msg.name] = !payload[msg.name];\n    }\n\n    msg.payload = payload;\n\n    node.send(msg);\n}\n\nnode.done();\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1050,
            "y": 380,
            "wires": [
                [
                    "jnw1pyduqblg9xds"
                ]
            ]
        },
        {
            "id": "u73cf57h2p79tabf",
            "type": "delay",
            "z": "277da81970794923",
            "name": "",
            "pauseType": "delay",
            "timeout": "10",
            "timeoutUnits": "seconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 960,
            "y": 680,
            "wires": [
                [
                    "b2d0mxsfjwaiyj06"
                ]
            ]
        },
        {
            "id": "1br45l8bacayfp2x",
            "type": "switch",
            "z": "277da81970794923",
            "name": "State Upstream Required?",
            "property": "stateUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1160,
            "y": 640,
            "wires": [
                [
                    "b2d0mxsfjwaiyj06"
                ]
            ]
        },
        {
            "id": "3ukclxbetk3gq34r",
            "type": "switch",
            "z": "277da81970794923",
            "name": "Channel 1",
            "property": "channel",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "eq",
                    "v": "1",
                    "vt": "num"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 550,
            "y": 680,
            "wires": [
                [
                    "a5hi9mmsa8bq3qii"
                ]
            ]
        },
        {
            "id": "4hg25oi30c82z659",
            "type": "function",
            "z": "277da81970794923",
            "name": "send write data",
            "func": "if (msg.payload.protocol.type === \"bool\" && typeof msg.payload.value === \"boolean\") {\n    if (msg.payload.protocol.invert) {\n        msg.payload.value = !msg.payload.value;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 5,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": 1\n    }\n} else if (msg.payload.protocol.type === \"bool\" && typeof msg.payload.value !== \"boolean\") {\n    if (msg.payload.protocol.invert) {\n        msg.payload.value = msg.payload.value * -1;\n    }\n    msg.payload = {\n        \"value\": msg.payload.value,\n        \"fc\": 6,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": 1\n    }\n} else {\n    msg.payload = {\n        \"value\": parseInt(msg.payload.value) * (1 / msg.payload.protocol.scale),\n        \"fc\": 16,\n        \"unitid\": flow.get(\"bridge.image.controller.unitId\"),\n        \"address\": msg.payload.protocol.address,\n        \"quantity\": global.get(\"function.typeToRegisterLength\")(msg.payload.protocol.type)\n    }\n}\n\nnode.send(msg);\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 320,
            "y": 680,
            "wires": [
                [
                    "3ukclxbetk3gq34r"
                ]
            ]
        },
        {
            "id": "99tzbs14etuam5lz",
            "type": "function",
            "z": "277da81970794923",
            "name": "Set channel parameters",
            "func": "const controllerParameter = flow.get(\"bridge.image.controller\");\nconst protocols = flow.get(\"bridge.image.protocols\");\nconst channel = global.get(\"hardware.interface.serial.channels\").find(channel => channel.id === controllerParameter.channel);\n\nif (channel && controllerParameter && protocols) {\n    if (channel.connectorType == \"TCP\") {\n        msg.payload = {\n            \"connectorType\": channel.connectorType,\n            \"tcpHost\": controllerParameter.tcpHost,\n            \"tcpPort\": controllerParameter.tcpPort,\n            \"tcpType\": controllerParameter.tcpType ? controllerParameter.tcpType : \"DEFAULT\",\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    } else {\n        msg.payload = {\n            \"connectorType\": channel.connectorType,\n            \"serialPort\": channel.serialPort,\n            \"serialBaudrate\": controllerParameter.serialBaudrate ? controllerParameter.serialBaudrate : 19200,\n            \"serialDatabits\": controllerParameter.serialDatabits ? controllerParameter.serialDatabits : 8,\n            \"serialStopbits\": controllerParameter.serialStopbits ? controllerParameter.serialStopbits : 1,\n            \"serialParity\": controllerParameter.serialParity ? controllerParameter.serialParity : \"none\",\n            \"serialType\": controllerParameter.serialType ? controllerParameter.serialType : \"RTU-BUFFERD\",\n            \"serialConnectionDelay\": controllerParameter.serialConnectionDelay ? controllerParameter.serialConnectionDelay : 100,\n            \"unitId\": controllerParameter.unitId ? controllerParameter.unitId : 1,\n            \"commandDelay\": controllerParameter.commandDelay ? controllerParameter.commandDelay : 5,\n            \"clientTimeout\": controllerParameter.clientTimeout ? controllerParameter.clientTimeout : 1000,\n            \"reconnectTimeout\": controllerParameter.reconnectTimeout ? controllerParameter.reconnectTimeout : 2000\n        };\n    }\n    node.send(msg);\n} else {\n    node.warn(\"Invalid channel configuration!\");\n}\n\nnode.done()\n",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 80,
            "wires": [
                [
                    "fbujqpl8sbgx98yi"
                ]
            ]
        },
        {
            "id": "3b5g8vipynb4ohp8",
            "type": "switch",
            "z": "277da81970794923",
            "name": "Error Upstream Required?",
            "property": "errorUpstreamRequired",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "true"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 1160,
            "y": 560,
            "wires": [
                [
                    "g6bc6pups1k056yy"
                ]
            ]
        },
        {
            "id": "g6bc6pups1k056yy",
            "type": "mqtt out",
            "z": "277da81970794923",
            "name": "",
            "topic": "cloud/upstream/error",
            "qos": "2",
            "retain": "true",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "de96f526d294fb46",
            "x": 1140,
            "y": 600,
            "wires": []
        },
        {
            "id": "fbujqpl8sbgx98yi",
            "type": "modbus-flex-connector",
            "z": "277da81970794923",
            "name": "Channel Connector",
            "maxReconnectsPerMinute": 4,
            "emptyQueue": false,
            "showStatusActivities": true,
            "showErrors": true,
            "server": "b3aea7855b156b44",
            "x": 1070,
            "y": 80,
            "wires": [
                []
            ]
        }
    ]
}